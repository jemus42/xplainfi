[{"path":"https://jemus42.github.io/xplainfi/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 xplainfi authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"problem-setup-friedman1-task","dir":"Articles","previous_headings":"","what":"Problem Setup: Friedman1 Task","title":"Perturbation-based Feature Importance Methods","text":"’ll use Friedman1 task generator provides ideal setup demonstrating feature importance methods. synthetic regression task known ground truth: 5 important features (important1 important5) actually affect target 5 unimportant features (unimportant1 unimportant5) pure noise target function : y=10*sin(π*x1*x2)+20*(x3−0.5)2+10*x4+5*x5+ϵy = 10 * \\operatorname{sin}(\\pi * x_1 * x_2) + 20 * (x_3 - 0.5)^2 + 10 * x_4 + 5 * x_5 + \\epsilon makes easy evaluate whether importance methods correctly identify truly important features. task 400 observations 10 features: important1, important2, important3, important4, important5, unimportant1, unimportant2, unimportant3, unimportant4, unimportant5. target variable y.","code":"# Generate the task task <- tgen(\"friedman1\")$generate(n = 400) learner <- lrn(\"regr.ranger\", num.trees = 100) resampling <- rsmp(\"cv\", folds = 3) measure <- msr(\"regr.mse\")"},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"permutation-feature-importance-pfi","dir":"Articles","previous_headings":"","what":"Permutation Feature Importance (PFI)","title":"Perturbation-based Feature Importance Methods","text":"PFI shuffles feature independently, breaking association feature target preserving marginal distribution. stable results, use: - 3-fold CV reliable performance estimates - Within resampling iteration, repeat permutation-prediction-scoring step iters_perm times Sample PFI detailed scores","code":"pfi <- PFI$new(   task = task,   learner = learner,   measure = measure,   resampling = resampling,   iters_perm = 5 )  # Compute importance scores pfi_results <- pfi$compute(relation = \"difference\") pfi_results #> Key: <feature> #>          feature  importance #>           <char>       <num> #>  1:   important1  5.86554439 #>  2:   important2  7.53042540 #>  3:   important3  0.62852245 #>  4:   important4 12.07781769 #>  5:   important5  1.42191247 #>  6: unimportant1  0.03241761 #>  7: unimportant2  0.06147252 #>  8: unimportant3 -0.04262232 #>  9: unimportant4  0.07622793 #> 10: unimportant5 -0.01541102  # Also stored in pfi$importance #> Key: <feature> #>          feature  importance #>           <char>       <num> #>  1:   important1  5.86554439 #>  2:   important2  7.53042540 #>  3:   important3  0.62852245 #>  4:   important4 12.07781769 #>  5:   important5  1.42191247 #>  6: unimportant1  0.03241761 #>  7: unimportant2  0.06147252 #>  8: unimportant3 -0.04262232 #>  9: unimportant4  0.07622793 #> 10: unimportant5 -0.01541102  # Show a sample of detailed scores head(pfi$scores, 10) |>   knitr::kable(digits = 4, caption = \"Sample of PFI detailed scores\")"},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"conditional-feature-importance-cfi","dir":"Articles","previous_headings":"","what":"Conditional Feature Importance (CFI)","title":"Perturbation-based Feature Importance Methods","text":"CFI uses conditional sampling preserve joint distribution features perturbing feature interest. default use Adversarial Random Forests (ARF) conditional sampler internally. Original important1 values: 0.246, 0.786, 0.492, 0.668, 0.521 Sampled important1 values (conditioned important2): -0.152, 0.829, 0.16, 0.756, 0.74","code":"sampler = ARFSampler$new(   task = task,    arf_args = list(verbose = FALSE),   forde_args = list() ) #> Warning: executing %dopar% sequentially: no parallel backend registered  # Example sampling for 5 randomly chosen rows from the task sample_data <- task$data(rows = sample(task$nrow, size = 5)) sampled_result <- sampler$sample(   feature = \"important1\",    data = sample_data,    conditioning_features = \"important2\" ) cfi <- CFI$new(   task = task,   learner = learner,   measure = measure,   resampling = resampling,   iters_perm = 5,   sampler = sampler )  # Compute importance scores cfi_results <- cfi$compute(relation = \"difference\") cfi_results #> Key: <feature> #>          feature   importance #>           <char>        <num> #>  1:   important1  3.174003832 #>  2:   important2  3.435560781 #>  3:   important3  0.487036933 #>  4:   important4  4.345208881 #>  5:   important5  0.551741678 #>  6: unimportant1  0.040457097 #>  7: unimportant2  0.055751318 #>  8: unimportant3 -0.036216862 #>  9: unimportant4  0.051101874 #> 10: unimportant5 -0.008660248"},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"relative-feature-importance-rfi","dir":"Articles","previous_headings":"","what":"Relative Feature Importance (RFI)","title":"Perturbation-based Feature Importance Methods","text":"RFI conditions specific subset features, measuring importance relative features. Let’s condition two important features see others rank relative baseline.","code":"conditioning_set <- c(\"important1\", \"important2\")  rfi <- RFI$new(   task = task,   learner = learner,   measure = measure,   resampling = resampling,   conditioning_set = conditioning_set,   iters_perm = 5,   sampler = sampler )  # Compute importance scores rfi_results <- rfi$compute(relation = \"difference\") rfi_results #> Key: <feature> #>          feature   importance #>           <char>        <num> #>  1:   important1  0.000000000 #>  2:   important2  0.000000000 #>  3:   important3  0.659032969 #>  4:   important4 11.168278482 #>  5:   important5  1.391927039 #>  6: unimportant1  0.035829586 #>  7: unimportant2  0.111951122 #>  8: unimportant3 -0.003414726 #>  9: unimportant4  0.063271393 #> 10: unimportant5  0.022609332"},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"comparing-methods","dir":"Articles","previous_headings":"","what":"Comparing Methods","title":"Perturbation-based Feature Importance Methods","text":"Now let’s compare results three methods: Feature Importance Comparison (Difference Scores)","code":"# Combine results for comparison comparison <- merge(   pfi_results[, .(feature, pfi = importance)],   cfi_results[, .(feature, cfi = importance)],   by = \"feature\" ) comparison <- merge(   comparison,   rfi_results[, .(feature, rfi = importance)],   by = \"feature\" )  # Add feature type for analysis comparison[, feature_type := ifelse(grepl(\"^important\", feature), \"Important\", \"Noise\")]  comparison |>   knitr::kable(     digits = 4,      caption = \"Feature Importance Comparison (Difference Scores)\",     col.names = c(\"Feature\", \"PFI\", \"CFI\", \"RFI\", \"Type\")   )"},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"Perturbation-based Feature Importance Methods","text":"Let’s create comprehensive visualizations understand results:  Let’s also create correlation plot see similar methods :","code":"# Reshape data for plotting plot_data <- comparison |>   melt(     id.vars = c(\"feature\", \"feature_type\"),     measure.vars = c(\"pfi\", \"cfi\", \"rfi\"),     value.name = \"importance\",     variable.name = \"method\"   )  # Clean up method names plot_data[, method := toupper(method)]  # Create the comparison plot ggplot(plot_data, aes(x = importance, y = reorder(feature, importance), fill = method)) +   geom_col(position = \"dodge\", alpha = 0.8) +   scale_fill_manual(values = c(\"PFI\" = \"steelblue\", \"CFI\" = \"darkgreen\", \"RFI\" = \"orange\")) +   labs(     title = \"Feature Importance Comparison: PFI vs CFI vs RFI\",     subtitle = glue::glue(\"Friedman1 task: 5 important + 5 noise features                           RFI conditioned on: {paste(conditioning_set, collapse = ', ')}\"),     x = \"Importance Score (Difference)\",     y = \"Feature\",     fill = \"Method\",     caption = glue::glue(\"Using {resampling$iters}-fold cross-validation                           and 5 permutation iterations\")   ) +   theme_minimal() +   theme(     legend.position = \"bottom\",     plot.title.position = \"plot\"   ) +   facet_wrap(~ feature_type, scales = \"free_y\", ncol = 1) # Calculate correlations between methods pfi_cfi_cor <- cor(comparison$pfi, comparison$cfi) pfi_rfi_cor <- cor(comparison$pfi, comparison$rfi) cfi_rfi_cor <- cor(comparison$cfi, comparison$rfi)  # Create correlation matrix plot cor_data <- comparison[, .(feature, pfi, cfi, rfi, feature_type)]  # PFI vs CFI p1 <- ggplot(cor_data, aes(x = pfi, y = cfi, color = feature_type)) +   geom_point(size = 3, alpha = 0.8) +   geom_smooth(method = \"lm\", se = FALSE, color = \"gray50\", linetype = \"dashed\") +   scale_color_manual(values = c(\"Important\" = \"steelblue\", \"Noise\" = \"lightcoral\")) +   labs(     title = \"PFI vs CFI\",     subtitle = sprintf(\"Correlation: %.3f\", pfi_cfi_cor),     x = \"PFI Score\", y = \"CFI Score\"   ) +   theme_minimal() +   theme(legend.position = \"none\")  # PFI vs RFI   p2 <- ggplot(cor_data, aes(x = pfi, y = rfi, color = feature_type)) +   geom_point(size = 3, alpha = 0.8) +   geom_smooth(method = \"lm\", se = FALSE, color = \"gray50\", linetype = \"dashed\") +   scale_color_manual(values = c(\"Important\" = \"steelblue\", \"Noise\" = \"lightcoral\")) +   labs(     title = \"PFI vs RFI\",     subtitle = sprintf(\"Correlation: %.3f\", pfi_rfi_cor),     x = \"PFI Score\", y = \"RFI Score\"   ) +   theme_minimal() +   theme(legend.position = \"none\")  # CFI vs RFI p3 <- ggplot(cor_data, aes(x = cfi, y = rfi, color = feature_type)) +   geom_point(size = 3, alpha = 0.8) +   geom_smooth(method = \"lm\", se = FALSE, color = \"gray50\", linetype = \"dashed\") +   scale_color_manual(     values = c(\"Important\" = \"steelblue\", \"Noise\" = \"lightcoral\"),     name = \"Feature Type\"   ) +   labs(     title = \"CFI vs RFI\",      subtitle = sprintf(\"Correlation: %.3f\", cfi_rfi_cor),     x = \"CFI Score\", y = \"RFI Score\"   ) +   theme_minimal()  # Combine plots library(patchwork) (p1 / p2 / p3) +    plot_annotation(     title = \"Method Correlations\",     subtitle = \"Each point represents one feature\"   ) +   theme(legend.position = \"bottom\") #> `geom_smooth()` using formula = 'y ~ x' #> `geom_smooth()` using formula = 'y ~ x' #> `geom_smooth()` using formula = 'y ~ x'"},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"understanding-the-results","dir":"Articles","previous_headings":"","what":"Understanding the Results","title":"Perturbation-based Feature Importance Methods","text":"Let’s analyze well method distinguishes important noise features: Summary feature type","code":"# Calculate summary statistics by feature type summary_stats <- comparison[, .(   mean_importance = mean(c(pfi, cfi, rfi)),   pfi_mean = mean(pfi),   cfi_mean = mean(cfi),    rfi_mean = mean(rfi),   n_features = .N ), by = feature_type]  summary_stats |> knitr::kable(digits = 4, caption = \"Summary by feature type\") # Calculate separation ratios (how well each method separates signal from noise) important_pfi <- comparison[feature_type == \"Important\", mean(pfi)] noise_pfi <- comparison[feature_type == \"Noise\", mean(abs(pfi))] pfi_separation <- important_pfi / noise_pfi  important_cfi <- comparison[feature_type == \"Important\", mean(cfi)] noise_cfi <- comparison[feature_type == \"Noise\", mean(abs(cfi))] cfi_separation <- important_cfi / noise_cfi  important_rfi <- comparison[feature_type == \"Important\", mean(rfi)] noise_rfi <- comparison[feature_type == \"Noise\", mean(abs(rfi))] rfi_separation <- important_rfi / noise_rfi  # Store results for inline reporting pfi_sep <- round(pfi_separation, 2) cfi_sep <- round(cfi_separation, 2)  rfi_sep <- round(rfi_separation, 2) pfi_cfi <- round(pfi_cfi_cor, 3) pfi_rfi <- round(pfi_rfi_cor, 3) cfi_rfi <- round(cfi_rfi_cor, 3)"},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"method-performance","dir":"Articles","previous_headings":"Understanding the Results","what":"Method Performance","title":"Perturbation-based Feature Importance Methods","text":"Separation ratios (well method distinguishes important noise features): - PFI: 120.64 - CFI: 62.41 - RFI: 55.76 Correlations methods: - PFI vs CFI: 0.98 - PFI vs RFI: 0.751 - CFI vs RFI: 0.619","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"understanding-the-differences","dir":"Articles","previous_headings":"","what":"Understanding the Differences","title":"Perturbation-based Feature Importance Methods","text":"three methods can yield different results make different assumptions: PFI assumes features independent measures marginal importance feature. CFI preserves conditional distribution P(X−j|Xj)P(X_{-j} | X_j) perturbing feature jj, providing realistic assessment features correlated. RFI measures importance relative specific conditioning set, answering “additional information feature provide beyond already know conditioning features?” Friedman1 example: - methods successfully identify important1 important5 important unimportant1 unimportant5 - relative rankings may differ : - PFI treats feature isolation - CFI accounts dependencies features - RFI shows features add value beyond important1 important2","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"variability-analysis","dir":"Articles","previous_headings":"","what":"Variability Analysis","title":"Perturbation-based Feature Importance Methods","text":"Let’s examine stability importance estimates across resampling- permutation iterations using $scores tables:","code":"detailed_scores <- rbindlist(list(   pfi$scores[, method := \"PFI\"],   cfi$scores[, method := \"CFI\"],   rfi$scores[, method := \"RFI\"] ))  score_summary <- detailed_scores[, .(   mean_importance = mean(importance),   sd_importance = sd(importance),   n_iterations = .N ), by = .(feature, method)]  # Add feature type score_summary[, feature_type := ifelse(grepl(\"^important\", feature), \"Important\", \"Noise\")]  # Plot error bars ggplot(score_summary, aes(     y = reorder(feature, mean_importance),      x = mean_importance,     xmin = mean_importance - sd_importance,      xmax = mean_importance + sd_importance,     color = method)   ) +   facet_wrap(vars(feature_type), ncol = 1, scales = \"free_y\") +   geom_point(size = 3) +   geom_errorbarh(linewidth = 1, height = 0.3) +   scale_color_brewer(palette = \"Dark2\") +   labs(     title = \"Importance Score Variability: Mean ± SD\",     subtitle = glue::glue(\"Error bars show standard deviation across iterations                       RFI conditioned on: {paste(conditioning_set, collapse = ', ')}\"),     x = \"Score (Difference)\",     y = \"Feature\",     color = \"Method\",     caption = paste(\"Using\", resampling$iters, \"-fold CV and\", pfi$param_set$values$iters_perm, \"permutations each\")   ) +   theme_minimal() +   theme(     plot.title.position = \"plot\",     legend.position = \"bottom\"   )"},{"path":[]},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"custom-samplers","dir":"Articles","previous_headings":"Advanced Usage","what":"Custom Samplers","title":"Perturbation-based Feature Importance Methods","text":"can provide custom samplers control:","code":"# Create a custom ARF sampler with specific parameters custom_sampler <- ARFSampler$new(   task = task,   arf_args = list(num.trees = 50),  # Fewer trees for faster computation   forde_args = list(finite_bounds = \"no\") # Allow extrapolation )  cfi_custom <- CFI$new(   task = task,   learner = learner,   measure = measure,   resampling = resampling,   sampler = custom_sampler )"},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"empty-conditioning-set-for-rfi","dir":"Articles","previous_headings":"Advanced Usage","what":"Empty Conditioning Set for RFI","title":"Perturbation-based Feature Importance Methods","text":"RFI empty conditioning set produce similar results PFI: correlation PFI RFI empty conditioning set 0.997, confirming RFI(∅)≈PFI\\mathrm{RFI}(\\emptyset) \\approx \\mathrm{PFI} expected.","code":"rfi_empty <- RFI$new(   task = task,   learner = learner,   measure = measure,   resampling = resampling,   conditioning_set = character(0), # Empty conditioning set   iters_perm = 5,   sampler = sampler )  rfi_empty_results <- rfi_empty$compute()  # Compare with PFI empty_comparison <- merge(   pfi_results[, .(feature, pfi = importance)],   rfi_empty_results[, .(feature, rfi_empty = importance)],   by = \"feature\" )  correlation_empty <- cor(empty_comparison$pfi, empty_comparison$rfi_empty)"},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"key-takeaways","dir":"Articles","previous_headings":"","what":"Key Takeaways","title":"Perturbation-based Feature Importance Methods","text":"methods correctly identify important features well-structured synthetic task PFI provides baseline marginal feature importance CFI accounts feature dependencies conditional sampling RFI measures relative importance beyond specified conditioning set Use PFI simple, interpretable marginal importance Use CFI feature dependencies matter Use RFI understand incremental value beyond known important features","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/sage-methods.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Shapley Additive Global Importance (SAGE)","text":"Shapley Additive Global Importance (SAGE) feature importance method based cooperative game theory uses Shapley values fairly distribute total prediction performance among features. Unlike permutation-based methods measure drop performance features perturbed, SAGE measures much feature contributes model’s overall performance marginalizing (removing) features. key insight SAGE provides complete decomposition model’s performance: sum SAGE values equals difference model’s performance performance features marginalized. xplainfi provides two implementations SAGE: MarginalSAGE: Marginalizes features independently (standard SAGE) ConditionalSAGE: Marginalizes features conditionally using ARF sampling","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/sage-methods.html","id":"the-friedman1-task","dir":"Articles","previous_headings":"","what":"The Friedman1 Task","title":"Shapley Additive Global Importance (SAGE)","text":"’ll use Friedman1 task generator demonstrate SAGE methods. synthetic regression task known ground truth makes easy interpret results: 5 important features (important1 important5) actually affect target 5 unimportant features (unimportant1 unimportant5) pure noise target function : y=10*sin(π*x1*x2)+20*(x3−0.5)2+10*x4+5*x5+ϵy = 10 * \\operatorname{sin}(\\pi * x_1 * x_2) + 20 * (x_3 - 0.5)^2 + 10 * x_4 + 5 * x_5 + \\epsilon task 500 observations 10 features: important1, important2, important3, important4, important5, unimportant1, unimportant2, unimportant3, unimportant4, unimportant5. target variable y. Let’s set learner measure. ’ll use random forest able capture nonlinear relationships data:","code":"set.seed(123) task = tgen(\"friedman1\")$generate(n = 500) learner = lrn(\"regr.ranger\", num.trees = 100) measure = msr(\"regr.mse\")"},{"path":"https://jemus42.github.io/xplainfi/articles/sage-methods.html","id":"marginal-sage","dir":"Articles","previous_headings":"","what":"Marginal SAGE","title":"Shapley Additive Global Importance (SAGE)","text":"Marginal SAGE marginalizes features independently averaging predictions reference dataset. standard SAGE implementation described original paper. Let’s visualize results:","code":"# Create Marginal SAGE instance marginal_sage = MarginalSAGE$new(   task = task,   learner = learner,   measure = measure,   n_permutations = 20L,  # More permutations for stable results   max_reference_size = 100L )  # Compute SAGE values marginal_sage$compute() #>          feature   importance #>           <char>        <num> #>  1:   important1  3.822106318 #>  2:   important2  4.772059968 #>  3:   important3  1.118253503 #>  4:   important4  5.893192811 #>  5:   important5  1.784793110 #>  6: unimportant1 -0.047656519 #>  7: unimportant2 -0.048262424 #>  8: unimportant3 -0.076914131 #>  9: unimportant4 -0.083675223 #> 10: unimportant5  0.004202781 print(marginal_sage$importance) #>          feature   importance #>           <char>        <num> #>  1:   important1  3.822106318 #>  2:   important2  4.772059968 #>  3:   important3  1.118253503 #>  4:   important4  5.893192811 #>  5:   important5  1.784793110 #>  6: unimportant1 -0.047656519 #>  7: unimportant2 -0.048262424 #>  8: unimportant3 -0.076914131 #>  9: unimportant4 -0.083675223 #> 10: unimportant5  0.004202781 # Extract importance scores marginal_results = marginal_sage$importance marginal_results$method = \"Marginal SAGE\"  # Create a factor with proper ordering marginal_results$feature = factor(   marginal_results$feature,   levels = marginal_results$feature[order(marginal_results$importance, decreasing = TRUE)] )  # Create bar plot ggplot(marginal_results, aes(x = feature, y = importance)) +   geom_col(aes(fill = grepl(\"^important\", feature)), alpha = 0.8) +   scale_fill_manual(     values = c(\"FALSE\" = \"lightcoral\", \"TRUE\" = \"steelblue\"),     labels = c(\"Noise features\", \"Important features\"),     name = \"Feature type\"   ) +   labs(     title = \"Marginal SAGE Feature Importance\",     subtitle = \"Friedman1 task: 5 important features + 5 noise features\",     x = \"Features\",      y = \"SAGE Value\"   ) +   theme_minimal() +   theme(axis.text.x = element_text(angle = 45, hjust = 1))"},{"path":"https://jemus42.github.io/xplainfi/articles/sage-methods.html","id":"conditional-sage","dir":"Articles","previous_headings":"","what":"Conditional SAGE","title":"Shapley Additive Global Importance (SAGE)","text":"Conditional SAGE uses conditional sampling (via ARF default) marginalize features preserving dependencies remaining features. can provide different insights, especially features correlated. Let’s visualize conditional SAGE results:","code":"# Create Conditional SAGE instance conditional_sage = ConditionalSAGE$new(   task = task,   learner = learner,   measure = measure,   n_permutations = 20L,   max_reference_size = 100L ) #> Iteration: 0, Accuracy: 47.34% #> Warning: executing %dopar% sequentially: no parallel backend registered  # Compute SAGE values conditional_sage$compute() #>          feature  importance #>           <char>       <num> #>  1:   important1  4.66358094 #>  2:   important2  4.35406218 #>  3:   important3  1.24089600 #>  4:   important4  6.30771863 #>  5:   important5  1.50581856 #>  6: unimportant1  0.03857396 #>  7: unimportant2 -0.01510479 #>  8: unimportant3  0.01149043 #>  9: unimportant4  0.05352929 #> 10: unimportant5 -0.02463429 print(conditional_sage$importance) #>          feature  importance #>           <char>       <num> #>  1:   important1  4.66358094 #>  2:   important2  4.35406218 #>  3:   important3  1.24089600 #>  4:   important4  6.30771863 #>  5:   important5  1.50581856 #>  6: unimportant1  0.03857396 #>  7: unimportant2 -0.01510479 #>  8: unimportant3  0.01149043 #>  9: unimportant4  0.05352929 #> 10: unimportant5 -0.02463429 # Extract importance scores conditional_results = conditional_sage$importance conditional_results$method = \"Conditional SAGE\"  # Create a factor with proper ordering conditional_results$feature = factor(   conditional_results$feature,   levels = conditional_results$feature[order(conditional_results$importance, decreasing = TRUE)] )  # Create bar plot ggplot(conditional_results, aes(x = feature, y = importance)) +   geom_col(aes(fill = grepl(\"^important\", feature)), alpha = 0.8) +   scale_fill_manual(     values = c(\"FALSE\" = \"lightcoral\", \"TRUE\" = \"steelblue\"),     labels = c(\"Noise features\", \"Important features\"),     name = \"Feature type\"   ) +   labs(     title = \"Conditional SAGE Feature Importance\",     subtitle = \"Friedman1 task: 5 important features + 5 noise features\",     x = \"Features\",      y = \"SAGE Value\"   ) +   theme_minimal() +   theme(axis.text.x = element_text(angle = 45, hjust = 1))"},{"path":"https://jemus42.github.io/xplainfi/articles/sage-methods.html","id":"comparison-of-methods","dir":"Articles","previous_headings":"","what":"Comparison of Methods","title":"Shapley Additive Global Importance (SAGE)","text":"Let’s compare two SAGE methods side side:  Let’s also create correlation plot see similar rankings :","code":"# Combine results combined_results = rbind(marginal_results, conditional_results)  # Create comparison plot ggplot(combined_results, aes(x = feature, y = importance, fill = method)) +   geom_col(position = \"dodge\", alpha = 0.8) +   scale_fill_manual(values = c(\"Marginal SAGE\" = \"steelblue\", \"Conditional SAGE\" = \"darkgreen\")) +   labs(     title = \"Marginal vs Conditional SAGE Comparison\",     subtitle = \"Friedman1 task: Both methods should identify important features\",     x = \"Features\",      y = \"SAGE Value\",     fill = \"Method\"   ) +   theme_minimal() +   theme(axis.text.x = element_text(angle = 45, hjust = 1)) +   facet_wrap(~ grepl(\"^important\", feature),               labeller = labeller(.default = function(x) ifelse(x, \"Important Features\", \"Noise Features\")),              scales = \"free_x\") # Merge the two results for correlation analysis merged_results = merge(   marginal_results[, c(\"feature\", \"importance\")],    conditional_results[, c(\"feature\", \"importance\")],    by = \"feature\",    suffixes = c(\"_marginal\", \"_conditional\") )  # Calculate correlation correlation = cor(merged_results$importance_marginal, merged_results$importance_conditional)  # Create scatter plot ggplot(merged_results, aes(x = importance_marginal, y = importance_conditional)) +   geom_point(aes(color = grepl(\"^important\", feature)), size = 3, alpha = 0.8) +   geom_smooth(method = \"lm\", se = FALSE, color = \"gray50\", linetype = \"dashed\") +   scale_color_manual(     values = c(\"FALSE\" = \"lightcoral\", \"TRUE\" = \"steelblue\"),     labels = c(\"Noise features\", \"Important features\"),     name = \"Feature type\"   ) +   labs(     title = \"Marginal vs Conditional SAGE Correlation\",     subtitle = sprintf(\"Pearson correlation: %.3f\", correlation),     x = \"Marginal SAGE Value\",     y = \"Conditional SAGE Value\"   ) +   theme_minimal() +   geom_text(aes(label = feature), hjust = 0, vjust = -0.5, size = 3) #> `geom_smooth()` using formula = 'y ~ x'"},{"path":"https://jemus42.github.io/xplainfi/articles/sage-methods.html","id":"understanding-the-results","dir":"Articles","previous_headings":"","what":"Understanding the Results","title":"Shapley Additive Global Importance (SAGE)","text":"Let’s analyze learned comparison:","code":"# Calculate summary statistics important_marginal = marginal_results$importance[grepl(\"^important\", marginal_results$feature)] noise_marginal = marginal_results$importance[grepl(\"^unimportant\", marginal_results$feature)]  important_conditional = conditional_results$importance[grepl(\"^important\", conditional_results$feature)] noise_conditional = conditional_results$importance[grepl(\"^unimportant\", conditional_results$feature)]  # Store for inline reporting marg_imp_mean = round(mean(important_marginal), 4) marg_imp_std = round(sd(important_marginal), 4) marg_noise_mean = round(mean(noise_marginal), 4) marg_noise_std = round(sd(noise_marginal), 4) marg_separation = round(mean(important_marginal) / mean(abs(noise_marginal)), 2)  cond_imp_mean = round(mean(important_conditional), 4) cond_imp_std = round(sd(important_conditional), 4) cond_noise_mean = round(mean(noise_conditional), 4) cond_noise_std = round(sd(noise_conditional), 4) cond_separation = round(mean(important_conditional) / mean(abs(noise_conditional)), 2)  method_correlation = round(correlation, 3) total_sage_marginal = round(sum(marginal_results$importance), 4) total_sage_conditional = round(sum(conditional_results$importance), 4)"},{"path":"https://jemus42.github.io/xplainfi/articles/sage-methods.html","id":"marginal-sage-results","dir":"Articles","previous_headings":"Understanding the Results","what":"Marginal SAGE Results","title":"Shapley Additive Global Importance (SAGE)","text":"Important features - Mean: 3.4781 | Std: 2.0038 Noise features - Mean: -0.0505 | Std: 0.0347 Separation ratio: 66.7","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/sage-methods.html","id":"conditional-sage-results","dir":"Articles","previous_headings":"Understanding the Results","what":"Conditional SAGE Results","title":"Shapley Additive Global Importance (SAGE)","text":"Important features - Mean: 3.6144 | Std: 2.1784 Noise features - Mean: 0.0128 | Std: 0.0336 Separation ratio: 126.08","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/sage-methods.html","id":"method-comparison","dir":"Articles","previous_headings":"Understanding the Results","what":"Method Comparison","title":"Shapley Additive Global Importance (SAGE)","text":"Correlation methods: 0.99 Total SAGE sum (Marginal): 17.1381 Total SAGE sum (Conditional): 18.1359","code":""},{"path":[]},{"path":"https://jemus42.github.io/xplainfi/articles/xplainfi.html","id":"simple-case-without-resampling","dir":"Articles","previous_headings":"PFI","what":"Simple case without resampling","title":"xplainfi","text":"Default behavior internally construct standard holdout resampling default ratio Calculating PFI: Q: $compute() run construction? call $new() $compute() ’s nothing needs happen technically, long relation param set directly. recompute needed, \"difference\" default: Recomputes param changes, stores new param Q: $compute() called default value \"relation\" (.e. \"difference\") used, doesn’t seem ideal. Maybe default param stored object rather feel like separate function. Retrieve aggregated scores manually:","code":"pfi <- PFI$new(   task = task,   learner = learner,   measure = measure )  # Stores parameter set to calculate PFI in different ways pfi$param_set #> <ParamSet(2)> #>            id    class lower upper nlevels    default      value #>        <char>   <char> <num> <num>   <num>     <list>     <list> #> 1:   relation ParamFct    NA    NA       2 difference difference #> 2: iters_perm ParamInt     1   Inf     Inf          1          1  # Default behavior should be sane pfi$compute() #> Key: <feature> #>            feature   importance #>             <char>        <num> #> 1:     bare_nuclei 0.0311134047 #> 2:     bl_cromatin 0.0039695264 #> 3:      cell_shape 0.0181463463 #> 4:       cell_size 0.0260011523 #> 5:    cl_thickness 0.0068208143 #> 6:    epith_c_size 0.0027591783 #> 7:   marg_adhesion 0.0026618505 #> 8:         mitoses 0.0004096992 #> 9: normal_nucleoli 0.0088215131 pfi$compute(relation = \"difference\") #> Key: <feature> #>            feature   importance #>             <char>        <num> #> 1:     bare_nuclei 0.0311134047 #> 2:     bl_cromatin 0.0039695264 #> 3:      cell_shape 0.0181463463 #> 4:       cell_size 0.0260011523 #> 5:    cl_thickness 0.0068208143 #> 6:    epith_c_size 0.0027591783 #> 7:   marg_adhesion 0.0026618505 #> 8:         mitoses 0.0004096992 #> 9: normal_nucleoli 0.0088215131 pfi$compute(relation = \"ratio\") #> Key: <feature> #>            feature importance #>             <char>      <num> #> 1:     bare_nuclei   2.005166 #> 2:     bl_cromatin   1.360535 #> 3:      cell_shape   1.787501 #> 4:       cell_size   1.892795 #> 5:    cl_thickness   1.233292 #> 6:    epith_c_size   1.073837 #> 7:   marg_adhesion   1.143984 #> 8:         mitoses   1.038286 #> 9: normal_nucleoli   1.377058 pfi$param_set #> <ParamSet(2)> #>            id    class lower upper nlevels    default  value #>        <char>   <char> <num> <num>   <num>     <list> <list> #> 1:   relation ParamFct    NA    NA       2 difference  ratio #> 2: iters_perm ParamInt     1   Inf     Inf          1      1 pfi$compute() #> Key: <feature> #>            feature   importance #>             <char>        <num> #> 1:     bare_nuclei 0.0269669118 #> 2:     bl_cromatin 0.0080938632 #> 3:      cell_shape 0.0192081960 #> 4:       cell_size 0.0281257099 #> 5:    cl_thickness 0.0061718034 #> 6:    epith_c_size 0.0010423567 #> 7:   marg_adhesion 0.0018831063 #> 8:         mitoses 0.0006549462 #> 9: normal_nucleoli 0.0086903167 pfi$importance #> Key: <feature> #>            feature   importance #>             <char>        <num> #> 1:     bare_nuclei 0.0269669118 #> 2:     bl_cromatin 0.0080938632 #> 3:      cell_shape 0.0192081960 #> 4:       cell_size 0.0281257099 #> 5:    cl_thickness 0.0061718034 #> 6:    epith_c_size 0.0010423567 #> 7:   marg_adhesion 0.0018831063 #> 8:         mitoses 0.0006549462 #> 9: normal_nucleoli 0.0086903167"},{"path":"https://jemus42.github.io/xplainfi/articles/xplainfi.html","id":"with-resampling","dir":"Articles","previous_headings":"PFI","what":"With resampling","title":"xplainfi","text":"Different measure: Q: Maybe worth allowing change measure post-hoc?","code":"learner <- lrn(\"classif.ranger\", predict_type = \"prob\") resampling <- rsmp(\"cv\", folds = 3) measure <- msr(\"classif.bbrier\")  pfi <- PFI$new(   task = task,   learner = learner,   resampling = resampling,   measure = measure )  pfi$resampling #> <ResamplingCV>: Cross-Validation #> * Iterations: 3 #> * Instantiated: TRUE #> * Parameters: folds=3 pfi$resample_result #> NULL  pfi$compute() #> Key: <feature> #>            feature   importance #>             <char>        <num> #> 1:     bare_nuclei 0.0312390148 #> 2:     bl_cromatin 0.0075122543 #> 3:      cell_shape 0.0161138358 #> 4:       cell_size 0.0308948666 #> 5:    cl_thickness 0.0156788348 #> 6:    epith_c_size 0.0018646652 #> 7:   marg_adhesion 0.0029774891 #> 8:         mitoses 0.0006869458 #> 9: normal_nucleoli 0.0055014621  pfi$resample_result #> <ResampleResult> with 3 resampling iterations #>        task_id     learner_id resampling_id iteration     prediction_test #>  breast_cancer classif.ranger            cv         1 <PredictionClassif> #>  breast_cancer classif.ranger            cv         2 <PredictionClassif> #>  breast_cancer classif.ranger            cv         3 <PredictionClassif> #>  warnings errors #>         0      0 #>         0      0 #>         0      0  pfi$importance #> Key: <feature> #>            feature   importance #>             <char>        <num> #> 1:     bare_nuclei 0.0312390148 #> 2:     bl_cromatin 0.0075122543 #> 3:      cell_shape 0.0161138358 #> 4:       cell_size 0.0308948666 #> 5:    cl_thickness 0.0156788348 #> 6:    epith_c_size 0.0018646652 #> 7:   marg_adhesion 0.0029774891 #> 8:         mitoses 0.0006869458 #> 9: normal_nucleoli 0.0055014621 pfi <- PFI$new(   task = task,   learner = learner,   resampling = resampling,   measure = msr(\"classif.auc\") )  pfi$compute(relation = \"ratio\") #> Key: <feature> #>            feature importance #>             <char>      <num> #> 1:     bare_nuclei   1.017920 #> 2:     bl_cromatin   1.001659 #> 3:      cell_shape   1.005498 #> 4:       cell_size   1.006188 #> 5:    cl_thickness   1.006749 #> 6:    epith_c_size   1.001143 #> 7:   marg_adhesion   1.001822 #> 8:         mitoses   1.000341 #> 9: normal_nucleoli   1.002252 pfi$compute(relation = \"difference\") #> Key: <feature> #>            feature   importance #>             <char>        <num> #> 1:     bare_nuclei 1.487792e-02 #> 2:     bl_cromatin 3.758886e-04 #> 3:      cell_shape 3.792059e-03 #> 4:       cell_size 3.903575e-03 #> 5:    cl_thickness 2.910220e-03 #> 6:    epith_c_size 7.057850e-04 #> 7:   marg_adhesion 1.691431e-03 #> 8:         mitoses 3.936168e-04 #> 9: normal_nucleoli 3.428817e-05"},{"path":"https://jemus42.github.io/xplainfi/articles/xplainfi.html","id":"with-multiple-permutation-iterations","dir":"Articles","previous_headings":"PFI","what":"With multiple permutation iterations","title":"xplainfi","text":"","code":"pfi <- PFI$new(   task = task,   learner = learner,   resampling = resampling,   measure = msr(\"classif.ce\"),   iters_perm = 5 # permute each feature 5 times in each resampling iteration )  pfi$compute(relation = \"ratio\") #> Key: <feature> #>            feature importance #>             <char>      <num> #> 1:     bare_nuclei   2.577778 #> 2:     bl_cromatin   1.114286 #> 3:      cell_shape   1.221164 #> 4:       cell_size   1.341799 #> 5:    cl_thickness   1.259259 #> 6:    epith_c_size   1.024339 #> 7:   marg_adhesion   1.019048 #> 8:         mitoses   1.000000 #> 9: normal_nucleoli   1.057143"},{"path":"https://jemus42.github.io/xplainfi/articles/xplainfi.html","id":"loco","dir":"Articles","previous_headings":"","what":"LOCO","title":"xplainfi","text":"setup now using LOCO, differs internally needs refit model. Notably, Task object need modified, suffices adjust .$col_roles$feature property.","code":"learner <- lrn(\"classif.ranger\", predict_type = \"prob\")  loco <- LOCO$new(   task = task,   learner = learner,   resampling = resampling,   measure = msr(\"classif.bbrier\") )  loco$compute(relation = \"ratio\") #> Key: <feature> #>            feature importance #>             <char>      <num> #> 1:     bare_nuclei  1.0905448 #> 2:     bl_cromatin  0.9838583 #> 3:      cell_shape  0.9994163 #> 4:       cell_size  0.9634430 #> 5:    cl_thickness  1.0666010 #> 6:    epith_c_size  0.9740075 #> 7:   marg_adhesion  0.9867229 #> 8:         mitoses  0.9999505 #> 9: normal_nucleoli  0.9977767  loco$scores #> Key: <feature, iter_rsmp> #>             feature iter_rsmp classif.bbrier_orig classif.bbrier_loco #>              <char>     <int>               <num>               <num> #>  1:     bare_nuclei         1          0.03014357          0.03379549 #>  2:     bare_nuclei         2          0.02458370          0.02650079 #>  3:     bare_nuclei         3          0.02599303          0.02787756 #>  4:     bl_cromatin         1          0.03014357          0.02771802 #>  5:     bl_cromatin         2          0.02458370          0.02518596 #>  6:     bl_cromatin         3          0.02599303          0.02618910 #>  7:      cell_shape         1          0.03014357          0.03003903 #>  8:      cell_shape         2          0.02458370          0.02503626 #>  9:      cell_shape         3          0.02599303          0.02555915 #> 10:       cell_size         1          0.03014357          0.02948189 #> 11:       cell_size         2          0.02458370          0.02431988 #> 12:       cell_size         3          0.02599303          0.02399186 #> 13:    cl_thickness         1          0.03014357          0.03258453 #> 14:    cl_thickness         2          0.02458370          0.02592081 #> 15:    cl_thickness         3          0.02599303          0.02766789 #> 16:    epith_c_size         1          0.03014357          0.03046220 #> 17:    epith_c_size         2          0.02458370          0.02186273 #> 18:    epith_c_size         3          0.02599303          0.02656836 #> 19:   marg_adhesion         1          0.03014357          0.03014357 #> 20:   marg_adhesion         2          0.02458370          0.02513951 #> 21:   marg_adhesion         3          0.02599303          0.02437002 #> 22:         mitoses         1          0.03014357          0.03025939 #> 23:         mitoses         2          0.02458370          0.02436608 #> 24:         mitoses         3          0.02599303          0.02611939 #> 25: normal_nucleoli         1          0.03014357          0.02924740 #> 26: normal_nucleoli         2          0.02458370          0.02512095 #> 27: normal_nucleoli         3          0.02599303          0.02602437 #>             feature iter_rsmp classif.bbrier_orig classif.bbrier_loco #>     importance #>          <num> #>  1:  1.1211509 #>  2:  1.0779822 #>  3:  1.0725013 #>  4:  0.9195336 #>  5:  1.0244983 #>  6:  1.0075430 #>  7:  0.9965321 #>  8:  1.0184089 #>  9:  0.9833078 #> 10:  0.9780490 #> 11:  0.9892686 #> 12:  0.9230114 #> 13:  1.0809778 #> 14:  1.0543901 #> 15:  1.0644352 #> 16:  1.0105704 #> 17:  0.8893181 #> 18:  1.0221339 #> 19:  0.9999999 #> 20:  1.0226088 #> 21:  0.9375599 #> 22:  1.0038423 #> 23:  0.9911478 #> 24:  1.0048612 #> 25:  0.9702701 #> 26:  1.0218541 #> 27:  1.0012059 #>     importance"},{"path":"https://jemus42.github.io/xplainfi/articles/xplainfi.html","id":"aggregating-results","dir":"Articles","previous_headings":"","what":"Aggregating results","title":"xplainfi","text":"sure “blessed” way combining results like , ideally possible lose track score refers measure Importance scores (ratio)","code":"importance_combined <- merge(   pfi$importance,   loco$importance,   by = \"feature\" )  data.table::setnames(   importance_combined,   old = c(\"importance.x\", \"importance.y\"),   new = c(\"pfi\", \"loco\") )  importance_combined |>   knitr::kable(digits = 4, caption = \"Importance scores (ratio)\") library(ggplot2)  importance_combined |>   data.table::melt(     id.vars = \"feature\",     value.name = \"score\",     variable.name = \"method\"   ) |>   ggplot(aes(x = score, y = feature, color = method, fill = method)) +   geom_col(position = \"dodge\", alpha = .5) +   scale_color_brewer(palette = \"Dark2\", aesthetics = c(\"color\", \"fill\")) +   labs(     title = \"Feature Importance Scores\",     subtitle = sprintf(       \"For task %s and measure %s, using relativ scores\",       task$id,       measure$id     ),     x = \"Score\",     y = \"Feature\",     color = \"Method\",     fill = \"Method\",     caption = sprintf(\"Using %i-fold %s\", resampling$iters, resampling$id)   ) +   theme_minimal() +   theme(     legend.position = \"bottom\",     plot.title.position = \"plot\"   )"},{"path":"https://jemus42.github.io/xplainfi/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lukas Burk. Author, maintainer.","code":""},{"path":"https://jemus42.github.io/xplainfi/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Burk L (2025). xplainfi: Feature Importance Methods Model Interpretability. R package version 0.0.0.9000, https://jemus42.github.io/xplainfi/.","code":"@Manual{,   title = {xplainfi: Feature Importance Methods for Model Interpretability},   author = {Lukas Burk},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://jemus42.github.io/xplainfi/}, }"},{"path":"https://jemus42.github.io/xplainfi/index.html","id":"xplainfi","dir":"","previous_headings":"","what":"Feature Importance Methods for Model Interpretability","title":"Feature Importance Methods for Model Interpretability","text":"goal xplainfi collect common feature importance methods unified extensible interface. now, built specifically around mlr3, available abstractions learners, tasks, measures, etc. greatly simplify implementation importance measures.","code":""},{"path":"https://jemus42.github.io/xplainfi/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Feature Importance Methods for Model Interpretability","text":"can install development version xplainfi like :","code":"# install.packages(pak) pak::pak(\"jemus42/xplainfi\")"},{"path":"https://jemus42.github.io/xplainfi/index.html","id":"example-pfi","dir":"","previous_headings":"","what":"Example: PFI","title":"Feature Importance Methods for Model Interpretability","text":"basic example calculate PFI given learner task, using repeated cross-validation resampling strategy computing PFI within resampling 5 times: Compute print PFI scores: Retrieve scores later pfi$importance. PFI computed based resampling multiple iterations, / multiple permutation iterations, individual scores can retrieved data.table: iter_rsmp corresponds resampling iteration, .e., 3 * 2 = 6 2 repeats 3-fold cross-validation, iter_perm corresponds permutation iteration, 5 case. pfi$importance contains means across iterations, pfi$scores allows manually aggregate way see fit. simplest case, run PFI single resampling iteration (holdout) single permutation iteration, pfi$importance contain values pfi$scores.","code":"library(xplainfi) library(mlr3) library(mlr3learners)  task = tsk(\"german_credit\") learner = lrn(\"classif.ranger\", num.trees = 100) measure = msr(\"classif.ce\")  pfi = PFI$new(   task = task,   learner = learner,   measure = measure,   resampling = rsmp(\"repeated_cv\", folds = 3, repeats = 2),   iters_perm = 5 ) pfi$compute() #> Key: <feature> #>                     feature    importance #>                      <char>         <num> #>  1:                     age  9.929091e-04 #>  2:                  amount  1.288294e-02 #>  3:          credit_history  1.218554e-02 #>  4:                duration  1.598605e-02 #>  5:     employment_duration  3.890717e-03 #>  6:          foreign_worker -1.202700e-03 #>  7:                 housing -8.016999e-04 #>  8:        installment_rate  3.599408e-03 #>  9:                     job -1.002799e-03 #> 10:          number_credits -2.402103e-03 #> 11:           other_debtors  5.898713e-03 #> 12: other_installment_plans -9.095922e-04 #> 13:           people_liable  5.994018e-07 #> 14:     personal_status_sex -1.807496e-03 #> 15:       present_residence  6.944070e-04 #> 16:                property  1.291111e-03 #> 17:                 purpose  2.486918e-03 #> 18:                 savings  1.819694e-02 #> 19:                  status  3.978829e-02 #> 20:               telephone  1.293209e-03 #>                     feature    importance pfi$scores #> Key: <feature, iter_rsmp> #>        feature iter_rsmp iter_perm classif.ce_orig classif.ce_perm   importance #>         <char>     <int>     <int>           <num>           <num>        <num> #>   1:       age         1         1       0.2095808       0.2305389  0.020958084 #>   2:       age         1         2       0.2095808       0.2335329  0.023952096 #>   3:       age         1         3       0.2095808       0.2275449  0.017964072 #>   4:       age         1         4       0.2095808       0.2215569  0.011976048 #>   5:       age         1         5       0.2095808       0.2155689  0.005988024 #>  ---                                                                            #> 596: telephone         6         1       0.2612613       0.2432432 -0.018018018 #> 597: telephone         6         2       0.2612613       0.2552553 -0.006006006 #> 598: telephone         6         3       0.2612613       0.2612613  0.000000000 #> 599: telephone         6         4       0.2612613       0.2522523 -0.009009009 #> 600: telephone         6         5       0.2612613       0.2402402 -0.021021021 pfi_single = PFI$new(   task = task,   learner = learner,   measure = measure )  pfi_single$compute() #> Key: <feature> #>                     feature   importance #>                      <char>        <num> #>  1:                     age  0.003003003 #>  2:                  amount  0.012012012 #>  3:          credit_history  0.024024024 #>  4:                duration  0.012012012 #>  5:     employment_duration  0.006006006 #>  6:          foreign_worker  0.000000000 #>  7:                 housing  0.006006006 #>  8:        installment_rate  0.024024024 #>  9:                     job -0.003003003 #> 10:          number_credits -0.003003003 #> 11:           other_debtors  0.012012012 #> 12: other_installment_plans  0.006006006 #> 13:           people_liable  0.009009009 #> 14:     personal_status_sex  0.003003003 #> 15:       present_residence  0.006006006 #> 16:                property  0.003003003 #> 17:                 purpose  0.015015015 #> 18:                 savings  0.003003003 #> 19:                  status  0.054054054 #> 20:               telephone -0.003003003 #>                     feature   importance pfi_single$scores #> Key: <feature, iter_rsmp> #>                     feature iter_rsmp iter_perm classif.ce_orig classif.ce_perm #>                      <char>     <int>     <int>           <num>           <num> #>  1:                     age         1         1       0.2732733       0.2762763 #>  2:                  amount         1         1       0.2732733       0.2852853 #>  3:          credit_history         1         1       0.2732733       0.2972973 #>  4:                duration         1         1       0.2732733       0.2852853 #>  5:     employment_duration         1         1       0.2732733       0.2792793 #>  6:          foreign_worker         1         1       0.2732733       0.2732733 #>  7:                 housing         1         1       0.2732733       0.2792793 #>  8:        installment_rate         1         1       0.2732733       0.2972973 #>  9:                     job         1         1       0.2732733       0.2702703 #> 10:          number_credits         1         1       0.2732733       0.2702703 #> 11:           other_debtors         1         1       0.2732733       0.2852853 #> 12: other_installment_plans         1         1       0.2732733       0.2792793 #> 13:           people_liable         1         1       0.2732733       0.2822823 #> 14:     personal_status_sex         1         1       0.2732733       0.2762763 #> 15:       present_residence         1         1       0.2732733       0.2792793 #> 16:                property         1         1       0.2732733       0.2762763 #> 17:                 purpose         1         1       0.2732733       0.2882883 #> 18:                 savings         1         1       0.2732733       0.2762763 #> 19:                  status         1         1       0.2732733       0.3273273 #> 20:               telephone         1         1       0.2732733       0.2702703 #>                     feature iter_rsmp iter_perm classif.ce_orig classif.ce_perm #>       importance #>            <num> #>  1:  0.003003003 #>  2:  0.012012012 #>  3:  0.024024024 #>  4:  0.012012012 #>  5:  0.006006006 #>  6:  0.000000000 #>  7:  0.006006006 #>  8:  0.024024024 #>  9: -0.003003003 #> 10: -0.003003003 #> 11:  0.012012012 #> 12:  0.006006006 #> 13:  0.009009009 #> 14:  0.003003003 #> 15:  0.006006006 #> 16:  0.003003003 #> 17:  0.015015015 #> 18:  0.003003003 #> 19:  0.054054054 #> 20: -0.003003003 #>       importance"},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":null,"dir":"Reference","previous_headings":"","what":"ARF-based Conditional Sampler — ARFSampler","title":"ARF-based Conditional Sampler — ARFSampler","text":"Implements conditional sampling using Adversarial Random Forests (ARF). ARF can handle mixed data types (continuous categorical) provides flexible conditional sampling modeling joint distribution.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ARF-based Conditional Sampler — ARFSampler","text":"ARFSampler fits Adversarial Random Forest model task data, uses generate samples \\(P(X_j | X_{-j})\\) \\(X_j\\) feature interest \\(X_{-j}\\) conditioning features.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"ARF-based Conditional Sampler — ARFSampler","text":"Watson, D.S., Blesch, K., Kapar, J. & Wright, M.N.. (2023). Adversarial Random Forests Density Estimation Generative Modeling. Proceedings 26th International Conference Artificial Intelligence Statistics, Proceedings Machine Learning Research 206:5357-5375 Available https://proceedings.mlr.press/v206/watson23a.html. Blesch, K., Koenen, N., Kapar, J., Golchian, P., Burk, L., Loecher, M. & Wright, M. N. (2025). Conditional feature importance generative modeling using adversarial random forests. Proceedings 39th AAAI Conference Artificial Intelligence. Available https://arxiv.org/abs/2501.11178","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"ARF-based Conditional Sampler — ARFSampler","text":"xplainfi::FeatureSampler -> xplainfi::ConditionalSampler -> ARFSampler","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"ARF-based Conditional Sampler — ARFSampler","text":"arf_model Adversarial Random Forest model psi Distribution parameters estimated ARF","code":""},{"path":[]},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"ARF-based Conditional Sampler — ARFSampler","text":"ARFSampler$new() ARFSampler$sample() ARFSampler$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"ARF-based Conditional Sampler — ARFSampler","text":"Creates new instance ARFSampler class. fit ARF parallel, set arf_args = list(parallel = TRUE) register parallel backend (see arf::arf).","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARF-based Conditional Sampler — ARFSampler","text":"","code":"ARFSampler$new(task, arf_args = NULL, forde_args = NULL)"},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARF-based Conditional Sampler — ARFSampler","text":"task (mlr3::Task) Task sample arf_args, forde_args (list) Arguments passed arf::adversarial_rf arf::forde respectively.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"method-sample-","dir":"Reference","previous_headings":"","what":"Method sample()","title":"ARF-based Conditional Sampler — ARFSampler","text":"Sample values feature(s) conditionally features using ARF","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"ARF-based Conditional Sampler — ARFSampler","text":"","code":"ARFSampler$sample(   feature,   data = self$task$data(),   conditioning_features = NULL,   n_synth = 1,   evidence_row_mode = \"separate\",   ... )"},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARF-based Conditional Sampler — ARFSampler","text":"feature (character) Feature(s) interest sample (can single multiple) data (data.table) Data containing conditioning features. Defaults $task$data(), typically dedicated test set provided. conditioning_features (character(n) | NULL) Features condition (default: features) n_synth (1) Number samples generate (per row evidence, evidence_row_mode = \"separate\"). See arf::forge(). evidence_row_mode (\"separate\") Produce n_synth sample per row evidence. See arf::forge() ... arguments passed arf::forge().","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"ARF-based Conditional Sampler — ARFSampler","text":"Modified copy input data feature(s) sampled conditionally","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"ARF-based Conditional Sampler — ARFSampler","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"ARF-based Conditional Sampler — ARFSampler","text":"","code":"ARFSampler$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARF-based Conditional Sampler — ARFSampler","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARF-based Conditional Sampler — ARFSampler","text":"","code":"library(mlr3) task = tgen(\"2dnormals\")$generate(n = 100) sampler = ARFSampler$new(task) #> Iteration: 0, Accuracy: 47.24% #> Warning: executing %dopar% sequentially: no parallel backend registered data = task$data() sampled_data = sampler$sample(\"x1\", data, conditioning_features = \"x2\")"},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional Feature Importance — CFI","title":"Conditional Feature Importance — CFI","text":"Implementation CFI using modular sampling approach","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Conditional Feature Importance — CFI","text":"xplainfi::FeatureImportanceMeasure -> xplainfi::PerturbationImportance -> CFI","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Conditional Feature Importance — CFI","text":"xplainfi::FeatureImportanceMeasure$combine() xplainfi::FeatureImportanceMeasure$print()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Conditional Feature Importance — CFI","text":"CFI$new() CFI$compute() CFI$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Conditional Feature Importance — CFI","text":"Creates new instance CFI class","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Feature Importance — CFI","text":"","code":"CFI$new(   task,   learner,   measure,   resampling = NULL,   features = NULL,   iters_perm = 1L,   sampler = NULL )"},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Feature Importance — CFI","text":"task, learner, measure, resampling, features Passed PerturbationImportance. iters_perm (integer(1)) Number sampling iterations. sampler (ConditionalSampler) Optional custom sampler. Defaults instantiationg ARFSampler internally default parameters.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"method-compute-","dir":"Reference","previous_headings":"","what":"Method compute()","title":"Conditional Feature Importance — CFI","text":"Compute CFI scores","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Feature Importance — CFI","text":"","code":"CFI$compute(relation = c(\"difference\", \"ratio\"), store_backends = TRUE)"},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Feature Importance — CFI","text":"relation (character(1)) relate perturbed scores originals store_backends (logical(1)) Whether store backends","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Conditional Feature Importance — CFI","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Feature Importance — CFI","text":"","code":"CFI$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Feature Importance — CFI","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditional Feature Importance — CFI","text":"","code":"library(mlr3) task = tgen(\"2dnormals\")$generate(n = 100) cfi = CFI$new(   task = task,   learner = lrn(\"classif.ranger\", num.trees = 50, predict_type = \"prob\"),   measure = msr(\"classif.ce\") ) #> Iteration: 0, Accuracy: 51.01% #> Iteration: 1, Accuracy: 35.68% cfi$compute() #> Key: <feature> #>    feature importance #>     <char>      <num> #> 1:      x1 0.09090909 #> 2:      x2 0.18181818"},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSAGE.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional SAGE — ConditionalSAGE","title":"Conditional SAGE — ConditionalSAGE","text":"SAGE conditional sampling (features marginalized conditionally). Uses ARF default conditional marginalization.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSAGE.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Conditional SAGE — ConditionalSAGE","text":"xplainfi::FeatureImportanceMeasure -> xplainfi::SAGE -> ConditionalSAGE","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSAGE.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Conditional SAGE — ConditionalSAGE","text":"xplainfi::FeatureImportanceMeasure$combine() xplainfi::FeatureImportanceMeasure$print() xplainfi::SAGE$compute()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSAGE.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Conditional SAGE — ConditionalSAGE","text":"ConditionalSAGE$new() ConditionalSAGE$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSAGE.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Conditional SAGE — ConditionalSAGE","text":"Creates new instance ConditionalSAGE class.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSAGE.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional SAGE — ConditionalSAGE","text":"","code":"ConditionalSAGE$new(   task,   learner,   measure,   resampling = NULL,   features = NULL,   n_permutations = 10L,   reference_data = NULL,   sampler = NULL,   max_reference_size = 100L )"},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSAGE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional SAGE — ConditionalSAGE","text":"task, learner, measure, resampling, features Passed SAGE. n_permutations (integer(1)) Number permutations sample. reference_data (data.table) Optional reference dataset. sampler (ConditionalSampler) Optional custom sampler. Defaults ARFSampler. max_reference_size (integer(1)) Maximum size reference dataset.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSAGE.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Conditional SAGE — ConditionalSAGE","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSAGE.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional SAGE — ConditionalSAGE","text":"","code":"ConditionalSAGE$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSAGE.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional SAGE — ConditionalSAGE","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSAGE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditional SAGE — ConditionalSAGE","text":"","code":"library(mlr3) task = tgen(\"friedman1\")$generate(n = 100) sage = ConditionalSAGE$new(   task = task,   learner = lrn(\"regr.ranger\", num.trees = 50),   measure = msr(\"regr.mse\"),   n_permutations = 3L ) #> Iteration: 0, Accuracy: 48.72% sage$compute() #>          feature  importance #>           <char>       <num> #>  1:   important1  2.43859740 #>  2:   important2  3.16250083 #>  3:   important3 -0.23409055 #>  4:   important4  4.07486299 #>  5:   important5  1.06578200 #>  6: unimportant1  0.27184491 #>  7: unimportant2  0.08221231 #>  8: unimportant3 -0.17193736 #>  9: unimportant4 -0.16713389 #> 10: unimportant5  0.13310937"},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional Feature Sampler — ConditionalSampler","title":"Conditional Feature Sampler — ConditionalSampler","text":"Base class conditional sampling methods features sampled conditionally features. abstract class extended concrete implementations.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Conditional Feature Sampler — ConditionalSampler","text":"xplainfi::FeatureSampler -> ConditionalSampler","code":""},{"path":[]},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Conditional Feature Sampler — ConditionalSampler","text":"ConditionalSampler$new() ConditionalSampler$sample() ConditionalSampler$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Conditional Feature Sampler — ConditionalSampler","text":"Creates new instance ConditionalSampler class","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Feature Sampler — ConditionalSampler","text":"","code":"ConditionalSampler$new(task)"},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Feature Sampler — ConditionalSampler","text":"task (mlr3::Task) Task sample ","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":"method-sample-","dir":"Reference","previous_headings":"","what":"Method sample()","title":"Conditional Feature Sampler — ConditionalSampler","text":"Sample values feature(s) conditionally features","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Feature Sampler — ConditionalSampler","text":"","code":"ConditionalSampler$sample(feature, data, conditioning_features = NULL)"},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Feature Sampler — ConditionalSampler","text":"feature (character) Feature name(s) sample (can single multiple) data (data.table ) Data containing conditioning features conditioning_features (character) Features condition (default: features)","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Conditional Feature Sampler — ConditionalSampler","text":"Modified copy input data feature(s) sampled conditionally","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Conditional Feature Sampler — ConditionalSampler","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Feature Sampler — ConditionalSampler","text":"","code":"ConditionalSampler$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Feature Sampler — ConditionalSampler","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMeasure.html","id":null,"dir":"Reference","previous_headings":"","what":"Feature Importance Learner Class — FeatureImportanceMeasure","title":"Feature Importance Learner Class — FeatureImportanceMeasure","text":"Feature Importance Learner Class Feature Importance Learner Class","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMeasure.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Feature Importance Learner Class — FeatureImportanceMeasure","text":"label (character(1)) Method label. task (mlr3::Task) learner (mlr3::Learner) measure (mlr3::Measure) resampling (mlr3::Resampling) resample_result (mlr3::ResampleResult) features (character) param_set (paradox::ps()) importance (data.table) Aggregated importance scores scores (data.table) Individual performance scores used compute $importance per resampling iteration permutation iteration.","code":""},{"path":[]},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMeasure.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Feature Importance Learner Class — FeatureImportanceMeasure","text":"FeatureImportanceMeasure$new() FeatureImportanceMeasure$compute() FeatureImportanceMeasure$combine() FeatureImportanceMeasure$print() FeatureImportanceMeasure$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMeasure.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Feature Importance Learner Class — FeatureImportanceMeasure","text":"Creates new instance R6 class. typically intended use derived classes.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMeasure.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Importance Learner Class — FeatureImportanceMeasure","text":"","code":"FeatureImportanceMeasure$new(   task,   learner,   measure,   resampling = NULL,   features = NULL,   param_set = paradox::ps(),   label )"},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMeasure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Importance Learner Class — FeatureImportanceMeasure","text":"task, learner, measure, resampling, features, param_set, label Used set fields","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMeasure.html","id":"method-compute-","dir":"Reference","previous_headings":"","what":"Method compute()","title":"Feature Importance Learner Class — FeatureImportanceMeasure","text":"Compute feature importance scores","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMeasure.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Importance Learner Class — FeatureImportanceMeasure","text":"","code":"FeatureImportanceMeasure$compute(   relation = c(\"difference\", \"ratio\"),   store_backends = TRUE )"},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMeasure.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Importance Learner Class — FeatureImportanceMeasure","text":"relation (character(1): \"difference\") relate perturbed scores originals (\"difference\" \"ratio\") store_backends (logical(1): TRUE) Whether store backends.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMeasure.html","id":"method-combine-","dir":"Reference","previous_headings":"","what":"Method combine()","title":"Feature Importance Learner Class — FeatureImportanceMeasure","text":"Combine two FeatureImportanceMeasure objects computed scores.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMeasure.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Importance Learner Class — FeatureImportanceMeasure","text":"","code":"FeatureImportanceMeasure$combine(y, ...)"},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMeasure.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Importance Learner Class — FeatureImportanceMeasure","text":"y (FeatureImportanceMeasure) Object combine. Must computed scores. ... () Unused.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMeasure.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Feature Importance Learner Class — FeatureImportanceMeasure","text":"new FeatureImportanceMeasure subclass x y. Currently method merges following: $scores combined, iter_rsmp increased y. $importance re-computed combined $scores. $resample_result combined mlr3::BenchmarkResult $resampling combined mlr3::ResamplingCustom, continuing te iteration count x y.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMeasure.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Feature Importance Learner Class — FeatureImportanceMeasure","text":"Print importance scores","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMeasure.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Importance Learner Class — FeatureImportanceMeasure","text":"","code":"FeatureImportanceMeasure$print(...)"},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMeasure.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Importance Learner Class — FeatureImportanceMeasure","text":"... Passed print()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMeasure.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Feature Importance Learner Class — FeatureImportanceMeasure","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMeasure.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Importance Learner Class — FeatureImportanceMeasure","text":"","code":"FeatureImportanceMeasure$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMeasure.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Importance Learner Class — FeatureImportanceMeasure","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":null,"dir":"Reference","previous_headings":"","what":"Feature Sampler Class — FeatureSampler","title":"Feature Sampler Class — FeatureSampler","text":"Base class implementing different sampling strategies feature importance methods like PFI CFI","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Feature Sampler Class — FeatureSampler","text":"task (mlr3::Task) Original task. label (character(1)) Name sampler.","code":""},{"path":[]},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Feature Sampler Class — FeatureSampler","text":"FeatureSampler$new() FeatureSampler$sample() FeatureSampler$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Feature Sampler Class — FeatureSampler","text":"Creates new instance FeatureSampler class","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Sampler Class — FeatureSampler","text":"","code":"FeatureSampler$new(task)"},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Sampler Class — FeatureSampler","text":"task (mlr3::Task) Task sample ","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"method-sample-","dir":"Reference","previous_headings":"","what":"Method sample()","title":"Feature Sampler Class — FeatureSampler","text":"Sample values feature(s)","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Sampler Class — FeatureSampler","text":"","code":"FeatureSampler$sample(feature, data)"},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Sampler Class — FeatureSampler","text":"feature (character) Feature name(s) sample (can single multiple) data (data.table ) Data use sampling context","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Feature Sampler Class — FeatureSampler","text":"Modified copy input data feature(s) sampled","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Feature Sampler Class — FeatureSampler","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Sampler Class — FeatureSampler","text":"","code":"FeatureSampler$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Sampler Class — FeatureSampler","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":null,"dir":"Reference","previous_headings":"","what":"LOCO Class — LOCO","title":"LOCO Class — LOCO","text":"LOCO Class LOCO Class","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"LOCO Class — LOCO","text":"Calculates Leave-One-Covariate-(LOCO) scores.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"LOCO Class — LOCO","text":"xplainfi::FeatureImportanceMeasure -> LOCO","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"LOCO Class — LOCO","text":"xplainfi::FeatureImportanceMeasure$combine() xplainfi::FeatureImportanceMeasure$print()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"LOCO Class — LOCO","text":"LOCO$new() LOCO$compute() LOCO$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"LOCO Class — LOCO","text":"Creates new instance R6 class.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LOCO Class — LOCO","text":"","code":"LOCO$new(task, learner, measure, resampling = NULL, features = NULL)"},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LOCO Class — LOCO","text":"task, learner, measure, resampling, features Passed FeatureImportanceMeasure construction.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"method-compute-","dir":"Reference","previous_headings":"","what":"Method compute()","title":"LOCO Class — LOCO","text":"short description...","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"LOCO Class — LOCO","text":"","code":"LOCO$compute(relation = c(\"difference\", \"ratio\"), store_backends = TRUE)"},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"LOCO Class — LOCO","text":"relation (character(1)) Calculate \"difference\" (default) \"ratio\" original scores scores permutation store_backends (logical(1): TRUE) Passed mlr3::resample store backends resample result. Required measures, may increase memory footprint.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"LOCO Class — LOCO","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"LOCO Class — LOCO","text":"","code":"LOCO$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"LOCO Class — LOCO","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LOCO Class — LOCO","text":"","code":"library(mlr3)  loco = LOCO$new(   task = tsk(\"zoo\"),   learner = lrn(\"classif.rpart\"),   measure = msr(\"classif.ce\") )  loco$compute() #> Key: <feature> #>      feature importance #>       <char>      <num> #>  1: airborne          0 #>  2:  aquatic          0 #>  3: backbone          0 #>  4: breathes          0 #>  5:  catsize          0 #>  6: domestic          0 #>  7:     eggs          0 #>  8: feathers          0 #>  9:     fins          0 #> 10:     hair          0 #> 11:     legs          0 #> 12:     milk          0 #> 13: predator          0 #> 14:     tail          0 #> 15:  toothed          0 #> 16: venomous          0"},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSAGE.html","id":null,"dir":"Reference","previous_headings":"","what":"Marginal SAGE — MarginalSAGE","title":"Marginal SAGE — MarginalSAGE","text":"SAGE marginal sampling (features marginalized independently). standard SAGE implementation.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSAGE.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Marginal SAGE — MarginalSAGE","text":"xplainfi::FeatureImportanceMeasure -> xplainfi::SAGE -> MarginalSAGE","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSAGE.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Marginal SAGE — MarginalSAGE","text":"xplainfi::FeatureImportanceMeasure$combine() xplainfi::FeatureImportanceMeasure$print() xplainfi::SAGE$compute()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSAGE.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Marginal SAGE — MarginalSAGE","text":"MarginalSAGE$new() MarginalSAGE$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSAGE.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Marginal SAGE — MarginalSAGE","text":"Creates new instance MarginalSAGE class.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSAGE.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Marginal SAGE — MarginalSAGE","text":"","code":"MarginalSAGE$new(   task,   learner,   measure,   resampling = NULL,   features = NULL,   n_permutations = 10L,   reference_data = NULL,   max_reference_size = 100L )"},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSAGE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Marginal SAGE — MarginalSAGE","text":"task, learner, measure, resampling, features Passed SAGE. n_permutations (integer(1)) Number permutations sample. reference_data (data.table) Optional reference dataset. max_reference_size (integer(1)) Maximum size reference dataset.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSAGE.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Marginal SAGE — MarginalSAGE","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSAGE.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Marginal SAGE — MarginalSAGE","text":"","code":"MarginalSAGE$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSAGE.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Marginal SAGE — MarginalSAGE","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSAGE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Marginal SAGE — MarginalSAGE","text":"","code":"library(mlr3) task = tgen(\"friedman1\")$generate(n = 100) sage = MarginalSAGE$new(   task = task,   learner = lrn(\"regr.ranger\", num.trees = 50),   measure = msr(\"regr.mse\"),   n_permutations = 3L ) sage$compute() #>          feature  importance #>           <char>       <num> #>  1:   important1  1.79452402 #>  2:   important2  3.54030320 #>  3:   important3  0.39186484 #>  4:   important4  8.69589434 #>  5:   important5  1.62080650 #>  6: unimportant1  0.26162076 #>  7: unimportant2  0.09186351 #>  8: unimportant3 -0.95707332 #>  9: unimportant4 -0.56104086 #> 10: unimportant5  0.07953587"},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":null,"dir":"Reference","previous_headings":"","what":"Marginal Feature Sampler — MarginalSampler","title":"Marginal Feature Sampler — MarginalSampler","text":"Implements marginal sampling PFI, feature interest sampled independently features","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Marginal Feature Sampler — MarginalSampler","text":"xplainfi::FeatureSampler -> MarginalSampler","code":""},{"path":[]},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Marginal Feature Sampler — MarginalSampler","text":"MarginalSampler$new() MarginalSampler$sample() MarginalSampler$print() MarginalSampler$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Marginal Feature Sampler — MarginalSampler","text":"Creates new instance MarginalSampler class","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Marginal Feature Sampler — MarginalSampler","text":"","code":"MarginalSampler$new(task)"},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Marginal Feature Sampler — MarginalSampler","text":"task (mlr3::Task) Task sample ","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"method-sample-","dir":"Reference","previous_headings":"","what":"Method sample()","title":"Marginal Feature Sampler — MarginalSampler","text":"Sample values feature(s) permutation (marginal distribution)","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Marginal Feature Sampler — MarginalSampler","text":"","code":"MarginalSampler$sample(feature, data)"},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Marginal Feature Sampler — MarginalSampler","text":"feature (character) Feature name(s) sample (can single multiple) data (data.table ) Data permute feature(s) ","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Marginal Feature Sampler — MarginalSampler","text":"Modified copy input data feature(s) permuted","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Marginal Feature Sampler — MarginalSampler","text":"Print sampler","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Marginal Feature Sampler — MarginalSampler","text":"","code":"MarginalSampler$print(...)"},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Marginal Feature Sampler — MarginalSampler","text":"... Passed print()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Marginal Feature Sampler — MarginalSampler","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Marginal Feature Sampler — MarginalSampler","text":"","code":"MarginalSampler$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Marginal Feature Sampler — MarginalSampler","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Marginal Feature Sampler — MarginalSampler","text":"","code":"library(mlr3) task = tgen(\"2dnormals\")$generate(n = 100) sampler = MarginalSampler$new(task) data = task$data() sampled_data = sampler$sample(\"x1\", data)"},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":null,"dir":"Reference","previous_headings":"","what":"Permutation Feature Importance — PFI","title":"Permutation Feature Importance — PFI","text":"Implementation PFI using modular sampling approach","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Permutation Feature Importance — PFI","text":"xplainfi::FeatureImportanceMeasure -> xplainfi::PerturbationImportance -> PFI","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Permutation Feature Importance — PFI","text":"xplainfi::FeatureImportanceMeasure$combine() xplainfi::FeatureImportanceMeasure$print()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Permutation Feature Importance — PFI","text":"PFI$new() PFI$compute() PFI$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Permutation Feature Importance — PFI","text":"Creates new instance PFI class","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permutation Feature Importance — PFI","text":"","code":"PFI$new(   task,   learner,   measure,   resampling = NULL,   features = NULL,   iters_perm = 1L )"},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permutation Feature Importance — PFI","text":"task, learner, measure, resampling, features Passed PerturbationImportance iters_perm (integer(1)) Number permutation iterations","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"method-compute-","dir":"Reference","previous_headings":"","what":"Method compute()","title":"Permutation Feature Importance — PFI","text":"Compute PFI scores","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Permutation Feature Importance — PFI","text":"","code":"PFI$compute(relation = c(\"difference\", \"ratio\"), store_backends = TRUE)"},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permutation Feature Importance — PFI","text":"relation (character(1)) relate perturbed scores originals store_backends (logical(1)) Whether store backends","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Permutation Feature Importance — PFI","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Permutation Feature Importance — PFI","text":"","code":"PFI$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permutation Feature Importance — PFI","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Permutation Feature Importance — PFI","text":"","code":"library(mlr3) task = tgen(\"2dnormals\")$generate(n = 100) pfi = PFI$new(   task = task,   learner = lrn(\"classif.ranger\", num.trees = 50, predict_type = \"prob\"),   measure = msr(\"classif.ce\") ) pfi$compute() #> Key: <feature> #>    feature importance #>     <char>      <num> #> 1:      x1  0.2121212 #> 2:      x2  0.2121212"},{"path":"https://jemus42.github.io/xplainfi/reference/PerturbationImportance.html","id":null,"dir":"Reference","previous_headings":"","what":"Feature Importance Base Class — PerturbationImportance","title":"Feature Importance Base Class — PerturbationImportance","text":"Abstract base class feature importance methods","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PerturbationImportance.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Feature Importance Base Class — PerturbationImportance","text":"xplainfi::FeatureImportanceMeasure -> PerturbationImportance","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PerturbationImportance.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Feature Importance Base Class — PerturbationImportance","text":"sampler (FeatureSampler) Sampler object feature perturbation","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PerturbationImportance.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Feature Importance Base Class — PerturbationImportance","text":"xplainfi::FeatureImportanceMeasure$combine() xplainfi::FeatureImportanceMeasure$compute() xplainfi::FeatureImportanceMeasure$print()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PerturbationImportance.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Feature Importance Base Class — PerturbationImportance","text":"PerturbationImportance$new() PerturbationImportance$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PerturbationImportance.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Feature Importance Base Class — PerturbationImportance","text":"Creates new instance PerturbationImportance class","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PerturbationImportance.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Importance Base Class — PerturbationImportance","text":"","code":"PerturbationImportance$new(   task,   learner,   measure,   resampling = NULL,   features = NULL,   sampler = NULL )"},{"path":"https://jemus42.github.io/xplainfi/reference/PerturbationImportance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Importance Base Class — PerturbationImportance","text":"task, learner, measure, resampling, features Passed FeatureImportanceMeasure sampler (FeatureSampler) Sampler use feature perturbation","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PerturbationImportance.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Feature Importance Base Class — PerturbationImportance","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PerturbationImportance.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Importance Base Class — PerturbationImportance","text":"","code":"PerturbationImportance$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/PerturbationImportance.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Importance Base Class — PerturbationImportance","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":null,"dir":"Reference","previous_headings":"","what":"Relative Feature Importance — RFI","title":"Relative Feature Importance — RFI","text":"Implementation RFI using modular sampling approach","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Relative Feature Importance — RFI","text":"xplainfi::FeatureImportanceMeasure -> xplainfi::PerturbationImportance -> RFI","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Relative Feature Importance — RFI","text":"conditioning_set (character()) Features condition ","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Relative Feature Importance — RFI","text":"xplainfi::FeatureImportanceMeasure$combine() xplainfi::FeatureImportanceMeasure$print()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Relative Feature Importance — RFI","text":"RFI$new() RFI$compute() RFI$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Relative Feature Importance — RFI","text":"Creates new instance RFI class","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relative Feature Importance — RFI","text":"","code":"RFI$new(   task,   learner,   measure,   resampling = NULL,   features = NULL,   conditioning_set = NULL,   iters_perm = 1L,   sampler = NULL )"},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relative Feature Importance — RFI","text":"task, learner, measure, resampling, features Passed PerturbationImportance conditioning_set (character()) Set features condition iters_perm (integer(1)) Number permutation iterations sampler (ConditionalSampler) Optional custom sampler. Defaults ARFSampler","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"method-compute-","dir":"Reference","previous_headings":"","what":"Method compute()","title":"Relative Feature Importance — RFI","text":"Compute RFI scores","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Relative Feature Importance — RFI","text":"","code":"RFI$compute(relation = c(\"difference\", \"ratio\"), store_backends = TRUE)"},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relative Feature Importance — RFI","text":"relation (character(1)) relate perturbed scores originals store_backends (logical(1)) Whether store backends","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Relative Feature Importance — RFI","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Relative Feature Importance — RFI","text":"","code":"RFI$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relative Feature Importance — RFI","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relative Feature Importance — RFI","text":"","code":"library(mlr3) task = tgen(\"friedman1\")$generate(n = 200) rfi = RFI$new(   task = task,   learner = lrn(\"regr.ranger\", num.trees = 50),   measure = msr(\"regr.mse\"),   conditioning_set = c(\"important1\") ) #> Iteration: 0, Accuracy: 41.41% rfi$compute() #> Key: <feature> #>          feature  importance #>           <char>       <num> #>  1:   important1  0.00000000 #>  2:   important2  5.08565610 #>  3:   important3  2.33119005 #>  4:   important4  9.14179674 #>  5:   important5  3.91980231 #>  6: unimportant1  0.29990992 #>  7: unimportant2 -0.26531317 #>  8: unimportant3 -0.09183694 #>  9: unimportant4 -0.71580619 #> 10: unimportant5  0.14433647"},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":null,"dir":"Reference","previous_headings":"","what":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"Base class SAGE (Shapley Additive Global Importance) feature importance based Shapley values marginalization. abstract class - use MarginalSAGE ConditionalSAGE.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"SAGE uses Shapley values fairly distribute total prediction performance among features. Unlike perturbation-based methods, SAGE marginalizes features integrating distribution. approximated averaging predictions reference dataset.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"Covert, ., Lundberg, S. M., & Lee, S. . (2020). Understanding global feature contributions game-theoretic interpretations black-box models. arXiv preprint arXiv:2010.12012.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"xplainfi::FeatureImportanceMeasure -> SAGE","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"n_permutations (integer(1)) Number permutations sample. reference_data (data.table) Reference dataset marginalization. sampler (FeatureSampler) Sampler object marginalization.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"xplainfi::FeatureImportanceMeasure$combine() xplainfi::FeatureImportanceMeasure$print()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"SAGE$new() SAGE$compute() SAGE$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"Creates new instance SAGE class.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"","code":"SAGE$new(   task,   learner,   measure,   resampling = NULL,   features = NULL,   n_permutations = 10L,   reference_data = NULL,   sampler = NULL,   max_reference_size = 100L )"},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"task, learner, measure, resampling, features Passed FeatureImportanceMeasure. n_permutations (integer(1)) Number permutations sample Shapley value estimation. reference_data (data.table) Optional reference dataset. NULL, uses training data. sampler (FeatureSampler) Sampler marginalization. max_reference_size (integer(1)) Maximum size reference dataset. reference larger, subsampled.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"method-compute-","dir":"Reference","previous_headings":"","what":"Method compute()","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"Compute SAGE values.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"","code":"SAGE$compute(store_backends = TRUE)"},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"store_backends (logical(1)) Whether store backends.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"","code":"SAGE$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/c.FeatureImportanceMeasure.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine two FeatureImportanceMeasure objects — c.FeatureImportanceMeasure","title":"Combine two FeatureImportanceMeasure objects — c.FeatureImportanceMeasure","text":"Combine two FeatureImportanceMeasure objects","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/c.FeatureImportanceMeasure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine two FeatureImportanceMeasure objects — c.FeatureImportanceMeasure","text":"","code":"# S3 method for class 'FeatureImportanceMeasure' c(x, y, ...)"},{"path":"https://jemus42.github.io/xplainfi/reference/c.FeatureImportanceMeasure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine two FeatureImportanceMeasure objects — c.FeatureImportanceMeasure","text":"x, y ([FeatureImportanceMeasure]) Objects combine. Must computed scores. ... () Ignored.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/c.FeatureImportanceMeasure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine two FeatureImportanceMeasure objects — c.FeatureImportanceMeasure","text":"New object subclass x y.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/c.FeatureImportanceMeasure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine two FeatureImportanceMeasure objects — c.FeatureImportanceMeasure","text":"","code":"library(mlr3) task = tgen(\"2dnormals\")$generate(n = 100)  pfi1 = PFI$new(   task = task,   learner = lrn(\"classif.ranger\", num.trees = 50, predict_type = \"prob\"),   measure = msr(\"classif.ce\"),   features = \"x1\" ) pfi1$compute() #> Key: <feature> #>    feature importance #>     <char>      <num> #> 1:      x1  0.1515152  pfi2 = PFI$new(   task = task,   learner = lrn(\"classif.ranger\", num.trees = 50, predict_type = \"prob\"),   measure = msr(\"classif.ce\"),   features = \"x2\" ) pfi2$compute() #> Key: <feature> #>    feature importance #>     <char>      <num> #> 1:      x2  0.2121212  combined = c(pfi1, pfi2)"},{"path":"https://jemus42.github.io/xplainfi/reference/compute_loc.html","id":null,"dir":"Reference","previous_headings":"","what":"LOCO and LOCI workhorse — compute_loc","title":"LOCO and LOCI workhorse — compute_loc","text":"Computes either LOCO LOCI depending whether feature interest designated left (LOCO) left (LOCI)","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/compute_loc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LOCO and LOCI workhorse — compute_loc","text":"","code":"compute_loc(learner, task, train_ids, test_ids, features, measure, direction)"},{"path":"https://jemus42.github.io/xplainfi/reference/compute_loc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LOCO and LOCI workhorse — compute_loc","text":"learner (mlr3::Learner) untrained learner use prediction. task (mlr3::Task) task interest. train_ids, test_ids (integer) Row IDs train- test splits. features (character) Feature names interest. measure (mlr3::Measure) measure use scoring. May require observation-wise loss. direction (character(1)) Either \"leave-\" \"leave-\".","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/compute_loc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LOCO and LOCI workhorse — compute_loc","text":"data.table columns feature <measure$id>_post.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/compute_loc.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"LOCO and LOCI workhorse — compute_loc","text":"functions used internal computations likely exported future.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/compute_loc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LOCO and LOCI workhorse — compute_loc","text":"","code":"library(mlr3)  learner = lrn(\"classif.rpart\") task = tsk(\"breast_cancer\") measure = msr(\"classif.ce\") split = partition(task) train_ids = split$train test_ids = split$test # Computing scores for all features features = task$feature_names  # LOCO compute_loc(   learner,   task,   train_ids = split$train,   test_ids = split$test,   features,   measure,   direction = \"leave-out\" ) #>            feature scores_post #>             <char>       <num> #> 1:     bare_nuclei  0.04444444 #> 2:     bl_cromatin  0.04444444 #> 3:      cell_shape  0.05333333 #> 4:       cell_size  0.03555556 #> 5:    cl_thickness  0.04444444 #> 6:    epith_c_size  0.04444444 #> 7:   marg_adhesion  0.04444444 #> 8:         mitoses  0.04444444 #> 9: normal_nucleoli  0.04444444 # LOCI compute_loc(   learner,   task,   train_ids = split$train,   test_ids = split$test,   features,   measure,   direction = \"leave-in\" ) #>            feature scores_post #>             <char>       <num> #> 1:     bare_nuclei  0.08444444 #> 2:     bl_cromatin  0.08444444 #> 3:      cell_shape  0.06222222 #> 4:       cell_size  0.05777778 #> 5:    cl_thickness  0.11555556 #> 6:    epith_c_size  0.08888889 #> 7:   marg_adhesion  0.13333333 #> 8:         mitoses  0.19111111 #> 9: normal_nucleoli  0.07555556"},{"path":"https://jemus42.github.io/xplainfi/reference/compute_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Scoring utility — compute_score","title":"Scoring utility — compute_score","text":"Computes relation score change (e.g. PFI, LOCO, ...) .","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/compute_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scoring utility — compute_score","text":"","code":"compute_score(   scores_pre,   scores_post,   relation = c(\"difference\", \"ratio\"),   minimize = TRUE )"},{"path":"https://jemus42.github.io/xplainfi/reference/compute_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scoring utility — compute_score","text":"scores_pre (numeric) Score change. scores_post (numeric) Score change. relation (character(1): \"difference\") Either \"difference\" \"ratio\". \"difference\", scores_post - scores_pre computed, otherwise scores_post / scores_pre. minimize (logical(1), TRUE) Whether score needs minimized (e.g. RMSE) maximized (e.g. AUC).","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/compute_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scoring utility — compute_score","text":"numeric vector length scores_pre scores_post","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/compute_score.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scoring utility — compute_score","text":"minimize == TRUE, scores_post - scores_pre computed relation == \"difference\", otherwise scores_pre - scores_post given. minimize == FALSE, scores_pre - scores_post computed.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/compute_score.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scoring utility — compute_score","text":"","code":"pre = rnorm(10) post = pre + runif(10)  compute_score(pre, post) #>  [1] 0.04197459 0.41801594 0.59457516 0.74091959 0.35009751 0.20340441 #>  [7] 0.88358508 0.66043500 0.93625522 0.03909996 compute_score(pre, post, \"ratio\") #>  [1] 0.9396254 1.6895559 1.8068141 1.8809670 1.2722890 1.2713618 0.3410087 #>  [8] 1.2867806 1.3984806 1.0291271 compute_score(pre, post, minimize = FALSE) #>  [1] -0.04197459 -0.41801594 -0.59457516 -0.74091959 -0.35009751 -0.20340441 #>  [7] -0.88358508 -0.66043500 -0.93625522 -0.03909996"},{"path":"https://jemus42.github.io/xplainfi/reference/op-null-default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default value for NULL — op-null-default","title":"Default value for NULL — op-null-default","text":"backport %||% available R versions 4.4.0.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/op-null-default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default value for NULL — op-null-default","text":"","code":"x %||% y"},{"path":"https://jemus42.github.io/xplainfi/reference/op-null-default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default value for NULL — op-null-default","text":"x, y x NULL length 0, return y; otherwise returns x.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/op-null-default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default value for NULL — op-null-default","text":"","code":"1 %||% 2 #> [1] 1 NULL %||% 2 #> [1] 2"},{"path":"https://jemus42.github.io/xplainfi/reference/xplainfi-package.html","id":null,"dir":"Reference","previous_headings":"","what":"xplainfi: Feature Importance Methods for Model Interpretability — xplainfi-package","title":"xplainfi: Feature Importance Methods for Model Interpretability — xplainfi-package","text":"Provides consistent interface common feature importance methods, permutation feature importance, 'LOCO', 'SAGE'.","code":""},{"path":[]},{"path":"https://jemus42.github.io/xplainfi/reference/xplainfi-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"xplainfi: Feature Importance Methods for Model Interpretability — xplainfi-package","text":"Maintainer: Lukas Burk github@quantenbrot.de (ORCID)","code":""},{"path":"https://jemus42.github.io/xplainfi/news/index.html","id":"xplainfi-0009000-development-version","dir":"Changelog","previous_headings":"","what":"xplainfi 0.0.0.9000 (development version)","title":"xplainfi 0.0.0.9000 (development version)","text":"Initial design phase.","code":""}]
