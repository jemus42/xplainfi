[{"path":"https://jemus42.github.io/xplainfi/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 xplainfi authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/fippy-comparison.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Comparison with fippy (Python Implementation)","text":"article compares xplainfi’s feature importance implementations fippy, Python package implementing similar methods. comparison serves regression test ensure methodological consistency across language implementations. comparison includes: PFI (Permutation Feature Importance) CFI (Conditional Feature Importance) RFI (Relative Feature Importance) SAGE (Shapley Additive Global Importance) - marginal conditional variants","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/fippy-comparison.html","id":"methodology","dir":"Articles","previous_headings":"","what":"Methodology","title":"Comparison with fippy (Python Implementation)","text":"implementations use: Dataset: Ewald et al. simulation 500 observations (sim_dgp_ewald()) - synthetic regression task known feature importance structure Model: Random Forest 100 trees Evaluation: train/test data Metrics: Mean Squared Error importance calculations Ewald simulation provides interpretable test case can better understand expected feature importance patterns, particularly conditional methods account feature dependencies. Due difference underlying conditional samplers (ARF xplainfi vs Gaussian samplers fippy) expect conditional methods show variation marginal ones.","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/fippy-comparison.html","id":"setup-and-execution","dir":"Articles","previous_headings":"","what":"Setup and Execution","title":"Comparison with fippy (Python Implementation)","text":"comparison uses separate calculation scripts: scripts generate JSON files results loaded comparison.","code":"# 1. Calculate xplainfi results cd vignettes/articles/fippy-comparison Rscript calculate_xplainfi.R  # 2. Calculate fippy results (portable with uv - automatically installs dependencies) ./calculate_fippy.py"},{"path":"https://jemus42.github.io/xplainfi/articles/fippy-comparison.html","id":"expected-feature-importance-patterns","dir":"Articles","previous_headings":"Setup and Execution","what":"Expected Feature Importance Patterns","title":"Comparison with fippy (Python Implementation)","text":"Ewald simulation (sim_dgp_ewald) generates regression task 5 features (x1-x5) : features contribute target variable, different weights features may correlated, making conditional methods particularly interesting known data generating process allows us validate whether methods identify sensible patterns provides better foundation understanding method differences compared complex synthetic tasks.","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/fippy-comparison.html","id":"load-results","dir":"Articles","previous_headings":"","what":"Load Results","title":"Comparison with fippy (Python Implementation)","text":"","code":"# Check that both result files exist # Look in the fippy-comparison subdirectory base_dir <- here::here(\"vignettes\", \"articles\", \"fippy-comparison\") xplainfi_results_path <- file.path(base_dir, \"xplainfi_results.json\") fippy_results_path <- file.path(base_dir, \"fippy_results.json\")  if (!file.exists(xplainfi_results_path)) {   stop(\"xplainfi_results.json not found. Please run calculate_xplainfi.R first.\") }  if (!file.exists(fippy_results_path)) {   stop(\"fippy_results.json not found. Please run calculate_fippy.py first.\") }  # Load results from both implementations xplainfi_results <- fromJSON(xplainfi_results_path) fippy_results <- fromJSON(fippy_results_path)"},{"path":"https://jemus42.github.io/xplainfi/articles/fippy-comparison.html","id":"model-performance-comparison","dir":"Articles","previous_headings":"","what":"Model Performance Comparison","title":"Comparison with fippy (Python Implementation)","text":"Model Performance Comparison","code":"performance_comparison <- data.table(   Implementation = c(\"xplainfi (R)\", \"fippy (Python)\"),   R_squared = c(     round(xplainfi_results$model_performance$r_squared, 4),     round(fippy_results$model_performance$r_squared, 4)   ) )  kable(performance_comparison, caption = \"Model Performance Comparison\")"},{"path":"https://jemus42.github.io/xplainfi/articles/fippy-comparison.html","id":"method-comparisons","dir":"Articles","previous_headings":"","what":"Method Comparisons","title":"Comparison with fippy (Python Implementation)","text":"","code":"compare_method <- function(method_name, xplainfi_result, fippy_result) {   # Both implementations available   method_dt <- data.table(     feature = xplainfi_result$feature,     xplainfi = xplainfi_result$importance,     fippy = fippy_result$importance   )      # Return table and correlation for display   correlation <- cor(method_dt$xplainfi, method_dt$fippy)   correlation_spearman = cor(method_dt$xplainfi, method_dt$fippy, method = \"spearman\")      list(     method = method_name,      table = kable(method_dt[order(-xplainfi)],                    caption = glue(\"{method_name} Results Comparison\"),                    digits = 4),     correlation = correlation,     correlation_spearman = correlation_spearman   ) }"},{"path":"https://jemus42.github.io/xplainfi/articles/fippy-comparison.html","id":"pfi-permutation-feature-importance","dir":"Articles","previous_headings":"Method Comparisons","what":"PFI (Permutation Feature Importance)","title":"Comparison with fippy (Python Implementation)","text":"PFI Results Comparison","code":"pfi_result <- compare_method(\"PFI\", xplainfi_results$PFI, fippy_results$PFI) pfi_result$table glue(\"PFI Correlation: {round(pfi_result$correlation, 3)}\") ## PFI Correlation: 0.973 pfi_result$correlation ## [1] 0.9732897 pfi_result$correlation_spearman ## [1] 0.8207827"},{"path":"https://jemus42.github.io/xplainfi/articles/fippy-comparison.html","id":"cfi-conditional-feature-importance","dir":"Articles","previous_headings":"Method Comparisons","what":"CFI (Conditional Feature Importance)","title":"Comparison with fippy (Python Implementation)","text":"CFI Results Comparison","code":"cfi_result <- compare_method(\"CFI\", xplainfi_results$CFI, fippy_results$CFI) cfi_result$table glue(\"CFI Correlation: {round(cfi_result$correlation, 3)}\") ## CFI Correlation: 0.996 cfi_result$correlation ## [1] 0.9957074 cfi_result$correlation_spearman ## [1] 0.6668859"},{"path":"https://jemus42.github.io/xplainfi/articles/fippy-comparison.html","id":"rfi-relative-feature-importance","dir":"Articles","previous_headings":"Method Comparisons","what":"RFI (Relative Feature Importance)","title":"Comparison with fippy (Python Implementation)","text":"RFI Results Comparison","code":"rfi_result <- compare_method(\"RFI\", xplainfi_results$RFI, fippy_results$RFI) rfi_result$table glue(\"RFI Correlation: {round(rfi_result$correlation, 3)}\") ## RFI Correlation: 0.995 rfi_result$correlation ## [1] 0.9949436 rfi_result$correlation_spearman ## [1] 0.9746794 glue(\"xplainfi conditioning set: {paste(xplainfi_results$RFI$conditioning_set, collapse = ', ')}\") ## xplainfi conditioning set: x1, x2 glue(\"fippy conditioning set: {paste(fippy_results$RFI$conditioning_set, collapse = ', ')}\") ## fippy conditioning set: x1, x2"},{"path":[]},{"path":"https://jemus42.github.io/xplainfi/articles/fippy-comparison.html","id":"marginal-sage","dir":"Articles","previous_headings":"Method Comparisons > SAGE Methods","what":"Marginal SAGE","title":"Comparison with fippy (Python Implementation)","text":"Marginal SAGE Results Comparison","code":"sage_marginal_result <- compare_method(\"Marginal SAGE\", xplainfi_results$SAGE_Marginal, fippy_results$SAGE_Marginal) sage_marginal_result$table glue(\"Marginal SAGE Correlation: {round(sage_marginal_result$correlation, 3)}\") ## Marginal SAGE Correlation: 0.968 sage_marginal_result$correlation ## [1] 0.9677024 sage_marginal_result$correlation_spearman ## [1] 1"},{"path":"https://jemus42.github.io/xplainfi/articles/fippy-comparison.html","id":"conditional-sage","dir":"Articles","previous_headings":"Method Comparisons > SAGE Methods","what":"Conditional SAGE","title":"Comparison with fippy (Python Implementation)","text":"Conditional SAGE Results Comparison","code":"sage_conditional_result <- compare_method(\"Conditional SAGE\", xplainfi_results$SAGE_Conditional, fippy_results$SAGE_Conditional) sage_conditional_result$table glue(\"Conditional SAGE Correlation: {round(sage_conditional_result$correlation, 3)}\") ## Conditional SAGE Correlation: 0.899 sage_conditional_result$correlation ## [1] 0.8994105 sage_conditional_result$correlation_spearman ## [1] 0.9"},{"path":"https://jemus42.github.io/xplainfi/articles/fippy-comparison.html","id":"correlation-summary","dir":"Articles","previous_headings":"","what":"Correlation Summary","title":"Comparison with fippy (Python Implementation)","text":"Pearson Spearman Correlations xplainfi fippy","code":"correlations <- rbindlist(list(   pfi_result[c(\"method\", \"correlation\", \"correlation_spearman\")],   cfi_result[c(\"method\", \"correlation\", \"correlation_spearman\")],   rfi_result[c(\"method\", \"correlation\", \"correlation_spearman\")],   sage_marginal_result[c(\"method\", \"correlation\", \"correlation_spearman\")],   sage_conditional_result[c(\"method\", \"correlation\", \"correlation_spearman\")] ))  kable(   correlations,    caption = \"Pearson and Spearman Correlations between xplainfi and fippy\",    col.names = c(\"Method\", \"Pearson Corr.\", \"Spearman Corr.\") ) melt(correlations, id.vars = \"method\") |>   ggplot(aes(x = reorder(method, value), y = value)) +     facet_wrap(vars(variable), ncol = 1, labeller = as_labeller(c(correlation = \"Pearson's\", correlation_spearman = \"Spearman's\"))) +     geom_col(fill = \"steelblue\", alpha = 0.7) +     geom_hline(yintercept = c(0.5, 1), linetype = \"dashed\", color = \"red\", alpha = 0.7) +     coord_flip() +     labs(       title = \"Implementation Correlations\",       subtitle = \"xplainfi (R) vs fippy (Python)\",       x = \"Method\",       y = \"Correlation\"     ) +     theme_minimal(base_size = 14) +     theme(       plot.title.position = \"plot\"     )"},{"path":"https://jemus42.github.io/xplainfi/articles/fippy-comparison.html","id":"interpretation-in-context-of-ewald-simulation","dir":"Articles","previous_headings":"","what":"Interpretation in Context of Ewald Simulation","title":"Comparison with fippy (Python Implementation)","text":"Ewald simulation provides interpretable feature importance patterns help validate implementations:","code":"# Extract feature importance rankings from each method create_ranking_summary <- function(results, method_name) {   if (is.null(results[[method_name]])) return(NULL)      data.table(     method = method_name,     feature = results[[method_name]]$feature,     importance = results[[method_name]]$importance,     rank = rank(-results[[method_name]]$importance)   ) }  # Combine rankings from both implementations xplainfi_rankings <- rbindlist(lapply(   c(\"PFI\", \"CFI\", \"RFI\", \"SAGE_Marginal\", \"SAGE_Conditional\"),   function(m) create_ranking_summary(xplainfi_results, m) )) xplainfi_rankings[, implementation := \"xplainfi\"]  fippy_rankings <- rbindlist(lapply(   c(\"PFI\", \"CFI\", \"RFI\", \"SAGE_Marginal\", \"SAGE_Conditional\"),   function(m) create_ranking_summary(fippy_results, m) )) fippy_rankings[, implementation := \"fippy\"]  all_rankings <- rbind(xplainfi_rankings, fippy_rankings)  # Create ranking comparison plot ggplot(all_rankings, aes(x = feature, y = rank, fill = implementation)) +   geom_col(position = \"dodge\", alpha = 0.7) +   facet_wrap(~method, scales = \"free_y\") +   scale_y_reverse(name = \"Rank (1 = highest importance)\") +   scale_fill_manual(values = c(\"xplainfi\" = \"steelblue\", \"fippy\" = \"orange\")) +   labs(     title = \"Feature Importance Rankings Comparison\",     subtitle = \"Ewald Simulation: Lower rank = higher importance\",     x = \"Feature\",     fill = \"Implementation\"   ) +   theme_minimal() +   theme(     axis.text.x = element_text(angle = 45, hjust = 1),     plot.title = element_text(hjust = 0.5),     plot.subtitle = element_text(hjust = 0.5)   )"},{"path":"https://jemus42.github.io/xplainfi/articles/fippy-comparison.html","id":"method-specific-insights","dir":"Articles","previous_headings":"Interpretation in Context of Ewald Simulation","what":"Method-Specific Insights","title":"Comparison with fippy (Python Implementation)","text":"Marginal vs Conditional Methods: - PFI Marginal SAGE ignore feature correlations - CFI, RFI, Conditional SAGE account feature dependencies - Differences marginal conditional variants reveal impact feature correlations RFI Conditioning: implementations use {x1, x2} conditioning set, allowing us see features’ importance changes conditioned two features. Cross-Implementation Consistency: High correlations indicate xplainfi fippy identify similar underlying feature importance patterns despite using different: - Programming languages (R vs Python) - Conditional sampling approaches (ARF vs Gaussian) - Implementation details cross-validation strengthens confidence implementations demonstrates robustness feature importance methods across different computational environments. ```","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/loco-loci.html","id":"leave-one-covariate-out-loco","dir":"Articles","previous_headings":"","what":"Leave-One-Covariate-Out (LOCO)","title":"LOCO and LOCI","text":"LOCO measures feature importance comparing model performance without feature. feature, learner retrained without feature performance difference indicates feature’s importance. feature \\(j\\), LOCO calculated difference expected loss model fit without feature full model: \\[\\text{LOCO}_j = \\mathbb{E}(L(Y, f_{-j}(X_{-j}))) - \\mathbb{E}(L(Y, f(X)))\\] Higher values indicate important features (larger performance drop removed).","code":"task <- tgen(\"friedman1\")$generate(n = 200) learner <- lrn(\"regr.lm\") measure <- msr(\"regr.mse\")  loco <- LOCO$new(   task = task,   learner = learner,   measure = measure )  loco$compute() #> Key: <feature> #>          feature   importance #>           <char>        <num> #>  1:   important1  1.907472683 #>  2:   important2  4.344817068 #>  3:   important3 -0.038993051 #>  4:   important4  9.868411131 #>  5:   important5  2.159374339 #>  6: unimportant1  0.050115133 #>  7: unimportant2 -0.019501906 #>  8: unimportant3  0.106014948 #>  9: unimportant4  0.005096387 #> 10: unimportant5  0.024761713"},{"path":"https://jemus42.github.io/xplainfi/articles/loco-loci.html","id":"leave-one-covariate-in-loci","dir":"Articles","previous_headings":"","what":"Leave-One-Covariate-In (LOCI)","title":"LOCO and LOCI","text":"LOCI measures feature importance training models individual feature comparing performance featureless (baseline) model. shows much predictive power feature provides , beyond optimal constant prediction. feature \\(j\\), LOCI calculated difference expected loss featureless learner constant model model including feature: \\[\\text{LOCI}_j = \\mathbb{E}(L(Y, f_{\\emptyset})) - \\mathbb{E}(L(Y, f_j(X_{j})))\\] Higher values indicate important features (better individual performance compared baseline).","code":"loci <- LOCI$new(   task = task,   learner = learner,   measure = measure )  loci$compute() #> Key: <feature> #>          feature  importance #>           <char>       <num> #>  1:   important1  0.24301370 #>  2:   important2  2.00562769 #>  3:   important3 -0.24969927 #>  4:   important4  5.15158778 #>  5:   important5  1.94506889 #>  6: unimportant1 -0.02398509 #>  7: unimportant2  0.08193745 #>  8: unimportant3  0.37764092 #>  9: unimportant4  0.24828048 #> 10: unimportant5  0.16518286"},{"path":"https://jemus42.github.io/xplainfi/articles/loco-loci.html","id":"multiple-refits","dir":"Articles","previous_headings":"","what":"Multiple Refits","title":"LOCO and LOCI","text":"Like PFI iters_perm multiple permutation iterations, LOCO LOCI support iters_refit multiple refit iterations per resampling iteration: LOCO scores per refit resampling fold","code":"loco_multi = LOCO$new(   task = task,   learner = learner,   measure = measure,   resampling = rsmp(\"cv\", folds = 3),   iters_refit = 3L )  loco_multi$compute() #> Key: <feature> #>          feature  importance         sd #>           <char>       <num>      <num> #>  1:   important1  2.63847146 0.39257971 #>  2:   important2  6.32614881 1.47504818 #>  3:   important3 -0.02421940 0.01792924 #>  4:   important4  8.23092916 1.34622213 #>  5:   important5  1.87820513 0.60919188 #>  6: unimportant1  0.04498329 0.13238800 #>  7: unimportant2 -0.08772072 0.10411558 #>  8: unimportant3  0.04221687 0.06461107 #>  9: unimportant4 -0.26932117 0.09922318 #> 10: unimportant5 -0.07450104 0.07841415  # Check individual scores with multiple refits loco_multi$scores[1:10, ] |>   knitr::kable(digits = 4, caption = \"LOCO scores per refit and resampling fold\")"},{"path":"https://jemus42.github.io/xplainfi/articles/loco-loci.html","id":"comparing-loco-and-loci","dir":"Articles","previous_headings":"","what":"Comparing LOCO and LOCI","title":"LOCO and LOCI","text":"LOCO vs LOCI importance scores Interpreting results: LOCO: Higher values indicate important features (larger performance drop removed) Positive values: feature performs better featureless baseline Negative values: feature performs worse featureless baseline","code":"# Combine results for comparison importance_combined <- rbind(   loco$importance[, method := \"LOCO\"],   loci$importance[, method := \"LOCI\"] )  importance_combined <- importance_combined |>   dcast(feature ~ method, value.var = \"importance\")  importance_combined |>   knitr::kable(digits = 4, caption = \"LOCO vs LOCI importance scores\") importance_combined |>   data.table::melt(     id.vars = \"feature\",     value.name = \"score\",     variable.name = \"method\"   ) |>   ggplot(aes(x = score, y = reorder(feature, score), color = method, fill = method)) +   facet_wrap(vars(method), ncol = 1, scales = \"free\") +   geom_col(position = \"dodge\", alpha = 0.7) +   scale_color_brewer(palette = \"Set1\", aesthetics = c(\"color\", \"fill\")) +   labs(     title = \"LOCO vs LOCI Feature Importance\",     x = \"Importance Score\",     y = \"Feature\",     color = \"Method\",     fill = \"Method\"   ) +   theme_minimal(base_size = 14) +   theme(     legend.position = \"bottom\",     plot.title.position = \"plot\"   )"},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"problem-setup-friedman1-task","dir":"Articles","previous_headings":"","what":"Problem Setup: Friedman1 Task","title":"Perturbation-based Feature Importance Methods","text":"’ll use Friedman1 task generator provides ideal setup demonstrating feature importance methods. synthetic regression task known ground truth: 5 important features (important1 important5) actually affect target 5 unimportant features (unimportant1 unimportant5) pure noise target function : \\(y = 10 * \\operatorname{sin}(\\pi * x_1 * x_2) + 20 * (x_3 - 0.5)^2 + 10 * x_4 + 5 * x_5 + \\epsilon\\) makes easy evaluate whether importance methods correctly identify truly important features. task 400 observations 10 features: important1, important2, important3, important4, important5, unimportant1, unimportant2, unimportant3, unimportant4, unimportant5. target variable y.","code":"# Generate the task task <- tgen(\"friedman1\")$generate(n = 400) learner <- lrn(\"regr.ranger\", num.trees = 100) resampling <- rsmp(\"cv\", folds = 3) measure <- msr(\"regr.mse\")"},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"permutation-feature-importance-pfi","dir":"Articles","previous_headings":"","what":"Permutation Feature Importance (PFI)","title":"Perturbation-based Feature Importance Methods","text":"PFI shuffles feature independently, breaking association feature target preserving marginal distribution. stable results, use: 3-fold CV reliable performance estimates Within resampling iteration, repeat permutation-prediction-scoring step iters_perm times Sample PFI detailed scores","code":"pfi <- PFI$new(   task = task,   learner = learner,   measure = measure,   resampling = resampling,   iters_perm = 5 )  # Compute importance scores pfi_results <- pfi$compute(relation = \"difference\") pfi_results #> Key: <feature> #>          feature  importance         sd #>           <char>       <num>      <num> #>  1:   important1  5.86554439 0.59082615 #>  2:   important2  7.53042540 1.18889134 #>  3:   important3  0.62852245 0.19171506 #>  4:   important4 12.07781769 2.05173137 #>  5:   important5  1.42191247 0.58343346 #>  6: unimportant1  0.03241761 0.07411001 #>  7: unimportant2  0.06147252 0.08463275 #>  8: unimportant3 -0.04262232 0.07889375 #>  9: unimportant4  0.07622793 0.07243864 #> 10: unimportant5 -0.01541102 0.08219456  # Also stored in pfi$importance #> Key: <feature> #>          feature  importance         sd #>           <char>       <num>      <num> #>  1:   important1  5.86554439 0.59082615 #>  2:   important2  7.53042540 1.18889134 #>  3:   important3  0.62852245 0.19171506 #>  4:   important4 12.07781769 2.05173137 #>  5:   important5  1.42191247 0.58343346 #>  6: unimportant1  0.03241761 0.07411001 #>  7: unimportant2  0.06147252 0.08463275 #>  8: unimportant3 -0.04262232 0.07889375 #>  9: unimportant4  0.07622793 0.07243864 #> 10: unimportant5 -0.01541102 0.08219456  # Show a sample of detailed scores head(pfi$scores, 10) |>   knitr::kable(digits = 4, caption = \"Sample of PFI detailed scores\")"},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"conditional-feature-importance-cfi","dir":"Articles","previous_headings":"","what":"Conditional Feature Importance (CFI)","title":"Perturbation-based Feature Importance Methods","text":"CFI uses conditional sampling preserve joint distribution features perturbing feature interest. default use Adversarial Random Forests (ARF) conditional sampler internally. Original important1 values: 0.246, 0.786, 0.492, 0.668, 0.521 Sampled important1 values (conditioned important2): -0.152, 0.829, 0.16, 0.756, 0.74","code":"sampler = ARFSampler$new(   task = task,    arf_args = list(verbose = FALSE),   forde_args = list() )  # Example sampling for 5 randomly chosen rows from the task sample_data <- task$data(rows = sample(task$nrow, size = 5)) sampled_result <- sampler$sample(   feature = \"important1\",    data = sample_data,    conditioning_set = \"important2\" ) cfi <- CFI$new(   task = task,   learner = learner,   measure = measure,   resampling = resampling,   iters_perm = 5,   sampler = sampler )  # Compute importance scores cfi_results <- cfi$compute(relation = \"difference\") cfi_results #> Key: <feature> #>          feature   importance         sd #>           <char>        <num>      <num> #>  1:   important1  3.174003832 0.71919051 #>  2:   important2  3.435560781 0.63674319 #>  3:   important3  0.487036933 0.20581981 #>  4:   important4  4.345208881 0.73990098 #>  5:   important5  0.551741678 0.27226931 #>  6: unimportant1  0.040457097 0.05467298 #>  7: unimportant2  0.055751318 0.08539057 #>  8: unimportant3 -0.036216862 0.05459353 #>  9: unimportant4  0.051101874 0.05396739 #> 10: unimportant5 -0.008660248 0.07443565"},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"relative-feature-importance-rfi","dir":"Articles","previous_headings":"","what":"Relative Feature Importance (RFI)","title":"Perturbation-based Feature Importance Methods","text":"RFI conditions specific subset features, measuring importance relative features. Let’s condition two important features see others rank relative baseline.","code":"conditioning_set <- c(\"important1\", \"important2\")  rfi <- RFI$new(   task = task,   learner = learner,   measure = measure,   resampling = resampling,   conditioning_set = conditioning_set,   iters_perm = 5,   sampler = sampler )  # Compute importance scores rfi_results <- rfi$compute(relation = \"difference\") rfi_results #> Key: <feature> #>          feature   importance         sd #>           <char>        <num>      <num> #>  1:   important1  0.000000000 0.00000000 #>  2:   important2  0.000000000 0.00000000 #>  3:   important3  0.659032969 0.16358207 #>  4:   important4 11.168278482 1.03079984 #>  5:   important5  1.391927039 0.30919359 #>  6: unimportant1  0.035829586 0.09673696 #>  7: unimportant2  0.111951122 0.11040894 #>  8: unimportant3 -0.003414726 0.11705205 #>  9: unimportant4  0.063271393 0.07071163 #> 10: unimportant5  0.022609332 0.06713596"},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"comparing-methods","dir":"Articles","previous_headings":"","what":"Comparing Methods","title":"Perturbation-based Feature Importance Methods","text":"Now let’s compare results three methods: Feature Importance Comparison (Difference Scores)","code":"# Combine results for comparison comparison <- merge(   pfi_results[, .(feature, pfi = importance)],   cfi_results[, .(feature, cfi = importance)],   by = \"feature\" ) comparison <- merge(   comparison,   rfi_results[, .(feature, rfi = importance)],   by = \"feature\" )  # Add feature type for analysis comparison[, feature_type := ifelse(grepl(\"^important\", feature), \"Important\", \"Noise\")]  comparison |>   knitr::kable(     digits = 4,      caption = \"Feature Importance Comparison (Difference Scores)\",     col.names = c(\"Feature\", \"PFI\", \"CFI\", \"RFI\", \"Type\")   )"},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"Perturbation-based Feature Importance Methods","text":"Let’s create comprehensive visualizations understand results:  Let’s also create correlation plot see similar methods :","code":"# Reshape data for plotting plot_data <- comparison |>   melt(     id.vars = c(\"feature\", \"feature_type\"),     measure.vars = c(\"pfi\", \"cfi\", \"rfi\"),     value.name = \"importance\",     variable.name = \"method\"   )  # Clean up method names plot_data[, method := toupper(method)]  # Create the comparison plot ggplot(plot_data, aes(x = importance, y = reorder(feature, importance), fill = method)) +   facet_wrap(~ feature_type, scales = \"free_y\", ncol = 1) +   geom_col(position = \"dodge\", alpha = 0.8) +   scale_fill_manual(values = c(\"PFI\" = \"steelblue\", \"CFI\" = \"darkgreen\", \"RFI\" = \"orange\")) +   labs(     title = \"Feature Importance Comparison: PFI vs CFI vs RFI\",     subtitle = glue::glue(\"Friedman1 task: 5 important + 5 noise features                           RFI conditioned on: {paste(conditioning_set, collapse = ', ')}\"),     x = \"Importance Score (Difference)\",     y = \"Feature\",     fill = \"Method\",     caption = glue::glue(\"Using {resampling$iters}-fold cross-validation                           and 5 permutation iterations\")   ) +   theme_minimal(base_size = 14) +   theme(     legend.position = \"bottom\",     plot.title.position = \"plot\"   ) # Calculate correlations between methods pfi_cfi_cor <- cor(comparison$pfi, comparison$cfi) pfi_rfi_cor <- cor(comparison$pfi, comparison$rfi) cfi_rfi_cor <- cor(comparison$cfi, comparison$rfi)  # Create correlation matrix plot cor_data <- comparison[, .(feature, pfi, cfi, rfi, feature_type)]  # PFI vs CFI p1 <- ggplot(cor_data, aes(x = pfi, y = cfi, color = feature_type)) +   geom_point(size = 3, alpha = 0.8) +   geom_smooth(method = \"lm\", formula = y ~ x, se = FALSE, color = \"gray50\", linetype = \"dashed\") +   scale_color_manual(values = c(\"Important\" = \"steelblue\", \"Noise\" = \"lightcoral\")) +   labs(     title = \"PFI vs CFI\",     subtitle = sprintf(\"Correlation: %.3f\", pfi_cfi_cor),     x = \"PFI Score\", y = \"CFI Score\"   ) +   theme_minimal(base_size = 14) +   theme(legend.position = \"none\")  # PFI vs RFI   p2 <- ggplot(cor_data, aes(x = pfi, y = rfi, color = feature_type)) +   geom_point(size = 3, alpha = 0.8) +   geom_smooth(method = \"lm\", formula = y ~ x, se = FALSE, color = \"gray50\", linetype = \"dashed\") +   scale_color_manual(values = c(\"Important\" = \"steelblue\", \"Noise\" = \"lightcoral\")) +   labs(     title = \"PFI vs RFI\",     subtitle = sprintf(\"Correlation: %.3f\", pfi_rfi_cor),     x = \"PFI Score\", y = \"RFI Score\"   ) +   theme_minimal(base_size = 14) +   theme(legend.position = \"none\")  # CFI vs RFI p3 <- ggplot(cor_data, aes(x = cfi, y = rfi, color = feature_type)) +   geom_point(size = 3, alpha = 0.8) +   geom_smooth(method = \"lm\", formula = y ~ x, se = FALSE, color = \"gray50\", linetype = \"dashed\") +   scale_color_manual(     values = c(\"Important\" = \"steelblue\", \"Noise\" = \"lightcoral\"),     name = \"Feature Type\"   ) +   labs(     title = \"CFI vs RFI\",      subtitle = sprintf(\"Correlation: %.3f\", cfi_rfi_cor),     x = \"CFI Score\", y = \"RFI Score\"   ) +   theme_minimal(base_size = 14)  # Combine plots (p1 / p2 / p3) +    plot_annotation(     title = \"Method Correlations\",     subtitle = \"Each point represents one feature\"   ) +   theme(legend.position = \"bottom\")"},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"understanding-the-results","dir":"Articles","previous_headings":"","what":"Understanding the Results","title":"Perturbation-based Feature Importance Methods","text":"Let’s analyze well method distinguishes important noise features: Summary feature type","code":"# Calculate summary statistics by feature type summary_stats <- comparison[, .(   mean_importance = mean(c(pfi, cfi, rfi)),   pfi_mean = mean(pfi),   cfi_mean = mean(cfi),    rfi_mean = mean(rfi),   n_features = .N ), by = feature_type]  summary_stats |> knitr::kable(digits = 4, caption = \"Summary by feature type\") # Calculate separation ratios (how well each method separates signal from noise) important_pfi <- comparison[feature_type == \"Important\", mean(pfi)] noise_pfi <- comparison[feature_type == \"Noise\", mean(abs(pfi))] pfi_separation <- important_pfi / noise_pfi  important_cfi <- comparison[feature_type == \"Important\", mean(cfi)] noise_cfi <- comparison[feature_type == \"Noise\", mean(abs(cfi))] cfi_separation <- important_cfi / noise_cfi  important_rfi <- comparison[feature_type == \"Important\", mean(rfi)] noise_rfi <- comparison[feature_type == \"Noise\", mean(abs(rfi))] rfi_separation <- important_rfi / noise_rfi  # Store results for inline reporting pfi_sep <- round(pfi_separation, 2) cfi_sep <- round(cfi_separation, 2)  rfi_sep <- round(rfi_separation, 2) pfi_cfi <- round(pfi_cfi_cor, 3) pfi_rfi <- round(pfi_rfi_cor, 3) cfi_rfi <- round(cfi_rfi_cor, 3)"},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"method-performance","dir":"Articles","previous_headings":"Understanding the Results","what":"Method Performance","title":"Perturbation-based Feature Importance Methods","text":"Separation ratios (well method distinguishes important noise features): - PFI: 120.64 - CFI: 62.41 - RFI: 55.76 Correlations methods: - PFI vs CFI: 0.98 - PFI vs RFI: 0.751 - CFI vs RFI: 0.619","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"understanding-the-differences","dir":"Articles","previous_headings":"","what":"Understanding the Differences","title":"Perturbation-based Feature Importance Methods","text":"three methods can yield different results make different assumptions: PFI assumes features independent measures marginal importance feature. CFI preserves conditional distribution \\(P(X_{-j} | X_j)\\) perturbing feature \\(j\\), providing realistic assessment features correlated. RFI measures importance relative specific conditioning set, answering “additional information feature provide beyond already know conditioning features?” Friedman1 example: methods successfully identify important1 important5 important unimportant1 unimportant5 PFI treats feature isolation CFI accounts dependencies features RFI shows features add value beyond important1 important2","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"variability-analysis","dir":"Articles","previous_headings":"","what":"Variability Analysis","title":"Perturbation-based Feature Importance Methods","text":"Let’s examine stability importance estimates across resampling- permutation iterations using $scores tables:","code":"detailed_scores <- rbindlist(list(   pfi$scores[, method := \"PFI\"],   cfi$scores[, method := \"CFI\"],   rfi$scores[, method := \"RFI\"] ))  score_summary <- detailed_scores[, .(   mean_importance = mean(importance),   sd_importance = sd(importance),   n_iterations = .N ), by = .(feature, method)]  # Add feature type score_summary[, feature_type := ifelse(grepl(\"^important\", feature), \"Important\", \"Noise\")]  # Plot error bars ggplot(score_summary, aes(     y = reorder(feature, mean_importance),      x = mean_importance,     xmin = mean_importance - sd_importance,      xmax = mean_importance + sd_importance,     color = method)   ) +   facet_wrap(vars(feature_type), ncol = 1, scales = \"free_y\") +   geom_point(size = 3) +   geom_errorbarh(linewidth = 1, height = 0.3) +   scale_color_brewer(palette = \"Dark2\") +   labs(     title = \"Importance Score Variability: Mean ± SD\",     subtitle = glue::glue(\"Error bars show standard deviation across iterations                       RFI conditioned on: {paste(conditioning_set, collapse = ', ')}\"),     x = \"Score (Difference)\",     y = \"Feature\",     color = \"Method\",     caption = paste(\"Using\", resampling$iters, \"-fold CV and\", pfi$param_set$values$iters_perm, \"permutations each\")   ) +   theme_minimal(base_size = 14) +   theme(     plot.title.position = \"plot\",     legend.position = \"bottom\"   )"},{"path":[]},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"custom-samplers","dir":"Articles","previous_headings":"Advanced Usage","what":"Custom Samplers","title":"Perturbation-based Feature Importance Methods","text":"can provide custom samplers control:","code":"# Create a custom ARF sampler with specific parameters custom_sampler <- ARFSampler$new(   task = task,   arf_args = list(num.trees = 50),  # Fewer trees for faster computation   forde_args = list(finite_bounds = \"no\") # Allow extrapolation )  cfi_custom <- CFI$new(   task = task,   learner = learner,   measure = measure,   resampling = resampling,   sampler = custom_sampler )"},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"empty-conditioning-set-for-rfi","dir":"Articles","previous_headings":"Advanced Usage","what":"Empty Conditioning Set for RFI","title":"Perturbation-based Feature Importance Methods","text":"RFI empty conditioning set produce similar results PFI: correlation PFI RFI empty conditioning set 0.988, confirming \\(\\mathrm{RFI}(\\emptyset) \\approx \\mathrm{PFI}\\) expected.","code":"rfi_empty <- RFI$new(   task = task,   learner = learner,   measure = measure,   resampling = resampling,   conditioning_set = character(0), # Empty conditioning set   iters_perm = 5,   sampler = sampler )  rfi_empty_results <- rfi_empty$compute()  # Compare with PFI empty_comparison <- merge(   pfi_results[, .(feature, pfi = importance)],   rfi_empty_results[, .(feature, rfi_empty = importance)],   by = \"feature\" )  correlation_empty <- cor(empty_comparison$pfi, empty_comparison$rfi_empty)"},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"key-takeaways","dir":"Articles","previous_headings":"","what":"Key Takeaways","title":"Perturbation-based Feature Importance Methods","text":"methods correctly identify important features well-structured synthetic task PFI provides baseline marginal feature importance CFI accounts feature dependencies conditional sampling RFI measures relative importance beyond specified conditioning set Use PFI simple, interpretable marginal importance Use CFI feature dependencies matter Use RFI understand incremental value beyond known important features","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/sage-methods.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Shapley Additive Global Importance (SAGE)","text":"Shapley Additive Global Importance (SAGE) feature importance method based cooperative game theory uses Shapley values fairly distribute total prediction performance among features. Unlike permutation-based methods measure drop performance features perturbed, SAGE measures much feature contributes model’s overall performance marginalizing (removing) features. key insight SAGE provides complete decomposition model’s performance: sum SAGE values equals difference model’s performance performance features marginalized. xplainfi provides two implementations SAGE: MarginalSAGE: Marginalizes features independently (standard SAGE) ConditionalSAGE: Marginalizes features conditionally using ARF sampling","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/sage-methods.html","id":"the-friedman1-task","dir":"Articles","previous_headings":"","what":"The Friedman1 Task","title":"Shapley Additive Global Importance (SAGE)","text":"’ll use Friedman1 task generator demonstrate SAGE methods. synthetic regression task known ground truth makes easy interpret results: 5 important features (important1 important5) actually affect target 5 unimportant features (unimportant1 unimportant5) pure noise target function : \\(y = 10 * \\operatorname{sin}(\\pi * x_1 * x_2) + 20 * (x_3 - 0.5)^2 + 10 * x_4 + 5 * x_5 + \\epsilon\\) task 500 observations 10 features: important1, important2, important3, important4, important5, unimportant1, unimportant2, unimportant3, unimportant4, unimportant5. target variable y. Let’s set learner measure. ’ll use random forest able capture nonlinear relationships data:","code":"set.seed(123) task = tgen(\"friedman1\")$generate(n = 500) learner = lrn(\"regr.ranger\", num.trees = 100) measure = msr(\"regr.mse\")"},{"path":"https://jemus42.github.io/xplainfi/articles/sage-methods.html","id":"marginal-sage","dir":"Articles","previous_headings":"","what":"Marginal SAGE","title":"Shapley Additive Global Importance (SAGE)","text":"Marginal SAGE marginalizes features independently averaging predictions reference dataset. standard SAGE implementation described original paper. Let’s visualize results:","code":"# Create Marginal SAGE instance marginal_sage = MarginalSAGE$new(   task = task,   learner = learner,   measure = measure,   n_permutations = 20L,  # More permutations for stable results   max_reference_size = 100L )  # Compute SAGE values marginal_sage$compute() #>          feature   importance #>           <char>        <num> #>  1:   important1  3.822106318 #>  2:   important2  4.772059968 #>  3:   important3  1.118253503 #>  4:   important4  5.893192811 #>  5:   important5  1.784793110 #>  6: unimportant1 -0.047656519 #>  7: unimportant2 -0.048262424 #>  8: unimportant3 -0.076914131 #>  9: unimportant4 -0.083675223 #> 10: unimportant5  0.004202781 print(marginal_sage$importance) #>          feature   importance #>           <char>        <num> #>  1:   important1  3.822106318 #>  2:   important2  4.772059968 #>  3:   important3  1.118253503 #>  4:   important4  5.893192811 #>  5:   important5  1.784793110 #>  6: unimportant1 -0.047656519 #>  7: unimportant2 -0.048262424 #>  8: unimportant3 -0.076914131 #>  9: unimportant4 -0.083675223 #> 10: unimportant5  0.004202781 # Extract importance scores marginal_results = marginal_sage$importance marginal_results$method = \"Marginal SAGE\"  # Create a factor with proper ordering marginal_results$feature = factor(   marginal_results$feature,   levels = marginal_results$feature[order(marginal_results$importance, decreasing = TRUE)] )  # Create bar plot ggplot(marginal_results, aes(x = feature, y = importance)) +   geom_col(aes(fill = grepl(\"^important\", feature)), alpha = 0.8) +   scale_fill_manual(     values = c(\"FALSE\" = \"lightcoral\", \"TRUE\" = \"steelblue\"),     labels = c(\"Noise features\", \"Important features\"),     name = \"Feature type\"   ) +   labs(     title = \"Marginal SAGE Feature Importance\",     subtitle = \"Friedman1 task: 5 important features + 5 noise features\",     x = \"Features\",      y = \"SAGE Value\"   ) +   theme_minimal(base_size = 14) +   theme(axis.text.x = element_text(angle = 45, hjust = 1))"},{"path":"https://jemus42.github.io/xplainfi/articles/sage-methods.html","id":"conditional-sage","dir":"Articles","previous_headings":"","what":"Conditional SAGE","title":"Shapley Additive Global Importance (SAGE)","text":"Conditional SAGE uses conditional sampling (via ARF default) marginalize features preserving dependencies remaining features. can provide different insights, especially features correlated. Let’s visualize conditional SAGE results:","code":"# Create Conditional SAGE instance conditional_sage = ConditionalSAGE$new(   task = task,   learner = learner,   measure = measure,   n_permutations = 20L,   max_reference_size = 100L ) #> Iteration: 0, Accuracy: 47.34%  # Compute SAGE values conditional_sage$compute() #>          feature  importance #>           <char>       <num> #>  1:   important1  4.66358094 #>  2:   important2  4.35406218 #>  3:   important3  1.24089600 #>  4:   important4  6.30771863 #>  5:   important5  1.50581856 #>  6: unimportant1  0.03857396 #>  7: unimportant2 -0.01510479 #>  8: unimportant3  0.01149043 #>  9: unimportant4  0.05352929 #> 10: unimportant5 -0.02463429 print(conditional_sage$importance) #>          feature  importance #>           <char>       <num> #>  1:   important1  4.66358094 #>  2:   important2  4.35406218 #>  3:   important3  1.24089600 #>  4:   important4  6.30771863 #>  5:   important5  1.50581856 #>  6: unimportant1  0.03857396 #>  7: unimportant2 -0.01510479 #>  8: unimportant3  0.01149043 #>  9: unimportant4  0.05352929 #> 10: unimportant5 -0.02463429 # Extract importance scores conditional_results = conditional_sage$importance conditional_results$method = \"Conditional SAGE\"  # Create a factor with proper ordering conditional_results$feature = factor(   conditional_results$feature,   levels = conditional_results$feature[order(conditional_results$importance, decreasing = TRUE)] )  # Create bar plot ggplot(conditional_results, aes(x = feature, y = importance)) +   geom_col(aes(fill = grepl(\"^important\", feature)), alpha = 0.8) +   scale_fill_manual(     values = c(\"FALSE\" = \"lightcoral\", \"TRUE\" = \"steelblue\"),     labels = c(\"Noise features\", \"Important features\"),     name = \"Feature type\"   ) +   labs(     title = \"Conditional SAGE Feature Importance\",     subtitle = \"Friedman1 task: 5 important features + 5 noise features\",     x = \"Features\",      y = \"SAGE Value\"   ) +   theme_minimal(base_size = 14) +   theme(axis.text.x = element_text(angle = 45, hjust = 1))"},{"path":"https://jemus42.github.io/xplainfi/articles/sage-methods.html","id":"comparison-of-methods","dir":"Articles","previous_headings":"","what":"Comparison of Methods","title":"Shapley Additive Global Importance (SAGE)","text":"Let’s compare two SAGE methods side side:  Let’s also create correlation plot see similar rankings :","code":"# Combine results combined_results = rbind(marginal_results, conditional_results)  # Create comparison plot ggplot(combined_results, aes(x = feature, y = importance, fill = method)) +   geom_col(position = \"dodge\", alpha = 0.8) +   scale_fill_manual(values = c(\"Marginal SAGE\" = \"steelblue\", \"Conditional SAGE\" = \"darkgreen\")) +   labs(     title = \"Marginal vs Conditional SAGE Comparison\",     subtitle = \"Friedman1 task: Both methods should identify important features\",     x = \"Features\",      y = \"SAGE Value\",     fill = \"Method\"   ) +   theme_minimal(base_size = 14) +   theme(axis.text.x = element_text(angle = 45, hjust = 1)) +   facet_wrap(~ grepl(\"^important\", feature),               labeller = labeller(.default = function(x) ifelse(x, \"Important Features\", \"Noise Features\")),              scales = \"free_x\") # Merge the two results for correlation analysis merged_results = merge(   marginal_results[, c(\"feature\", \"importance\")],    conditional_results[, c(\"feature\", \"importance\")],    by = \"feature\",    suffixes = c(\"_marginal\", \"_conditional\") )  # Calculate correlation correlation = cor(merged_results$importance_marginal, merged_results$importance_conditional)  # Create scatter plot ggplot(merged_results, aes(x = importance_marginal, y = importance_conditional)) +   geom_point(aes(color = grepl(\"^important\", feature)), size = 3, alpha = 0.8) +   geom_smooth(method = \"lm\", se = FALSE, color = \"gray50\", linetype = \"dashed\") +   scale_color_manual(     values = c(\"FALSE\" = \"lightcoral\", \"TRUE\" = \"steelblue\"),     labels = c(\"Noise features\", \"Important features\"),     name = \"Feature type\"   ) +   labs(     title = \"Marginal vs Conditional SAGE Correlation\",     subtitle = sprintf(\"Pearson correlation: %.3f\", correlation),     x = \"Marginal SAGE Value\",     y = \"Conditional SAGE Value\"   ) +   theme_minimal(base_size = 14) +   geom_text(aes(label = feature), hjust = 0, vjust = -0.5, size = 3) #> `geom_smooth()` using formula = 'y ~ x'"},{"path":"https://jemus42.github.io/xplainfi/articles/sage-methods.html","id":"understanding-the-results","dir":"Articles","previous_headings":"","what":"Understanding the Results","title":"Shapley Additive Global Importance (SAGE)","text":"Let’s analyze learned comparison:","code":"# Calculate summary statistics important_marginal = marginal_results$importance[grepl(\"^important\", marginal_results$feature)] noise_marginal = marginal_results$importance[grepl(\"^unimportant\", marginal_results$feature)]  important_conditional = conditional_results$importance[grepl(\"^important\", conditional_results$feature)] noise_conditional = conditional_results$importance[grepl(\"^unimportant\", conditional_results$feature)]  # Store for inline reporting marg_imp_mean = round(mean(important_marginal), 4) marg_imp_std = round(sd(important_marginal), 4) marg_noise_mean = round(mean(noise_marginal), 4) marg_noise_std = round(sd(noise_marginal), 4) marg_separation = round(mean(important_marginal) / mean(abs(noise_marginal)), 2)  cond_imp_mean = round(mean(important_conditional), 4) cond_imp_std = round(sd(important_conditional), 4) cond_noise_mean = round(mean(noise_conditional), 4) cond_noise_std = round(sd(noise_conditional), 4) cond_separation = round(mean(important_conditional) / mean(abs(noise_conditional)), 2)  method_correlation = round(correlation, 3) total_sage_marginal = round(sum(marginal_results$importance), 4) total_sage_conditional = round(sum(conditional_results$importance), 4)"},{"path":"https://jemus42.github.io/xplainfi/articles/sage-methods.html","id":"marginal-sage-results","dir":"Articles","previous_headings":"Understanding the Results","what":"Marginal SAGE Results","title":"Shapley Additive Global Importance (SAGE)","text":"Important features - Mean: 3.4781 | Std: 2.0038 Noise features - Mean: -0.0505 | Std: 0.0347 Separation ratio: 66.7","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/sage-methods.html","id":"conditional-sage-results","dir":"Articles","previous_headings":"Understanding the Results","what":"Conditional SAGE Results","title":"Shapley Additive Global Importance (SAGE)","text":"Important features - Mean: 3.6144 | Std: 2.1784 Noise features - Mean: 0.0128 | Std: 0.0336 Separation ratio: 126.08","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/sage-methods.html","id":"method-comparison","dir":"Articles","previous_headings":"Understanding the Results","what":"Method Comparison","title":"Shapley Additive Global Importance (SAGE)","text":"Correlation methods: 0.99 Total SAGE sum (Marginal): 17.1381 Total SAGE sum (Conditional): 18.1359","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/xplainfi.html","id":"core-concepts","dir":"Articles","previous_headings":"","what":"Core Concepts","title":"Getting Started with xplainfi","text":"Feature importance methods xplainfi answer different related questions: much feature contribute model performance? (Permutation Feature Importance) happens remove features retrain? (Leave-One-Covariate-) much feature contribute individually? (Leave-One-Covariate-) features depend ? (Conditional Relative methods) methods share common interface built mlr3, making easy use task, learner, measure, resampling strategy.","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/xplainfi.html","id":"basic-example","dir":"Articles","previous_headings":"","what":"Basic Example","title":"Getting Started with xplainfi","text":"Let’s use Friedman1 task, provides ideal setup demonstrating feature importance methods known ground truth: task 300 observations 10 features. Features important1 important5 truly affect target, unimportant1 unimportant5 pure noise. ’ll use random forest learner cross-validation stable estimates. target function : \\(y = 10 * \\operatorname{sin}(\\pi * x_1 * x_2) + 20 * (x_3 - 0.5)^2 + 10 * x_4 + 5 * x_5 + \\epsilon\\)","code":"task <- tgen(\"friedman1\")$generate(n = 300) learner <- lrn(\"regr.ranger\", num.trees = 100) measure <- msr(\"regr.mse\") resampling <- rsmp(\"cv\", folds = 3)"},{"path":"https://jemus42.github.io/xplainfi/articles/xplainfi.html","id":"permutation-feature-importance-pfi","dir":"Articles","previous_headings":"","what":"Permutation Feature Importance (PFI)","title":"Getting Started with xplainfi","text":"PFI straightforward method: feature, permute (shuffle) values measure much model performance deteriorates. important features cause larger performance drops shuffled. importance column shows performance difference feature permuted. Higher values indicate important features. stable estimates, can use multiple permutation iterations per resampling fold: can also use ratio instead difference importance calculation:","code":"pfi <- PFI$new(   task = task,   learner = learner,   measure = measure,   resampling = resampling )  pfi_results <- pfi$compute() pfi_results #> Key: <feature> #>          feature   importance         sd #>           <char>        <num>      <num> #>  1:   important1  4.858724892 0.68442453 #>  2:   important2  8.155693005 2.26484810 #>  3:   important3  1.109254345 0.69151561 #>  4:   important4 10.784727349 1.29361802 #>  5:   important5  2.395793708 0.87273890 #>  6: unimportant1  0.009618005 0.11138825 #>  7: unimportant2  0.080903445 0.08050202 #>  8: unimportant3  0.044057887 0.04528352 #>  9: unimportant4 -0.082032243 0.10855146 #> 10: unimportant5 -0.137666350 0.08268950 pfi_stable <- PFI$new(   task = task,   learner = learner,   measure = measure,   resampling = resampling,   iters_perm = 5 )  pfi_stable$compute() #> Key: <feature> #>          feature   importance         sd #>           <char>        <num>      <num> #>  1:   important1  5.625322621 0.84130375 #>  2:   important2  9.609986341 1.77518863 #>  3:   important3  1.196388744 0.44992082 #>  4:   important4 12.648328883 2.92740759 #>  5:   important5  1.705056896 0.54745713 #>  6: unimportant1 -0.002597636 0.09029340 #>  7: unimportant2  0.108962283 0.17123736 #>  8: unimportant3  0.039131183 0.08291645 #>  9: unimportant4 -0.058408934 0.08647166 #> 10: unimportant5 -0.041202334 0.10787124 pfi_stable$compute(relation = \"ratio\") #> Key: <feature> #>          feature importance         sd #>           <char>      <num>      <num> #>  1:   important1  1.9484469 0.29293110 #>  2:   important2  2.4425122 0.27894990 #>  3:   important3  1.2212920 0.07502941 #>  4:   important4  2.9619275 0.45741386 #>  5:   important5  1.3790643 0.13580065 #>  6: unimportant1  0.9862282 0.01836363 #>  7: unimportant2  1.0098376 0.01946505 #>  8: unimportant3  1.0227458 0.01668362 #>  9: unimportant4  1.0090616 0.01819052 #> 10: unimportant5  0.9909342 0.01275179"},{"path":"https://jemus42.github.io/xplainfi/articles/xplainfi.html","id":"leave-one-covariate-out-loco","dir":"Articles","previous_headings":"","what":"Leave-One-Covariate-Out (LOCO)","title":"Getting Started with xplainfi","text":"LOCO measures importance retraining model without feature comparing performance full model. shows contribution feature features present. LOCO computationally expensive (requires retraining feature) provides clear interpretation: higher values mean larger performance drop feature removed. Important limitation: LOCO distinguish direct effects indirect effects correlated features.","code":"loco <- LOCO$new(   task = task,   learner = learner,   measure = measure,   resampling = resampling )  loco_results <- loco$compute() loco_results #> Key: <feature> #>          feature importance        sd #>           <char>      <num>     <num> #>  1:   important1  3.5341950 0.4799813 #>  2:   important2  5.5076635 0.8946863 #>  3:   important3  0.8231575 0.4514476 #>  4:   important4  7.5628028 1.7412825 #>  5:   important5  0.7647955 0.7375444 #>  6: unimportant1 -0.3884817 0.4774518 #>  7: unimportant2 -0.3159022 0.1183964 #>  8: unimportant3 -0.1991742 0.4288578 #>  9: unimportant4 -0.3039987 0.3220437 #> 10: unimportant5 -0.3435275 0.5206174"},{"path":"https://jemus42.github.io/xplainfi/articles/xplainfi.html","id":"leave-one-covariate-in-loci","dir":"Articles","previous_headings":"","what":"Leave-One-Covariate-In (LOCI)","title":"Getting Started with xplainfi","text":"LOCI takes opposite approach: trains models single features compares naive baseline (featureless learner predicts optimal constant). LOCI measures intrinsic predictive power feature isolation. Positive values indicate feature alone performs better constant prediction; negative values suggest feature harmful used alone. Key insight: LOCI ignores feature interactions synergies.","code":"loci <- LOCI$new(   task = task,   learner = learner,   measure = measure,   resampling = resampling )  loci_results <- loci$compute() loci_results #> Key: <feature> #>          feature importance        sd #>           <char>      <num>     <num> #>  1:   important1  -2.075522 2.7101488 #>  2:   important2   1.228444 3.2119676 #>  3:   important3  -6.279861 5.0870729 #>  4:   important4   2.905521 2.4191025 #>  5:   important5  -7.599927 0.8401867 #>  6: unimportant1  -8.880704 6.5371259 #>  7: unimportant2  -9.162649 4.7366787 #>  8: unimportant3  -7.666793 3.1583156 #>  9: unimportant4  -6.165845 3.1254441 #> 10: unimportant5 -12.301351 2.5671764"},{"path":"https://jemus42.github.io/xplainfi/articles/xplainfi.html","id":"feature-samplers","dir":"Articles","previous_headings":"","what":"Feature Samplers","title":"Getting Started with xplainfi","text":"advanced methods account feature dependencies, xplainfi provides different sampling strategies. PFI uses simple permutation (marginal sampling), conditional samplers can preserve feature relationships. Let’s demonstrate conditional sampling using Adversarial Random Forests, preserves relationships features sampling: Now ’ll conditionally sample important1 feature given values important2 important3: conditional sampling essential methods like CFI RFI need preserve feature dependencies. See vignette(\"perturbation-importance\") detailed comparisons.","code":"arf_sampler <- ARFSampler$new(task) #> Iteration: 0, Accuracy: 44.75%  sample_data <- task$data(rows = 1:5) sample_data[, .(y, important1, important2)] #>           y important1  important2 #>       <num>      <num>       <num> #> 1: 20.59935  0.2875775 0.784575267 #> 2: 10.48474  0.7883051 0.009429905 #> 3: 19.99049  0.4089769 0.779065883 #> 4: 19.70521  0.8830174 0.729390652 #> 5: 21.94251  0.9404673 0.630131853 sampled_conditional <- arf_sampler$sample(   feature = \"important1\",    data = sample_data,   conditioning_set = c(\"important2\", \"important3\") )  sample_data[, .(y, important1, important2, important3)] #>           y important1  important2 important3 #>       <num>      <num>       <num>      <num> #> 1: 20.59935  0.2875775 0.784575267  0.2372297 #> 2: 10.48474  0.7883051 0.009429905  0.6864904 #> 3: 19.99049  0.4089769 0.779065883  0.2258184 #> 4: 19.70521  0.8830174 0.729390652  0.3184946 #> 5: 21.94251  0.9404673 0.630131853  0.1739838 sampled_conditional[, .(y, important1, important2, important3)] #>           y important1  important2 important3 #>       <num>      <num>       <num>      <num> #> 1: 20.59935  0.7034949 0.784575267  0.2372297 #> 2: 10.48474  0.6442387 0.009429905  0.6864904 #> 3: 19.99049  0.6861356 0.779065883  0.2258184 #> 4: 19.70521  0.4621089 0.729390652  0.3184946 #> 5: 21.94251  0.5159056 0.630131853  0.1739838"},{"path":"https://jemus42.github.io/xplainfi/articles/xplainfi.html","id":"when-to-use-each-method","dir":"Articles","previous_headings":"","what":"When to Use Each Method","title":"Getting Started with xplainfi","text":"Choose PFI : want fast, simple importance estimates Features relatively independent need quick baseline assessment accept feature correlations ignored Choose LOCO : want understand impact completely removing features Computational cost major concern need interpretable importance relative full model Note: LOCO account feature correlations/dependencies Choose LOCI : want understand individual feature contributions isolation ’re interested feature selection (negative LOCI scores suggest harmful features) want compare features naive baseline (optimal constant prediction) Note: LOCI measures intrinsic predictive power, interactions features Important distinction: Neither LOCO LOCI can account conditional dependencies features. , need methods like CFI (Conditional Feature Importance) RFI (Relative Feature Importance) use conditional sampling. See vignette(\"perturbation-importance\") advanced methods.","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/xplainfi.html","id":"advanced-features","dir":"Articles","previous_headings":"","what":"Advanced Features","title":"Getting Started with xplainfi","text":"xplainfi supports many advanced features robust importance estimation: Multiple resampling strategies: Cross-validation, bootstrap, custom splits Multiple permutation/refit iterations: stable estimates Feature grouping: Compute importance groups related features Different relation types: Difference vs. ratio scoring Conditional sampling: Account feature dependencies (see vignette(\"perturbation-importance\")) SAGE methods: Shapley-based approaches (see vignette(\"sage-methods\"))","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/xplainfi.html","id":"detailed-scoring-information","dir":"Articles","previous_headings":"","what":"Detailed Scoring Information","title":"Getting Started with xplainfi","text":"methods store detailed scoring information analysis. Let’s examine structure PFI’s detailed scores: Detailed PFI scores (first 10 rows) can also summarize scoring structure:","code":"head(pfi$scores, 10) |>   knitr::kable(digits = 4, caption = \"Detailed PFI scores (first 10 rows)\") pfi$scores[, .(   features = uniqueN(feature),   resampling_folds = uniqueN(iter_rsmp),    permutation_iters = uniqueN(iter_perm),   total_scores = .N )] #>    features resampling_folds permutation_iters total_scores #>       <int>            <int>             <int>        <int> #> 1:       10                3                 1           30"},{"path":"https://jemus42.github.io/xplainfi/articles/xplainfi.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"Getting Started with xplainfi","text":"vignette covered basics feature importance xplainfi. advanced usage: vignette(\"perturbation-importance\"): Deep dive PFI, CFI, RFI methods conditional sampling vignette(\"loco-loci\"): Detailed examples LOCO LOCI methods vignette(\"sage-methods\"): SAGE-based Shapley value methods package documentation (?PFI, ?LOCO, ?LOCI) provides complete API references.","code":""},{"path":"https://jemus42.github.io/xplainfi/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lukas Burk. Author, maintainer.","code":""},{"path":"https://jemus42.github.io/xplainfi/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Burk L (2025). xplainfi: Feature Importance Methods Model Interpretability. R package version 0.1.0, https://jemus42.github.io/xplainfi/.","code":"@Manual{,   title = {xplainfi: Feature Importance Methods for Model Interpretability},   author = {Lukas Burk},   year = {2025},   note = {R package version 0.1.0},   url = {https://jemus42.github.io/xplainfi/}, }"},{"path":"https://jemus42.github.io/xplainfi/index.html","id":"xplainfi","dir":"","previous_headings":"","what":"xplainfi: Feature importance methods","title":"xplainfi: Feature importance methods","text":"goal xplainfi collect common feature importance methods unified extensible interface. built around mlr3 available abstractions learners, tasks, measures, etc. greatly simplify implementation importance measures.","code":""},{"path":"https://jemus42.github.io/xplainfi/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"xplainfi: Feature importance methods","text":"can install development version xplainfi like :","code":"# install.packages(pak) pak::pak(\"jemus42/xplainfi\")"},{"path":"https://jemus42.github.io/xplainfi/index.html","id":"example-pfi","dir":"","previous_headings":"","what":"Example: PFI","title":"xplainfi: Feature importance methods","text":"basic example calculate PFI given learner task, using repeated cross-validation resampling strategy computing PFI within resampling 5 times: Compute print PFI scores: Retrieve scores later pfi$importance. PFI computed based resampling multiple iterations, / multiple permutation iterations, individual scores can retrieved data.table: iter_rsmp corresponds resampling iteration, .e., 3 * 2 = 6 2 repeats 3-fold cross-validation, iter_perm corresponds permutation iteration within resampling iteration, 5 case. pfi$importance contains means standard deviations across iterations, pfi$scores allows manually aggregate way see fit. simplest case, run PFI single resampling iteration (holdout) single permutation iteration, pfi$importance contain importance values pfi$scores.","code":"library(xplainfi) library(mlr3) library(mlr3learners)  task = tsk(\"german_credit\") learner = lrn(\"classif.ranger\", num.trees = 100) measure = msr(\"classif.ce\")  pfi = PFI$new(   task = task,   learner = learner,   measure = measure,   resampling = rsmp(\"repeated_cv\", folds = 3, repeats = 2),   iters_perm = 5 ) pfi$compute() #> Key: <feature> #>                     feature    importance          sd #>                      <char>         <num>       <num> #>  1:                     age  9.929091e-04 0.010690982 #>  2:                  amount  1.288294e-02 0.017911433 #>  3:          credit_history  1.218554e-02 0.015895416 #>  4:                duration  1.598605e-02 0.019922101 #>  5:     employment_duration  3.890717e-03 0.009580233 #>  6:          foreign_worker -1.202700e-03 0.003576501 #>  7:                 housing -8.016999e-04 0.009771957 #>  8:        installment_rate  3.599408e-03 0.006323238 #>  9:                     job -1.002799e-03 0.008086486 #> 10:          number_credits -2.402103e-03 0.005482047 #> 11:           other_debtors  5.898713e-03 0.005011316 #> 12: other_installment_plans -9.095922e-04 0.010947167 #> 13:           people_liable  5.994018e-07 0.005945255 #> 14:     personal_status_sex -1.807496e-03 0.009310394 #> 15:       present_residence  6.944070e-04 0.012069722 #> 16:                property  1.291111e-03 0.012186182 #> 17:                 purpose  2.486918e-03 0.014410343 #> 18:                 savings  1.819694e-02 0.013125963 #> 19:                  status  3.978829e-02 0.015578736 #> 20:               telephone  1.293209e-03 0.008761937 #>                     feature    importance          sd str(pfi$scores) #> Classes 'data.table' and 'data.frame':   600 obs. of  6 variables: #>  $ feature        : chr  \"age\" \"age\" \"age\" \"age\" ... #>  $ iter_rsmp      : int  1 1 1 1 1 2 2 2 2 2 ... #>  $ iter_perm      : int  1 2 3 4 5 1 2 3 4 5 ... #>  $ classif.ce_orig: num  0.21 0.21 0.21 0.21 0.21 ... #>  $ classif.ce_perm: num  0.231 0.234 0.228 0.222 0.216 ... #>  $ importance     : num  0.02096 0.02395 0.01796 0.01198 0.00599 ... #>  - attr(*, \".internal.selfref\")=<externalptr>  #>  - attr(*, \"sorted\")= chr [1:2] \"feature\" \"iter_rsmp\" pfi_single = PFI$new(   task = task,   learner = learner,   measure = measure )  pfi_single$compute() #> Key: <feature> #>                     feature   importance #>                      <char>        <num> #>  1:                     age  0.003003003 #>  2:                  amount  0.012012012 #>  3:          credit_history  0.024024024 #>  4:                duration  0.012012012 #>  5:     employment_duration  0.006006006 #>  6:          foreign_worker  0.000000000 #>  7:                 housing  0.006006006 #>  8:        installment_rate  0.024024024 #>  9:                     job -0.003003003 #> 10:          number_credits -0.003003003 #> 11:           other_debtors  0.012012012 #> 12: other_installment_plans  0.006006006 #> 13:           people_liable  0.009009009 #> 14:     personal_status_sex  0.003003003 #> 15:       present_residence  0.006006006 #> 16:                property  0.003003003 #> 17:                 purpose  0.015015015 #> 18:                 savings  0.003003003 #> 19:                  status  0.054054054 #> 20:               telephone -0.003003003 #>                     feature   importance str(pfi_single$scores) #> Classes 'data.table' and 'data.frame':   20 obs. of  6 variables: #>  $ feature        : chr  \"age\" \"amount\" \"credit_history\" \"duration\" ... #>  $ iter_rsmp      : int  1 1 1 1 1 1 1 1 1 1 ... #>  $ iter_perm      : int  1 1 1 1 1 1 1 1 1 1 ... #>  $ classif.ce_orig: num  0.273 0.273 0.273 0.273 0.273 ... #>  $ classif.ce_perm: num  0.276 0.285 0.297 0.285 0.279 ... #>  $ importance     : num  0.003 0.01201 0.02402 0.01201 0.00601 ... #>  - attr(*, \".internal.selfref\")=<externalptr>  #>  - attr(*, \"sorted\")= chr [1:2] \"feature\" \"iter_rsmp\""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":null,"dir":"Reference","previous_headings":"","what":"ARF-based Conditional Sampler — ARFSampler","title":"ARF-based Conditional Sampler — ARFSampler","text":"Implements conditional sampling using Adversarial Random Forests (ARF). ARF can handle mixed data types (continuous categorical) provides flexible conditional sampling modeling joint distribution.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ARF-based Conditional Sampler — ARFSampler","text":"ARFSampler fits Adversarial Random Forest model task data, uses generate samples \\(P(X_j | X_{-j})\\) \\(X_j\\) feature interest \\(X_{-j}\\) conditioning features.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"ARF-based Conditional Sampler — ARFSampler","text":"Watson, S. D, Blesch, Kristin, Kapar, Jan, Wright, N. M (2023). “Adversarial Random Forests Density Estimation Generative Modeling.” Proceedings 26th International Conference Artificial Intelligence Statistics, 5357–5375. https://proceedings.mlr.press/v206/watson23a.html. Blesch, Kristin, Koenen, Niklas, Kapar, Jan, Golchian, Pegah, Burk, Lukas, Loecher, Markus, Wright, N. M (2025). “Conditional Feature Importance Generative Modeling Using Adversarial Random Forests.” Proceedings AAAI Conference Artificial Intelligence, 39(15), 15596–15604. doi:10.1609/aaai.v39i15.33712 .","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"ARF-based Conditional Sampler — ARFSampler","text":"xplainfi::FeatureSampler -> xplainfi::ConditionalSampler -> ARFSampler","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"ARF-based Conditional Sampler — ARFSampler","text":"arf_model Adversarial Random Forest model psi Distribution parameters estimated ARF","code":""},{"path":[]},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"ARF-based Conditional Sampler — ARFSampler","text":"ARFSampler$new() ARFSampler$sample() ARFSampler$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"ARF-based Conditional Sampler — ARFSampler","text":"Creates new instance ARFSampler class. fit ARF parallel, set arf_args = list(parallel = TRUE) register parallel backend (see arf::arf).","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARF-based Conditional Sampler — ARFSampler","text":"","code":"ARFSampler$new(   task,   conditioning_set = NULL,   evidence_row_mode = \"separate\",   round = TRUE,   sample_NAs = FALSE,   nomatch = \"force\",   stepsize = 0,   verbose = TRUE,   parallel = TRUE,   arf_args = NULL,   forde_args = NULL )"},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARF-based Conditional Sampler — ARFSampler","text":"task (mlr3::Task) Task sample conditioning_set (character | NULL) Default conditioning set use $sample(). parameter affects sampling behavior, ARF model fitting. evidence_row_mode (character(1)) Evidence row mode arf::forge(). Default \"separate\". round (logical(1)) Whether round continuous variables. Default TRUE. sample_NAs (logical(1)) Whether sample missing values. Default FALSE. nomatch (character(1)) handle factor levels seen training. Default \"force\". stepsize (numeric(1)) Step size variance adjustment. Default 0. verbose (logical(1)) Whether print progress messages. Default TRUE. parallel (logical(1)) Whether use parallel processing. Default TRUE. arf_args, forde_args (list) Arguments passed arf::adversarial_rf arf::forde respectively.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"method-sample-","dir":"Reference","previous_headings":"","what":"Method sample()","title":"ARF-based Conditional Sampler — ARFSampler","text":"Sample values feature(s) conditionally features using ARF","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"ARF-based Conditional Sampler — ARFSampler","text":"","code":"ARFSampler$sample(   feature,   data = self$task$data(),   conditioning_set = NULL,   evidence_row_mode = NULL,   round = NULL,   sample_NAs = NULL,   nomatch = NULL,   stepsize = NULL,   verbose = NULL,   parallel = NULL,   ... )"},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARF-based Conditional Sampler — ARFSampler","text":"feature (character) Feature(s) interest sample (can single multiple) data (data.table) Data containing conditioning features. Defaults $task$data(), typically dedicated test set provided. conditioning_set (character(n) | NULL) Features condition . NULL, uses stored parameter available, otherwise defaults features. evidence_row_mode (character(1) | NULL) Evidence row mode arf::forge(). NULL, uses stored parameter value. Must \"separate\" \"\". round (logical(1) | NULL) Whether round continuous variables. NULL, uses stored parameter value. sample_NAs (logical(1) | NULL) Whether sample missing values. NULL, uses stored parameter value. nomatch (character(1) | NULL) handle factor levels seen training. NULL, uses stored parameter value. stepsize (numeric(1) | NULL) Step size variance adjustment. NULL, uses stored parameter value. verbose (logical(1) | NULL) Whether print progress messages. NULL, uses stored parameter value. parallel (logical(1) | NULL) Whether use parallel processing. NULL, uses stored parameter value. ... arguments passed arf::forge().","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"ARF-based Conditional Sampler — ARFSampler","text":"Modified copy input data feature(s) sampled conditionally","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"ARF-based Conditional Sampler — ARFSampler","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"ARF-based Conditional Sampler — ARFSampler","text":"","code":"ARFSampler$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARF-based Conditional Sampler — ARFSampler","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARF-based Conditional Sampler — ARFSampler","text":"","code":"library(mlr3) task = tgen(\"2dnormals\")$generate(n = 100) # Create sampler with default parameters sampler = ARFSampler$new(task, conditioning_set = \"x2\", verbose = FALSE) data = task$data() # Will use the stored parameters sampled_data = sampler$sample(\"x1\", data)  # Example with \"or\" mode and custom parameters sampler_or = ARFSampler$new(task, evidence_row_mode = \"or\", round = FALSE) #> Iteration: 0, Accuracy: 45.23% sampled_or = sampler_or$sample(\"x1\", data)"},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional Feature Importance — CFI","title":"Conditional Feature Importance — CFI","text":"Implementation CFI using modular sampling approach","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Conditional Feature Importance — CFI","text":"Blesch, Kristin, Koenen, Niklas, Kapar, Jan, Golchian, Pegah, Burk, Lukas, Loecher, Markus, Wright, N. M (2025). “Conditional Feature Importance Generative Modeling Using Adversarial Random Forests.” Proceedings AAAI Conference Artificial Intelligence, 39(15), 15596–15604. doi:10.1609/aaai.v39i15.33712 .","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Conditional Feature Importance — CFI","text":"xplainfi::FeatureImportanceMethod -> xplainfi::PerturbationImportance -> CFI","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Conditional Feature Importance — CFI","text":"xplainfi::FeatureImportanceMethod$combine() xplainfi::FeatureImportanceMethod$print() xplainfi::FeatureImportanceMethod$reset()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Conditional Feature Importance — CFI","text":"CFI$new() CFI$compute() CFI$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Conditional Feature Importance — CFI","text":"Creates new instance CFI class","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Feature Importance — CFI","text":"","code":"CFI$new(   task,   learner,   measure,   resampling = NULL,   features = NULL,   relation = \"difference\",   iters_perm = 1L,   sampler = NULL )"},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Feature Importance — CFI","text":"task, learner, measure, resampling, features Passed PerturbationImportance. relation (character(1)) relate perturbed scores originals. Can overridden $compute(). iters_perm (integer(1)) Number sampling iterations. Can overridden $compute(). sampler (ConditionalSampler) Optional custom sampler. Defaults instantiationg ARFSampler internally default parameters.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"method-compute-","dir":"Reference","previous_headings":"","what":"Method compute()","title":"Conditional Feature Importance — CFI","text":"Compute CFI scores","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Feature Importance — CFI","text":"","code":"CFI$compute(relation = NULL, iters_perm = NULL, store_backends = TRUE)"},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Feature Importance — CFI","text":"relation (character(1)) relate perturbed scores originals. NULL, uses stored value. iters_perm (integer(1)) Number permutation iterations. NULL, uses stored value. store_backends (logical(1)) Whether store backends","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Conditional Feature Importance — CFI","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Feature Importance — CFI","text":"","code":"CFI$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Feature Importance — CFI","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditional Feature Importance — CFI","text":"","code":"library(mlr3) task = tgen(\"2dnormals\")$generate(n = 100) cfi = CFI$new(   task = task,   learner = lrn(\"classif.ranger\", num.trees = 50, predict_type = \"prob\"),   measure = msr(\"classif.ce\") ) #> Iteration: 0, Accuracy: 48.48% cfi$compute() #> Key: <feature> #>    feature importance #>     <char>      <num> #> 1:      x1  0.1515152 #> 2:      x2  0.1212121"},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSAGE.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional SAGE — ConditionalSAGE","title":"Conditional SAGE — ConditionalSAGE","text":"SAGE conditional sampling (features marginalized conditionally). Uses ARF default conditional marginalization.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSAGE.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Conditional SAGE — ConditionalSAGE","text":"xplainfi::FeatureImportanceMethod -> xplainfi::SAGE -> ConditionalSAGE","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSAGE.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Conditional SAGE — ConditionalSAGE","text":"xplainfi::FeatureImportanceMethod$combine() xplainfi::FeatureImportanceMethod$print() xplainfi::FeatureImportanceMethod$reset() xplainfi::SAGE$compute()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSAGE.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Conditional SAGE — ConditionalSAGE","text":"ConditionalSAGE$new() ConditionalSAGE$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSAGE.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Conditional SAGE — ConditionalSAGE","text":"Creates new instance ConditionalSAGE class.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSAGE.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional SAGE — ConditionalSAGE","text":"","code":"ConditionalSAGE$new(   task,   learner,   measure,   resampling = NULL,   features = NULL,   n_permutations = 10L,   reference_data = NULL,   sampler = NULL,   max_reference_size = 100L )"},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSAGE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional SAGE — ConditionalSAGE","text":"task, learner, measure, resampling, features Passed SAGE. n_permutations (integer(1)) Number permutations sample. reference_data (data.table) Optional reference dataset. sampler (ConditionalSampler) Optional custom sampler. Defaults ARFSampler. max_reference_size (integer(1)) Maximum size reference dataset.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSAGE.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Conditional SAGE — ConditionalSAGE","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSAGE.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional SAGE — ConditionalSAGE","text":"","code":"ConditionalSAGE$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSAGE.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional SAGE — ConditionalSAGE","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSAGE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditional SAGE — ConditionalSAGE","text":"","code":"library(mlr3) task = tgen(\"friedman1\")$generate(n = 100) sage = ConditionalSAGE$new(   task = task,   learner = lrn(\"regr.ranger\", num.trees = 50),   measure = msr(\"regr.mse\"),   n_permutations = 3L ) #> Iteration: 0, Accuracy: 45.69% sage$compute() #>          feature  importance #>           <char>       <num> #>  1:   important1  3.09978857 #>  2:   important2  2.41832297 #>  3:   important3  0.51639333 #>  4:   important4  3.21406737 #>  5:   important5  0.52267140 #>  6: unimportant1 -0.10933654 #>  7: unimportant2 -0.03120513 #>  8: unimportant3 -0.41883746 #>  9: unimportant4 -0.14628779 #> 10: unimportant5 -0.35006073  # Use batching for memory efficiency with large datasets sage$compute(batch_size = 1000) #>          feature  importance #>           <char>       <num> #>  1:   important1  3.09978857 #>  2:   important2  2.41832297 #>  3:   important3  0.51639333 #>  4:   important4  3.21406737 #>  5:   important5  0.52267140 #>  6: unimportant1 -0.10933654 #>  7: unimportant2 -0.03120513 #>  8: unimportant3 -0.41883746 #>  9: unimportant4 -0.14628779 #> 10: unimportant5 -0.35006073"},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional Feature Sampler — ConditionalSampler","title":"Conditional Feature Sampler — ConditionalSampler","text":"Base class conditional sampling methods features sampled conditionally features. abstract class extended concrete implementations.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Conditional Feature Sampler — ConditionalSampler","text":"xplainfi::FeatureSampler -> ConditionalSampler","code":""},{"path":[]},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Conditional Feature Sampler — ConditionalSampler","text":"ConditionalSampler$new() ConditionalSampler$sample() ConditionalSampler$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Conditional Feature Sampler — ConditionalSampler","text":"Creates new instance ConditionalSampler class","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Feature Sampler — ConditionalSampler","text":"","code":"ConditionalSampler$new(task)"},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Feature Sampler — ConditionalSampler","text":"task (mlr3::Task) Task sample ","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":"method-sample-","dir":"Reference","previous_headings":"","what":"Method sample()","title":"Conditional Feature Sampler — ConditionalSampler","text":"Sample values feature(s) conditionally features","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Feature Sampler — ConditionalSampler","text":"","code":"ConditionalSampler$sample(feature, data, conditioning_set = NULL)"},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Feature Sampler — ConditionalSampler","text":"feature (character) Feature name(s) sample (can single multiple) data (data.table ) Data containing conditioning features conditioning_set (character) Features condition (default: features)","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Conditional Feature Sampler — ConditionalSampler","text":"Modified copy input data feature(s) sampled conditionally","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Conditional Feature Sampler — ConditionalSampler","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Feature Sampler — ConditionalSampler","text":"","code":"ConditionalSampler$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Feature Sampler — ConditionalSampler","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":null,"dir":"Reference","previous_headings":"","what":"Feature Importance Method Class — FeatureImportanceMethod","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"Feature Importance Method Class Feature Importance Method Class","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"label (character(1)) Method label. task (mlr3::Task) learner (mlr3::Learner) measure (mlr3::Measure) resampling (mlr3::Resampling) resample_result (mlr3::ResampleResult) features (character) param_set (paradox::ps()) importance (data.table) Aggregated importance scores scores (data.table) Individual performance scores used compute $importance per resampling iteration permutation iteration.","code":""},{"path":[]},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"FeatureImportanceMethod$new() FeatureImportanceMethod$compute() FeatureImportanceMethod$combine() FeatureImportanceMethod$reset() FeatureImportanceMethod$print() FeatureImportanceMethod$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"Creates new instance R6 class. typically intended use derived classes.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"","code":"FeatureImportanceMethod$new(   task,   learner,   measure,   resampling = NULL,   features = NULL,   param_set = paradox::ps(),   label )"},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"task, learner, measure, resampling, features, param_set, label Used set fields","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"method-compute-","dir":"Reference","previous_headings":"","what":"Method compute()","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"Compute feature importance scores","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"","code":"FeatureImportanceMethod$compute(   relation = c(\"difference\", \"ratio\"),   store_backends = TRUE )"},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"relation (character(1): \"difference\") relate perturbed scores originals (\"difference\" \"ratio\") store_backends (logical(1): TRUE) Whether store backends.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"method-combine-","dir":"Reference","previous_headings":"","what":"Method combine()","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"Combine two FeatureImportanceMethod objects computed scores.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"","code":"FeatureImportanceMethod$combine(y, ...)"},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"y (FeatureImportanceMethod) Object combine. Must computed scores. ... () Unused.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"new FeatureImportanceMethod subclass x y. Currently method merges following: $scores combined, iter_rsmp increased y. $importance re-computed combined $scores. $resample_result combined mlr3::BenchmarkResult $resampling combined mlr3::ResamplingCustom, continuing te iteration count x y.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"method-reset-","dir":"Reference","previous_headings":"","what":"Method reset()","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"Resets stored fields populated $compute: $resample_result, $importance $scores.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"","code":"FeatureImportanceMethod$reset()"},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"Print importance scores","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"","code":"FeatureImportanceMethod$print(...)"},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"... Passed print()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"","code":"FeatureImportanceMethod$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":null,"dir":"Reference","previous_headings":"","what":"Feature Sampler Class — FeatureSampler","title":"Feature Sampler Class — FeatureSampler","text":"Base class implementing different sampling strategies feature importance methods like PFI CFI","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Feature Sampler Class — FeatureSampler","text":"task (mlr3::Task) Original task. label (character(1)) Name sampler. param_set (paradox::ParamSet) Parameter set sampler.","code":""},{"path":[]},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Feature Sampler Class — FeatureSampler","text":"FeatureSampler$new() FeatureSampler$sample() FeatureSampler$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Feature Sampler Class — FeatureSampler","text":"Creates new instance FeatureSampler class","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Sampler Class — FeatureSampler","text":"","code":"FeatureSampler$new(task)"},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Sampler Class — FeatureSampler","text":"task (mlr3::Task) Task sample ","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"method-sample-","dir":"Reference","previous_headings":"","what":"Method sample()","title":"Feature Sampler Class — FeatureSampler","text":"Sample values feature(s)","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Sampler Class — FeatureSampler","text":"","code":"FeatureSampler$sample(feature, data)"},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Sampler Class — FeatureSampler","text":"feature (character) Feature name(s) sample (can single multiple) data (data.table ) Data use sampling context","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Feature Sampler Class — FeatureSampler","text":"Modified copy input data feature(s) sampled","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Feature Sampler Class — FeatureSampler","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Sampler Class — FeatureSampler","text":"","code":"FeatureSampler$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Sampler Class — FeatureSampler","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCI.html","id":null,"dir":"Reference","previous_headings":"","what":"Leave-One-Covariate-In (LOCI) — LOCI","title":"Leave-One-Covariate-In (LOCI) — LOCI","text":"Calculates Leave-One-Covariate-(LOCI) scores. Despite name, implementation can leave one features time.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCI.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Leave-One-Covariate-In (LOCI) — LOCI","text":"LOCI measures feature importance training models individual feature (feature subset) comparing performance featureless baseline model (optimal constant prediction). importance calculated (featureless_model_loss - single_feature_loss). Positive values indicate feature performs better baseline, negative values indicate worse performance.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCI.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Leave-One-Covariate-In (LOCI) — LOCI","text":"xplainfi::FeatureImportanceMethod -> xplainfi::LeaveOutIn -> LOCI","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCI.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Leave-One-Covariate-In (LOCI) — LOCI","text":"xplainfi::FeatureImportanceMethod$combine() xplainfi::FeatureImportanceMethod$print() xplainfi::FeatureImportanceMethod$reset() xplainfi::LeaveOutIn$compute()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCI.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Leave-One-Covariate-In (LOCI) — LOCI","text":"LOCI$new() LOCI$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCI.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Leave-One-Covariate-In (LOCI) — LOCI","text":"Creates new instance R6 class.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCI.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Leave-One-Covariate-In (LOCI) — LOCI","text":"","code":"LOCI$new(   task,   learner,   measure,   resampling = NULL,   features = NULL,   iters_refit = 1L )"},{"path":"https://jemus42.github.io/xplainfi/reference/LOCI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Leave-One-Covariate-In (LOCI) — LOCI","text":"task (mlr3::Task) Task compute importance . learner (mlr3::Learner) Learner use prediction. measure (mlr3::Measure) Measure use scoring. resampling (mlr3::Resampling) Resampling strategy. Defaults holdout. features (character()) Features compute importance . Defaults features. iters_refit (integer(1)) Number refit iterations per resampling iteration.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCI.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Leave-One-Covariate-In (LOCI) — LOCI","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCI.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Leave-One-Covariate-In (LOCI) — LOCI","text":"","code":"LOCI$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/LOCI.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Leave-One-Covariate-In (LOCI) — LOCI","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Leave-One-Covariate-In (LOCI) — LOCI","text":"","code":"library(mlr3) task = tgen(\"friedman1\")$generate(n = 200) loci = LOCI$new(   task = task,   learner = lrn(\"regr.ranger\", num.trees = 50),   measure = msr(\"regr.mse\") ) loci$compute() #> Key: <feature> #>          feature importance #>           <char>      <num> #>  1:   important1   3.173814 #>  2:   important2  -8.923640 #>  3:   important3  -5.890087 #>  4:   important4   9.539363 #>  5:   important5  -5.712147 #>  6: unimportant1 -15.294677 #>  7: unimportant2  -8.145772 #>  8: unimportant3 -13.025879 #>  9: unimportant4 -11.492439 #> 10: unimportant5 -14.968549"},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":null,"dir":"Reference","previous_headings":"","what":"Leave-One-Covariate-Out (LOCO) — LOCO","title":"Leave-One-Covariate-Out (LOCO) — LOCO","text":"Calculates Leave-One-Covariate-(LOCO) scores. Despite name, implementation can leave one features time.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Leave-One-Covariate-Out (LOCO) — LOCO","text":"LOCO measures feature importance comparing model performance without feature. feature, model retrained without feature performance difference (reduced_model_loss - full_model_loss) indicates feature's importance. Higher values indicate important features.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Leave-One-Covariate-Out (LOCO) — LOCO","text":"xplainfi::FeatureImportanceMethod -> xplainfi::LeaveOutIn -> LOCO","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Leave-One-Covariate-Out (LOCO) — LOCO","text":"xplainfi::FeatureImportanceMethod$combine() xplainfi::FeatureImportanceMethod$print() xplainfi::FeatureImportanceMethod$reset() xplainfi::LeaveOutIn$compute()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Leave-One-Covariate-Out (LOCO) — LOCO","text":"LOCO$new() LOCO$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Leave-One-Covariate-Out (LOCO) — LOCO","text":"Creates new instance R6 class.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Leave-One-Covariate-Out (LOCO) — LOCO","text":"","code":"LOCO$new(   task,   learner,   measure,   resampling = NULL,   features = NULL,   iters_refit = 1L )"},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Leave-One-Covariate-Out (LOCO) — LOCO","text":"task (mlr3::Task) Task compute importance . learner (mlr3::Learner) Learner use prediction. measure (mlr3::Measure) Measure use scoring. resampling (mlr3::Resampling) Resampling strategy. Defaults holdout. features (character()) Features compute importance . Defaults features. iters_refit (integer(1)) Number refit iterations per resampling iteration.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Leave-One-Covariate-Out (LOCO) — LOCO","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Leave-One-Covariate-Out (LOCO) — LOCO","text":"","code":"LOCO$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Leave-One-Covariate-Out (LOCO) — LOCO","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Leave-One-Covariate-Out (LOCO) — LOCO","text":"","code":"library(mlr3) task = tgen(\"friedman1\")$generate(n = 200) loco = LOCO$new(   task = task,   learner = lrn(\"regr.ranger\", num.trees = 50),   measure = msr(\"regr.mse\") ) loco$compute() #> Key: <feature> #>          feature  importance #>           <char>       <num> #>  1:   important1  3.98082862 #>  2:   important2  3.64857657 #>  3:   important3  1.52435836 #>  4:   important4  4.53836936 #>  5:   important5  3.16650482 #>  6: unimportant1 -0.32737159 #>  7: unimportant2 -0.05614029 #>  8: unimportant3  0.09065941 #>  9: unimportant4  0.14995160 #> 10: unimportant5 -0.16412873"},{"path":"https://jemus42.github.io/xplainfi/reference/LeaveOutIn.html","id":null,"dir":"Reference","previous_headings":"","what":"Leave-Out/In Base Class — LeaveOutIn","title":"Leave-Out/In Base Class — LeaveOutIn","text":"Base class Leave-Leave-feature importance methods. abstract class - use LOCO LOCI.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LeaveOutIn.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Leave-Out/In Base Class — LeaveOutIn","text":"xplainfi::FeatureImportanceMethod -> LeaveOutIn","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LeaveOutIn.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Leave-Out/In Base Class — LeaveOutIn","text":"direction (character(1)) Either \"leave-\" \"leave-\".","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LeaveOutIn.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Leave-Out/In Base Class — LeaveOutIn","text":"xplainfi::FeatureImportanceMethod$combine() xplainfi::FeatureImportanceMethod$print() xplainfi::FeatureImportanceMethod$reset()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LeaveOutIn.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Leave-Out/In Base Class — LeaveOutIn","text":"LeaveOutIn$new() LeaveOutIn$compute() LeaveOutIn$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LeaveOutIn.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Leave-Out/In Base Class — LeaveOutIn","text":"Creates new instance R6 class.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LeaveOutIn.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Leave-Out/In Base Class — LeaveOutIn","text":"","code":"LeaveOutIn$new(   task,   learner,   measure,   resampling = NULL,   features = NULL,   direction,   label,   iters_refit = 1L )"},{"path":"https://jemus42.github.io/xplainfi/reference/LeaveOutIn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Leave-Out/In Base Class — LeaveOutIn","text":"task, learner, measure, resampling, features Passed FeatureImportanceMethod construction. direction (character(1)) Either \"leave-\" \"leave-\". label (character(1)) Method label. iters_refit (integer(1)) Number refit iterations per resampling iteration.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LeaveOutIn.html","id":"method-compute-","dir":"Reference","previous_headings":"","what":"Method compute()","title":"Leave-Out/In Base Class — LeaveOutIn","text":"Computes leave-leave-feature importance.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LeaveOutIn.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Leave-Out/In Base Class — LeaveOutIn","text":"","code":"LeaveOutIn$compute(relation = c(\"difference\", \"ratio\"), store_backends = TRUE)"},{"path":"https://jemus42.github.io/xplainfi/reference/LeaveOutIn.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Leave-Out/In Base Class — LeaveOutIn","text":"relation (character(1)) Calculate \"difference\" (default) \"ratio\" original scores scores leaving /features. store_backends (logical(1)) Passed mlr3::resample store backends resample result. Required measures, may increase memory footprint.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LeaveOutIn.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Leave-Out/In Base Class — LeaveOutIn","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LeaveOutIn.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Leave-Out/In Base Class — LeaveOutIn","text":"","code":"LeaveOutIn$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/LeaveOutIn.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Leave-Out/In Base Class — LeaveOutIn","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSAGE.html","id":null,"dir":"Reference","previous_headings":"","what":"Marginal SAGE — MarginalSAGE","title":"Marginal SAGE — MarginalSAGE","text":"SAGE marginal sampling (features marginalized independently). standard SAGE implementation.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSAGE.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Marginal SAGE — MarginalSAGE","text":"xplainfi::FeatureImportanceMethod -> xplainfi::SAGE -> MarginalSAGE","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSAGE.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Marginal SAGE — MarginalSAGE","text":"xplainfi::FeatureImportanceMethod$combine() xplainfi::FeatureImportanceMethod$print() xplainfi::FeatureImportanceMethod$reset() xplainfi::SAGE$compute()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSAGE.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Marginal SAGE — MarginalSAGE","text":"MarginalSAGE$new() MarginalSAGE$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSAGE.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Marginal SAGE — MarginalSAGE","text":"Creates new instance MarginalSAGE class.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSAGE.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Marginal SAGE — MarginalSAGE","text":"","code":"MarginalSAGE$new(   task,   learner,   measure,   resampling = NULL,   features = NULL,   n_permutations = 10L,   reference_data = NULL,   max_reference_size = 100L )"},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSAGE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Marginal SAGE — MarginalSAGE","text":"task, learner, measure, resampling, features Passed SAGE. n_permutations (integer(1)) Number permutations sample. reference_data (data.table) Optional reference dataset. max_reference_size (integer(1)) Maximum size reference dataset.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSAGE.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Marginal SAGE — MarginalSAGE","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSAGE.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Marginal SAGE — MarginalSAGE","text":"","code":"MarginalSAGE$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSAGE.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Marginal SAGE — MarginalSAGE","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSAGE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Marginal SAGE — MarginalSAGE","text":"","code":"library(mlr3) task = tgen(\"friedman1\")$generate(n = 100) sage = MarginalSAGE$new(   task = task,   learner = lrn(\"regr.ranger\", num.trees = 50),   measure = msr(\"regr.mse\"),   n_permutations = 3L ) sage$compute() #>          feature  importance #>           <char>       <num> #>  1:   important1  3.69267356 #>  2:   important2  0.12279400 #>  3:   important3  0.13271141 #>  4:   important4  4.75213626 #>  5:   important5  1.27065117 #>  6: unimportant1  0.08044271 #>  7: unimportant2 -0.17539124 #>  8: unimportant3 -0.44813329 #>  9: unimportant4 -0.25070707 #> 10: unimportant5 -0.11446254  # Use batching for memory efficiency with large datasets sage$compute(batch_size = 1000) #>          feature  importance #>           <char>       <num> #>  1:   important1  3.69267356 #>  2:   important2  0.12279400 #>  3:   important3  0.13271141 #>  4:   important4  4.75213626 #>  5:   important5  1.27065117 #>  6: unimportant1  0.08044271 #>  7: unimportant2 -0.17539124 #>  8: unimportant3 -0.44813329 #>  9: unimportant4 -0.25070707 #> 10: unimportant5 -0.11446254"},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":null,"dir":"Reference","previous_headings":"","what":"Marginal Feature Sampler — MarginalSampler","title":"Marginal Feature Sampler — MarginalSampler","text":"Implements marginal sampling PFI, feature interest sampled independently features","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Marginal Feature Sampler — MarginalSampler","text":"xplainfi::FeatureSampler -> MarginalSampler","code":""},{"path":[]},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Marginal Feature Sampler — MarginalSampler","text":"MarginalSampler$new() MarginalSampler$sample() MarginalSampler$print() MarginalSampler$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Marginal Feature Sampler — MarginalSampler","text":"Creates new instance MarginalSampler class","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Marginal Feature Sampler — MarginalSampler","text":"","code":"MarginalSampler$new(task)"},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Marginal Feature Sampler — MarginalSampler","text":"task (mlr3::Task) Task sample ","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"method-sample-","dir":"Reference","previous_headings":"","what":"Method sample()","title":"Marginal Feature Sampler — MarginalSampler","text":"Sample values feature(s) permutation (marginal distribution)","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Marginal Feature Sampler — MarginalSampler","text":"","code":"MarginalSampler$sample(feature, data)"},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Marginal Feature Sampler — MarginalSampler","text":"feature (character) Feature name(s) sample (can single multiple) data (data.table ) Data permute feature(s) ","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Marginal Feature Sampler — MarginalSampler","text":"Modified copy input data feature(s) permuted","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Marginal Feature Sampler — MarginalSampler","text":"Print sampler","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Marginal Feature Sampler — MarginalSampler","text":"","code":"MarginalSampler$print(...)"},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Marginal Feature Sampler — MarginalSampler","text":"... Passed print()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Marginal Feature Sampler — MarginalSampler","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Marginal Feature Sampler — MarginalSampler","text":"","code":"MarginalSampler$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Marginal Feature Sampler — MarginalSampler","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Marginal Feature Sampler — MarginalSampler","text":"","code":"library(mlr3) task = tgen(\"2dnormals\")$generate(n = 100) sampler = MarginalSampler$new(task) data = task$data() sampled_data = sampler$sample(\"x1\", data)"},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":null,"dir":"Reference","previous_headings":"","what":"Permutation Feature Importance — PFI","title":"Permutation Feature Importance — PFI","text":"Implementation Permutation Feature Importance (PFI) using modular sampling approach. PFI measures importance feature calculating increase model error feature's values randomly permuted, breaking relationship feature target variable.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Permutation Feature Importance — PFI","text":"Permutation Feature Importance originally introduced Breiman (2001) part Random Forest algorithm. method works : Computing baseline model performance original dataset feature, randomly permuting values keeping features unchanged Computing model performance permuted dataset Calculating importance difference (ratio) permuted original performance","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Permutation Feature Importance — PFI","text":"Breiman, Leo (2001). “Random Forests.” Machine Learning, 45(1), 5–32. doi:10.1023/:1010933404324 . Fisher, Aaron, Rudin, Cynthia, Dominici, Francesca (2019). “Models Wrong, Many Useful: Learning Variable's Importance Studying Entire Class Prediction Models Simultaneously.” Journal Machine Learning Research, 20, 177. https://www.ncbi.nlm.nih.gov/pmc/articles/PMC8323609/.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Permutation Feature Importance — PFI","text":"xplainfi::FeatureImportanceMethod -> xplainfi::PerturbationImportance -> PFI","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Permutation Feature Importance — PFI","text":"xplainfi::FeatureImportanceMethod$combine() xplainfi::FeatureImportanceMethod$print() xplainfi::FeatureImportanceMethod$reset()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Permutation Feature Importance — PFI","text":"PFI$new() PFI$compute() PFI$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Permutation Feature Importance — PFI","text":"Creates new instance PFI class","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permutation Feature Importance — PFI","text":"","code":"PFI$new(   task,   learner,   measure,   resampling = NULL,   features = NULL,   relation = \"difference\",   iters_perm = 1L )"},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permutation Feature Importance — PFI","text":"task, learner, measure, resampling, features Passed PerturbationImportance relation (character(1)) relate perturbed scores originals. Can overridden $compute(). iters_perm (integer(1)) Number permutation iterations. Can overridden $compute().","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"method-compute-","dir":"Reference","previous_headings":"","what":"Method compute()","title":"Permutation Feature Importance — PFI","text":"Compute PFI scores","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Permutation Feature Importance — PFI","text":"","code":"PFI$compute(relation = NULL, iters_perm = NULL, store_backends = TRUE)"},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permutation Feature Importance — PFI","text":"relation (character(1)) relate perturbed scores originals. NULL, uses stored value. iters_perm (integer(1)) Number permutation iterations. NULL, uses stored value. store_backends (logical(1)) Whether store backends","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Permutation Feature Importance — PFI","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Permutation Feature Importance — PFI","text":"","code":"PFI$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permutation Feature Importance — PFI","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Permutation Feature Importance — PFI","text":"","code":"library(mlr3learners) task = tgen(\"xor\", d = 5)$generate(n = 100) pfi = PFI$new(   task = task,   learner = lrn(\"classif.ranger\", num.trees = 50, predict_type = \"prob\"),   measure = msr(\"classif.ce\"),   resampling = rsmp(\"cv\", folds = 3),   iters_perm = 3 ) pfi$compute() #> Warning: Dropped unused factor level(s) in dependent variable: N. #> Warning: Dropped unused factor level(s) in dependent variable: M. #> Key: <feature> #>    feature importance         sd #>     <char>      <num>      <num> #> 1:      x1 0.02337096 0.03907053 #> 2:      x2 0.03693801 0.05825890 #> 3:      x3 0.06020994 0.04009485 #> 4:      x4 0.02663894 0.04654132 #> 5:      x5 0.03030303 0.08274742"},{"path":"https://jemus42.github.io/xplainfi/reference/PerturbationImportance.html","id":null,"dir":"Reference","previous_headings":"","what":"Permutation Feature Importance Base Class — PerturbationImportance","title":"Permutation Feature Importance Base Class — PerturbationImportance","text":"Abstract base class perturbation-based importance methods PFI, CFI, RFI","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PerturbationImportance.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Permutation Feature Importance Base Class — PerturbationImportance","text":"xplainfi::FeatureImportanceMethod -> PerturbationImportance","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PerturbationImportance.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Permutation Feature Importance Base Class — PerturbationImportance","text":"sampler (FeatureSampler) Sampler object feature perturbation","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PerturbationImportance.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Permutation Feature Importance Base Class — PerturbationImportance","text":"xplainfi::FeatureImportanceMethod$combine() xplainfi::FeatureImportanceMethod$compute() xplainfi::FeatureImportanceMethod$print() xplainfi::FeatureImportanceMethod$reset()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PerturbationImportance.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Permutation Feature Importance Base Class — PerturbationImportance","text":"PerturbationImportance$new() PerturbationImportance$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PerturbationImportance.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Permutation Feature Importance Base Class — PerturbationImportance","text":"Creates new instance PerturbationImportance class","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PerturbationImportance.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permutation Feature Importance Base Class — PerturbationImportance","text":"","code":"PerturbationImportance$new(   task,   learner,   measure,   resampling = NULL,   features = NULL,   sampler = NULL,   relation = \"difference\",   iters_perm = 1L )"},{"path":"https://jemus42.github.io/xplainfi/reference/PerturbationImportance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permutation Feature Importance Base Class — PerturbationImportance","text":"task, learner, measure, resampling, features Passed FeatureImportanceMethod sampler (FeatureSampler) Sampler use feature perturbation relation (character(1)) relate perturbed scores originals. Can overridden $compute(). iters_perm (integer(1)) Number permutation iterations. Can overridden $compute().","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PerturbationImportance.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Permutation Feature Importance Base Class — PerturbationImportance","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PerturbationImportance.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Permutation Feature Importance Base Class — PerturbationImportance","text":"","code":"PerturbationImportance$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/PerturbationImportance.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permutation Feature Importance Base Class — PerturbationImportance","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":null,"dir":"Reference","previous_headings":"","what":"Relative Feature Importance — RFI","title":"Relative Feature Importance — RFI","text":"Implementation RFI using modular sampling approach","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Relative Feature Importance — RFI","text":"König, Gunnar, Molnar, Christoph, Bischl, Bernd, Grosse-Wentrup, Moritz (2021). “Relative Feature Importance.” 2020 25th International Conference Pattern Recognition (ICPR), 9318–9325. doi:10.1109/ICPR48806.2021.9413090 .","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Relative Feature Importance — RFI","text":"xplainfi::FeatureImportanceMethod -> xplainfi::PerturbationImportance -> RFI","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Relative Feature Importance — RFI","text":"xplainfi::FeatureImportanceMethod$combine() xplainfi::FeatureImportanceMethod$print() xplainfi::FeatureImportanceMethod$reset()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Relative Feature Importance — RFI","text":"RFI$new() RFI$compute() RFI$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Relative Feature Importance — RFI","text":"Creates new instance RFI class","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relative Feature Importance — RFI","text":"","code":"RFI$new(   task,   learner,   measure,   resampling = NULL,   features = NULL,   conditioning_set = NULL,   relation = \"difference\",   iters_perm = 1L,   sampler = NULL )"},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relative Feature Importance — RFI","text":"task, learner, measure, resampling, features Passed PerturbationImportance conditioning_set (character()) Set features condition . Can overridden $compute(). Default (character(0)) equivalent PFI. CFI, set features except tat interest. relation (character(1)) relate perturbed scores originals. Can overridden $compute(). iters_perm (integer(1)) Number permutation iterations. Can overridden $compute(). sampler (ConditionalSampler) Optional custom sampler. Defaults ARFSampler","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"method-compute-","dir":"Reference","previous_headings":"","what":"Method compute()","title":"Relative Feature Importance — RFI","text":"Compute RFI scores","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Relative Feature Importance — RFI","text":"","code":"RFI$compute(   relation = NULL,   conditioning_set = NULL,   iters_perm = NULL,   store_backends = TRUE )"},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relative Feature Importance — RFI","text":"relation (character(1)) relate perturbed scores originals. NULL, uses stored value. conditioning_set (character()) Set features condition . NULL, uses stored parameter value. iters_perm (integer(1)) Number permutation iterations. NULL, uses stored value. store_backends (logical(1)) Whether store backends","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Relative Feature Importance — RFI","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Relative Feature Importance — RFI","text":"","code":"RFI$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relative Feature Importance — RFI","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relative Feature Importance — RFI","text":"","code":"library(mlr3) task = tgen(\"friedman1\")$generate(n = 200) rfi = RFI$new(   task = task,   learner = lrn(\"regr.ranger\", num.trees = 50),   measure = msr(\"regr.mse\"),   conditioning_set = c(\"important1\") ) #> Iteration: 0, Accuracy: 48.24% rfi$compute() #> Key: <feature> #>          feature  importance #>           <char>       <num> #>  1:   important1  0.00000000 #>  2:   important2  6.51976885 #>  3:   important3  1.51725013 #>  4:   important4 10.98446902 #>  5:   important5  2.00069572 #>  6: unimportant1 -0.18625470 #>  7: unimportant2  0.01093123 #>  8: unimportant3  0.02684055 #>  9: unimportant4 -0.30343325 #> 10: unimportant5  0.32443804"},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":null,"dir":"Reference","previous_headings":"","what":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"Base class SAGE (Shapley Additive Global Importance) feature importance based Shapley values marginalization. abstract class - use MarginalSAGE ConditionalSAGE.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"SAGE uses Shapley values fairly distribute total prediction performance among features. Unlike perturbation-based methods, SAGE marginalizes features integrating distribution. approximated averaging predictions reference dataset.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"Covert, Ian, Lundberg, M S, Lee, Su-(2020). “Understanding Global Feature Contributions Additive Importance Measures.” Advances Neural Information Processing Systems, volume 33, 17212–17223. https://proceedings.neurips.cc/paper/2020/hash/c7bf0b7c1a86d5eb3be2c722cf2cf746-Abstract.html.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"xplainfi::FeatureImportanceMethod -> SAGE","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"n_permutations (integer(1)) Number permutations sample. reference_data (data.table) Reference dataset marginalization. sampler (FeatureSampler) Sampler object marginalization.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"xplainfi::FeatureImportanceMethod$combine() xplainfi::FeatureImportanceMethod$print() xplainfi::FeatureImportanceMethod$reset()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"SAGE$new() SAGE$compute() SAGE$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"Creates new instance SAGE class.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"","code":"SAGE$new(   task,   learner,   measure,   resampling = NULL,   features = NULL,   n_permutations = 10L,   reference_data = NULL,   sampler = NULL,   max_reference_size = 100L )"},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"task, learner, measure, resampling, features Passed FeatureImportanceMethod. n_permutations (integer(1)) Number permutations sample Shapley value estimation. reference_data (data.table) Optional reference dataset. NULL, uses training data. sampler (FeatureSampler) Sampler marginalization. max_reference_size (integer(1)) Maximum size reference dataset. reference larger, subsampled.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"method-compute-","dir":"Reference","previous_headings":"","what":"Method compute()","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"Compute SAGE values.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"","code":"SAGE$compute(store_backends = TRUE, batch_size = NULL)"},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"store_backends (logical(1)) Whether store backends. batch_size (integer(1)) Maximum number observations process single prediction call. NULL, processes .","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"","code":"SAGE$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/c.FeatureImportanceMethod.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine two FeatureImportanceMethod objects — c.FeatureImportanceMethod","title":"Combine two FeatureImportanceMethod objects — c.FeatureImportanceMethod","text":"Combine two FeatureImportanceMethod objects","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/c.FeatureImportanceMethod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine two FeatureImportanceMethod objects — c.FeatureImportanceMethod","text":"","code":"# S3 method for class 'FeatureImportanceMethod' c(x, y, ...)"},{"path":"https://jemus42.github.io/xplainfi/reference/c.FeatureImportanceMethod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine two FeatureImportanceMethod objects — c.FeatureImportanceMethod","text":"x, y ([FeatureImportanceMethod]) Objects combine. Must computed scores. ... () Ignored.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/c.FeatureImportanceMethod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine two FeatureImportanceMethod objects — c.FeatureImportanceMethod","text":"New object subclass x y.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/c.FeatureImportanceMethod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine two FeatureImportanceMethod objects — c.FeatureImportanceMethod","text":"","code":"library(mlr3) task = tgen(\"2dnormals\")$generate(n = 100)  pfi1 = PFI$new(   task = task,   learner = lrn(\"classif.ranger\", num.trees = 50, predict_type = \"prob\"),   measure = msr(\"classif.ce\"),   features = \"x1\" ) pfi1$compute() #> Key: <feature> #>    feature importance #>     <char>      <num> #> 1:      x1  0.2121212  pfi2 = PFI$new(   task = task,   learner = lrn(\"classif.ranger\", num.trees = 50, predict_type = \"prob\"),   measure = msr(\"classif.ce\"),   features = \"x2\" ) pfi2$compute() #> Key: <feature> #>    feature importance #>     <char>      <num> #> 1:      x2  0.1212121  combined = c(pfi1, pfi2)"},{"path":"https://jemus42.github.io/xplainfi/reference/compute_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Scoring utility — compute_score","title":"Scoring utility — compute_score","text":"Computes relation score change (e.g. PFI, LOCO, ...) .","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/compute_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scoring utility — compute_score","text":"","code":"compute_score(   scores_pre,   scores_post,   relation = c(\"difference\", \"ratio\"),   minimize = TRUE )"},{"path":"https://jemus42.github.io/xplainfi/reference/compute_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scoring utility — compute_score","text":"scores_pre (numeric) Score change. scores_post (numeric) Score change. relation (character(1): \"difference\") Either \"difference\" \"ratio\". \"difference\", scores_post - scores_pre computed, otherwise scores_post / scores_pre. minimize (logical(1), TRUE) Whether score needs minimized (e.g. RMSE) maximized (e.g. AUC).","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/compute_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scoring utility — compute_score","text":"numeric vector length scores_pre scores_post","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/compute_score.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scoring utility — compute_score","text":"minimize == TRUE, scores_post - scores_pre computed relation == \"difference\", otherwise scores_pre - scores_post given. minimize == FALSE, scores_pre - scores_post computed.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/compute_score.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scoring utility — compute_score","text":"","code":"pre = rnorm(10) post = pre + runif(10)  compute_score(pre, post) #>  [1] 0.98272711 0.06367616 0.23446105 0.41262737 0.69137535 0.30580794 #>  [7] 0.06903065 0.49439662 0.97240477 0.97130458 compute_score(pre, post, \"ratio\") #>  [1] 1.9019328 0.9421777 0.7882807 0.6046324 8.3558903 1.2859186 0.9445000 #>  [8] 0.6183377 1.7889813 2.4991967 compute_score(pre, post, minimize = FALSE) #>  [1] -0.98272711 -0.06367616 -0.23446105 -0.41262737 -0.69137535 -0.30580794 #>  [7] -0.06903065 -0.49439662 -0.97240477 -0.97130458"},{"path":"https://jemus42.github.io/xplainfi/reference/op-null-default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default value for NULL — op-null-default","title":"Default value for NULL — op-null-default","text":"backport %||% available R versions 4.4.0.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/op-null-default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default value for NULL — op-null-default","text":"","code":"x %||% y"},{"path":"https://jemus42.github.io/xplainfi/reference/op-null-default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default value for NULL — op-null-default","text":"x, y x NULL length 0, return y; otherwise returns x.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/op-null-default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default value for NULL — op-null-default","text":"","code":"1 %||% 2 #> [1] 1 NULL %||% 2 #> [1] 2"},{"path":"https://jemus42.github.io/xplainfi/reference/print_bib.html","id":null,"dir":"Reference","previous_headings":"","what":"Print an Rd-formatted bib entry — print_bib","title":"Print an Rd-formatted bib entry — print_bib","text":"Print Rd-formatted bib entry","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/print_bib.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print an Rd-formatted bib entry — print_bib","text":"","code":"print_bib(...)"},{"path":"https://jemus42.github.io/xplainfi/reference/print_bib.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print an Rd-formatted bib entry — print_bib","text":"... (character) One quoted names bibentries print.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/sim_dgp_ewald.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate data as in Ewald et al. (2024) — sim_dgp_ewald","title":"Simulate data as in Ewald et al. (2024) — sim_dgp_ewald","text":"– X1, X3 X5 independent standard normal: Xj ∼ N (0, 1), – X2 noisy copy X1: X2 := X1 + eps_2, eps_2 ∼ N (0, 0.001), – X4 () noisy copy X3: X4 := X3 + eps_4, eps_4 ∼ N (0, 0.1), – Y depends X4 X5 via linear effects bivariate interaction: Y := X4 + X5 + X4 ∗ X5 + eps_Y , eps_Y ∼ N (0, 0.1).","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/sim_dgp_ewald.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate data as in Ewald et al. (2024) — sim_dgp_ewald","text":"","code":"sim_dgp_ewald(n = 500)"},{"path":"https://jemus42.github.io/xplainfi/reference/sim_dgp_ewald.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate data as in Ewald et al. (2024) — sim_dgp_ewald","text":"n (integer(1)) Number samples create.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/sim_dgp_ewald.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate data as in Ewald et al. (2024) — sim_dgp_ewald","text":"regression task (mlr3::TaskRegr) data.table backend.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/sim_dgp_ewald.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate data as in Ewald et al. (2024) — sim_dgp_ewald","text":"","code":"sim_dgp_ewald(100) #> <TaskRegr:Ewald_100> (100 x 6) #> * Target: y #> * Properties: - #> * Features (5): #>   - dbl (5): x1, x2, x3, x4, x5"},{"path":"https://jemus42.github.io/xplainfi/reference/xplainfi-package.html","id":null,"dir":"Reference","previous_headings":"","what":"xplainfi: Feature Importance Methods for Model Interpretability — xplainfi-package","title":"xplainfi: Feature Importance Methods for Model Interpretability — xplainfi-package","text":"Provides consistent interface common feature importance methods, permutation feature importance, 'LOCO', 'SAGE'.","code":""},{"path":[]},{"path":"https://jemus42.github.io/xplainfi/reference/xplainfi-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"xplainfi: Feature Importance Methods for Model Interpretability — xplainfi-package","text":"Maintainer: Lukas Burk github@quantenbrot.de (ORCID)","code":""},{"path":"https://jemus42.github.io/xplainfi/news/index.html","id":"xplainfi-0109000","dir":"Changelog","previous_headings":"","what":"xplainfi 0.1.0.9000","title":"xplainfi 0.1.0.9000","text":"Extend ARFSampler store arguments construction, making easier “preconfigure” sampler via arguments used $sample(). Standardize conditioning_set name character vector defining features condition ConditionalSampler RFI. Streamline PerturbationImportance implementation","code":""},{"path":"https://jemus42.github.io/xplainfi/news/index.html","id":"xplainfi-010","dir":"Changelog","previous_headings":"","what":"xplainfi 0.1.0","title":"xplainfi 0.1.0","text":"PFI CFI RFI (via arf-powered conditional sampling) SAGE (marginal conditional, latter via arf) LOCO LOCI Includes comparison reference implementation Python via fippy","code":""},{"path":"https://jemus42.github.io/xplainfi/news/index.html","id":"xplainfi-0009000-development-version","dir":"Changelog","previous_headings":"","what":"xplainfi 0.0.0.9000 (development version)","title":"xplainfi 0.0.0.9000 (development version)","text":"Initial design phase.","code":""}]
