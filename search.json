[{"path":"https://jemus42.github.io/xplainfi/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 xplainfi authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/fippy-comparison.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Comparison with fippy (Python Implementation)","text":"article compares xplainfi’s feature importance implementations fippy, Python package implementing similar methods. comparison serves regression test ensure methodological consistency across language implementations. comparison includes: PFI (Permutation Feature Importance) CFI (Conditional Feature Importance) RFI (Relative Feature Importance) SAGE (Shapley Additive Global Importance) - marginal conditional variants","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/fippy-comparison.html","id":"methodology","dir":"Articles","previous_headings":"","what":"Methodology","title":"Comparison with fippy (Python Implementation)","text":"implementations use: Dataset: Ewald et al. simulation 5000 observations (sim_dgp_ewald()) Evaluation: train/test data (70% train) Metrics: Mean Squared Error importance calculations Ewald simulation provides interpretable test case can better understand expected feature importance patterns, particularly conditional methods account feature dependencies. Due difference underlying conditional samplers (ARF xplainfi vs Gaussian samplers fippy) expect conditional methods show variation marginal ones.","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/fippy-comparison.html","id":"setup-and-execution","dir":"Articles","previous_headings":"","what":"Setup and Execution","title":"Comparison with fippy (Python Implementation)","text":"comparison uses separate calculation scripts: scripts generate JSON files results loaded comparison.","code":"# 1. Calculate xplainfi results cd vignettes/articles/fippy-comparison Rscript calculate_xplainfi.R  # 2. Calculate fippy results (portable with uv - automatically installs dependencies) ./calculate_fippy.py"},{"path":"https://jemus42.github.io/xplainfi/articles/fippy-comparison.html","id":"expected-feature-importance-patterns","dir":"Articles","previous_headings":"Setup and Execution","what":"Expected Feature Importance Patterns","title":"Comparison with fippy (Python Implementation)","text":"Ewald simulation (sim_dgp_ewald) generates regression task 5 features (x1-x5) : features contribute target variable, different weights features correlated, making conditional methods particularly interesting known data generating process allows us validate whether methods identify sensible patterns See article details DGP","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/fippy-comparison.html","id":"load-results","dir":"Articles","previous_headings":"","what":"Load Results","title":"Comparison with fippy (Python Implementation)","text":"","code":"# Check that both result files exist # Look in the fippy-comparison subdirectory base_dir <- here::here(\"vignettes\", \"articles\", \"fippy-comparison\") xplainfi_results_path <- file.path(base_dir, \"xplainfi_results.json\") fippy_results_path <- file.path(base_dir, \"fippy_results.json\")  if (!file.exists(xplainfi_results_path)) {     stop(\"xplainfi_results.json not found. Please run calculate_xplainfi.R first.\") }  if (!file.exists(fippy_results_path)) {     stop(\"fippy_results.json not found. Please run calculate_fippy.py first.\") }  # Load results from both implementations xplainfi_results <- fromJSON(xplainfi_results_path) fippy_results <- fromJSON(fippy_results_path)"},{"path":"https://jemus42.github.io/xplainfi/articles/fippy-comparison.html","id":"model-performance-comparison","dir":"Articles","previous_headings":"","what":"Model Performance Comparison","title":"Comparison with fippy (Python Implementation)","text":"Model Performance Comparison","code":"performance_comparison <- data.table(     Implementation = c(\"xplainfi (R)\", \"fippy (Python)\"),     R_squared = c(         round(xplainfi_results$model_performance$r_squared, 4),         round(fippy_results$model_performance$r_squared, 4)     ) )  kable(performance_comparison, caption = \"Model Performance Comparison\")"},{"path":"https://jemus42.github.io/xplainfi/articles/fippy-comparison.html","id":"method-comparisons","dir":"Articles","previous_headings":"","what":"Method Comparisons","title":"Comparison with fippy (Python Implementation)","text":"","code":"compare_method <- function(method_name, xplainfi_result, fippy_result) {     # Both implementations available     method_dt <- data.table(         feature = xplainfi_result$feature,         xplainfi = xplainfi_result$importance,         fippy = fippy_result$importance     )      # Return table and correlation for display     correlation <- cor(method_dt$xplainfi, method_dt$fippy)     correlation_spearman = cor(method_dt$xplainfi, method_dt$fippy, method = \"spearman\")      list(         method = method_name,         table = kable(             method_dt[order(-xplainfi)],             caption = glue(\"{method_name} Results Comparison\"),             digits = 4         ),         correlation = correlation,         correlation_spearman = correlation_spearman     ) }"},{"path":"https://jemus42.github.io/xplainfi/articles/fippy-comparison.html","id":"pfi-permutation-feature-importance","dir":"Articles","previous_headings":"Method Comparisons","what":"PFI (Permutation Feature Importance)","title":"Comparison with fippy (Python Implementation)","text":"PFI Results Comparison","code":"pfi_result <- compare_method(\"PFI\", xplainfi_results$PFI, fippy_results$PFI) pfi_result$table"},{"path":"https://jemus42.github.io/xplainfi/articles/fippy-comparison.html","id":"cfi-conditional-feature-importance","dir":"Articles","previous_headings":"Method Comparisons","what":"CFI (Conditional Feature Importance)","title":"Comparison with fippy (Python Implementation)","text":"CFI Results Comparison","code":"cfi_result <- compare_method(\"CFI\", xplainfi_results$CFI, fippy_results$CFI) cfi_result$table"},{"path":"https://jemus42.github.io/xplainfi/articles/fippy-comparison.html","id":"rfi-relative-feature-importance","dir":"Articles","previous_headings":"Method Comparisons","what":"RFI (Relative Feature Importance)","title":"Comparison with fippy (Python Implementation)","text":"RFI Results Comparison","code":"rfi_result <- compare_method(\"RFI\", xplainfi_results$RFI, fippy_results$RFI) rfi_result$table glue(\"xplainfi conditioning set: {paste(xplainfi_results$RFI$conditioning_set, collapse = ', ')}\") ## xplainfi conditioning set: x1, x2 glue(\"fippy conditioning set: {paste(fippy_results$RFI$conditioning_set, collapse = ', ')}\") ## fippy conditioning set: x1, x2"},{"path":[]},{"path":"https://jemus42.github.io/xplainfi/articles/fippy-comparison.html","id":"marginal-sage","dir":"Articles","previous_headings":"Method Comparisons > SAGE Methods","what":"Marginal SAGE","title":"Comparison with fippy (Python Implementation)","text":"Marginal SAGE Results Comparison","code":"sage_marginal_result <- compare_method(     \"Marginal SAGE\",     xplainfi_results$SAGE_Marginal,     fippy_results$SAGE_Marginal ) sage_marginal_result$table"},{"path":"https://jemus42.github.io/xplainfi/articles/fippy-comparison.html","id":"conditional-sage","dir":"Articles","previous_headings":"Method Comparisons > SAGE Methods","what":"Conditional SAGE","title":"Comparison with fippy (Python Implementation)","text":"Conditional SAGE Results Comparison","code":"sage_conditional_result <- compare_method(     \"Conditional SAGE\",     xplainfi_results$SAGE_Conditional,     fippy_results$SAGE_Conditional ) sage_conditional_result$table"},{"path":"https://jemus42.github.io/xplainfi/articles/fippy-comparison.html","id":"correlation-summary","dir":"Articles","previous_headings":"","what":"Correlation Summary","title":"Comparison with fippy (Python Implementation)","text":"Pearson Spearman Correlations xplainfi fippy","code":"correlations <- rbindlist(list(     pfi_result[c(\"method\", \"correlation\", \"correlation_spearman\")],     cfi_result[c(\"method\", \"correlation\", \"correlation_spearman\")],     rfi_result[c(\"method\", \"correlation\", \"correlation_spearman\")],     sage_marginal_result[c(\"method\", \"correlation\", \"correlation_spearman\")],     sage_conditional_result[c(\"method\", \"correlation\", \"correlation_spearman\")] ))  kable(     correlations,     digits = 4,     caption = \"Pearson and Spearman Correlations between xplainfi and fippy\",     col.names = c(\"Method\", \"Pearson Corr.\", \"Spearman Corr.\") ) melt(correlations, id.vars = \"method\") |>     ggplot(aes(x = reorder(method, value), y = value)) +     facet_wrap(         vars(variable),         ncol = 1,         labeller = as_labeller(c(correlation = \"Pearson's\", correlation_spearman = \"Spearman's\"))     ) +     geom_col(fill = \"steelblue\", alpha = 0.7) +     geom_hline(yintercept = c(0.5, 1), linetype = \"dashed\", color = \"red\", alpha = 0.7) +     coord_flip() +     labs(         title = \"Implementation Correlations\",         subtitle = \"xplainfi (R) vs fippy (Python)\",         x = \"Method\",         y = \"Correlation\"     ) +     theme_minimal(base_size = 14) +     theme(         plot.title.position = \"plot\"     )"},{"path":"https://jemus42.github.io/xplainfi/articles/fippy-comparison.html","id":"interpretation-in-context-of-ewald-simulation","dir":"Articles","previous_headings":"","what":"Interpretation in Context of Ewald Simulation","title":"Comparison with fippy (Python Implementation)","text":"Ewald simulation provides interpretable feature importance patterns help validate implementations:","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/fippy-comparison.html","id":"method-specific-insights","dir":"Articles","previous_headings":"Interpretation in Context of Ewald Simulation","what":"Method-Specific Insights","title":"Comparison with fippy (Python Implementation)","text":"Marginal vs Conditional Methods: PFI Marginal SAGE ignore feature correlations CFI, RFI, Conditional SAGE account feature dependencies Differences marginal conditional variants reveal impact feature correlations RFI Conditioning: implementations use {x3} conditioning set. Cross-Implementation Consistency: High correlations indicate xplainfi fippy identify similar underlying feature importance patterns despite using different: Programming languages (R vs Python) Conditional sampling approaches (ARF vs Gaussian) Implementation details","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/loco.html","id":"example-data-interaction-effects","dir":"Articles","previous_headings":"","what":"Example Data: Interaction Effects","title":"LOCO and WVIM","text":"illustrate LOCO feature importance, ’ll use data generating process interaction effects: \\[y = 2 \\cdot x_1 \\cdot x_2 + x_3 + \\epsilon\\] \\(\\epsilon \\sim N(0, 0.5^2)\\) features \\(x_1, x_2, x_3, noise_1, noise_2 \\sim N(0,1)\\) independent. Key characteristics: \\(x_1, x_2\\): individual effects, interact \\(x_3\\): direct main effect \\(y\\) \\(noise_1, noise_2\\): Pure noise variables effect \\(y\\) setup demonstrates LOCO handles interaction effects.","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/loco.html","id":"leave-one-covariate-out-loco","dir":"Articles","previous_headings":"","what":"Leave-One-Covariate-Out (LOCO)","title":"LOCO and WVIM","text":"LOCO measures feature importance comparing model performance without feature. feature, learner retrained without feature performance difference indicates feature’s importance. feature \\(j\\), LOCO calculated difference expected loss model fit without feature full model: \\[\\text{LOCO}_j = \\mathbb{E}(L(Y, f_{-j}(X_{-j}))) - \\mathbb{E}(L(Y, f(X)))\\] Higher values indicate important features (larger performance drop removed). $importance() method returns data.table aggregated importance scores per feature.","code":"task <- sim_dgp_interactions(n = 1000) learner <- lrn(\"regr.ranger\", num.trees = 500) measure <- msr(\"regr.mse\")  # Use 3-fold CV for more robust estimates and reuse across comparisons set.seed(123) resampling <- rsmp(\"cv\", folds = 3) resampling$instantiate(task)  loco <- LOCO$new(     task = task,     learner = learner,     measure = measure,     resampling = resampling,     features = task$feature_names )  loco$compute() loco$importance() #> Key: <feature> #>    feature  importance #>     <char>       <num> #> 1:  noise1 -0.34934269 #> 2:  noise2 -0.37463147 #> 3:      x1  1.84361893 #> 4:      x2  2.01889198 #> 5:      x3 -0.04674861"},{"path":"https://jemus42.github.io/xplainfi/articles/loco.html","id":"understanding-the-results","dir":"Articles","previous_headings":"","what":"Understanding the Results","title":"LOCO and WVIM","text":"LOCO results interpretation: \\(x_3\\) show high importance due direct main effect \\(x_1\\) \\(x_2\\) show variable importance depending model’s ability capture interactions \\(noise_1\\) \\(noise_2\\) show low negative importance demonstrates LOCO measures feature’s contribution model performance","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/loco.html","id":"detailed-scores","dir":"Articles","previous_headings":"","what":"Detailed Scores","title":"LOCO and WVIM","text":"$scores() method provides detailed information feature, resampling iteration, refit: LOCO scores baseline post-refit score","code":"loco$scores() |>     knitr::kable(digits = 4, caption = \"LOCO scores with baseline and post-refit score\")"},{"path":"https://jemus42.github.io/xplainfi/articles/loco.html","id":"multiple-refits","dir":"Articles","previous_headings":"","what":"Multiple Refits","title":"LOCO and WVIM","text":"LOCO supports iters_refit multiple refit iterations per resampling iteration, provides variance estimates: First 10 LOCO scores per refit resampling fold","code":"loco_multi = LOCO$new(     task = task,     learner = learner,     measure = measure,     resampling = rsmp(\"cv\", folds = 3),     iters_refit = 3L )  loco_multi$compute() loco_multi$importance() #> Key: <feature> #>    feature importance #>     <char>      <num> #> 1:  noise1 -0.4165046 #> 2:  noise2 -0.3700696 #> 3:      x1  2.2033892 #> 4:      x2  1.7538044 #> 5:      x3 -0.1532176  # Check individual scores with multiple refits loco_multi$scores() |>     head(10) |>     knitr::kable(digits = 4, caption = \"First 10 LOCO scores per refit and resampling fold\")"},{"path":"https://jemus42.github.io/xplainfi/articles/loco.html","id":"using-different-measures","dir":"Articles","previous_headings":"","what":"Using Different Measures","title":"LOCO and WVIM","text":"LOCO works mlr3 measure. Different measures can highlight different aspects feature importance:","code":"# Use same resampling for fair comparison loco_mae <- LOCO$new(     task = task,     learner = learner,     measure = msr(\"regr.mae\"),     resampling = resampling )  loco_mae$compute()  # Compare results comparison <- merge(     loco$importance()[, .(feature, importance_mse = importance)],     loco_mae$importance()[, .(feature, importance_mae = importance)],     by = \"feature\" )  comparison #> Key: <feature> #>    feature importance_mse importance_mae #>     <char>          <num>          <num> #> 1:  noise1    -0.34934269    -0.08076442 #> 2:  noise2    -0.37463147    -0.07994970 #> 3:      x1     1.84361893     0.36851547 #> 4:      x2     2.01889198     0.37336362 #> 5:      x3    -0.04674861     0.10887527"},{"path":"https://jemus42.github.io/xplainfi/articles/loco.html","id":"comparison-with-perturbation-methods","dir":"Articles","previous_headings":"","what":"Comparison with Perturbation Methods","title":"LOCO and WVIM","text":"LOCO differs perturbation-based methods like PFI CFI: LOCO: Retrains model without feature (computationally expensive) PFI/CFI: Perturb feature values using existing model (faster) Note: Using instantiated resampling ensures evaluate methods identical train/test splits. Even , stochastic learners like ranger produce slightly different results methods due random forest’s sampling. LOCO measures value feature available training, PFI measures value informative feature values prediction time.","code":"# Compare LOCO with PFI using same resampling pfi <- PFI$new(task, learner, measure, resampling = resampling) pfi$compute()  comparison <- merge(     loco$importance()[, .(feature, loco = importance)],     pfi$importance()[, .(feature, pfi = importance)],     by = \"feature\" )  comparison #> Key: <feature> #>    feature        loco         pfi #>     <char>       <num>       <num> #> 1:  noise1 -0.34934269 -0.01400716 #> 2:  noise2 -0.37463147  0.09424535 #> 3:      x1  1.84361893  2.06667340 #> 4:      x2  2.01889198  2.15522497 #> 5:      x3 -0.04674861  2.11235347"},{"path":"https://jemus42.github.io/xplainfi/articles/loco.html","id":"wvim-the-general-framework","dir":"Articles","previous_headings":"","what":"WVIM: The General Framework","title":"LOCO and WVIM","text":"LOCO special case Ewald et al. refer “Williamson’s Variable Importance Measure” (WVIM), provides general formulation refit-based feature importance. WVIM allows one feature interest time, meaning via groups argument features can assigned groups always “left ” “left ” together. also direction argument, specifying whether features left .","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/loco.html","id":"replicating-loco-with-wvim","dir":"Articles","previous_headings":"WVIM: The General Framework","what":"Replicating LOCO with WVIM","title":"LOCO and WVIM","text":"can manually replicate LOCO using WVIM’s \"leave-\" direction. Since features specified rather groups, feature well left one time, resulting LOCO procedure. Note: get comparable results methods, must use instantiated resampling. Even , stochastic learners like ranger produce slightly different results due random forest’s bootstrapping split selection, overall patterns consistent.","code":"# Create WVIM instance (LOCO's parent class) using same resampling wvim_loco <- WVIM$new(     task = task,     learner = learner,     measure = measure,     resampling = resampling,     features = task$feature_names,     direction = \"leave-out\" ) wvim_loco$compute()  # Compare with original LOCO results comparison_wvim <- merge(     loco$importance()[, .(feature, loco = importance)],     wvim_loco$importance()[, .(feature, wvim = importance)],     by = \"feature\" )  comparison_wvim #> Key: <feature> #>    feature        loco        wvim #>     <char>       <num>       <num> #> 1:  noise1 -0.34934269 -0.33681664 #> 2:  noise2 -0.37463147 -0.33799542 #> 3:      x1  1.84361893  1.84817713 #> 4:      x2  2.01889198  1.99826149 #> 5:      x3 -0.04674861 -0.05849218"},{"path":"https://jemus42.github.io/xplainfi/articles/loco.html","id":"loci-leave-one-covariate-in","dir":"Articles","previous_headings":"WVIM: The General Framework","what":"LOCI: Leave-One-Covariate-In","title":"LOCO and WVIM","text":"WVIM allows us compute LOCI (Leave-One-Covariate-) changing direction “leave-”. LOCI trains models single features compares featureless baseline. Note: LOCI questionable utility practice essentially just measure bivariate association target feature separately. However, WVIM makes trivial compute desired: LOCI interprets importance differently LOCO: LOCO: “much performance degrade feature removed full model?” LOCI: “much feature alone improve featureless baseline?” interaction data \\(y = 2 \\cdot x_1 \\cdot x_2 + x_3 + \\epsilon\\): show low importance \\(x_1\\) \\(x_2\\) individually (main effects) show high importance \\(x_3\\) (strong main effect) LOCO better captures value features participate interactions However, since used random forest learner (ranger), can expected learn meaningful relations based one training onle one feature. hopefully showcases LOCI primarily “useful” teaching exercise, rather meaningful importance measure.","code":"# LOCI: train with only one feature at a time wvim_loci <- WVIM$new(     task = task,     learner = learner,     measure = measure,     features = task$feature_names,     direction = \"leave-in\",     resampling = rsmp(\"cv\", folds = 3),     iters_refit = 2 )  wvim_loci$compute() wvim_loci$importance() #> Key: <feature> #>    feature importance #>     <char>      <num> #> 1:  noise1 -1.2802375 #> 2:  noise2 -1.5113764 #> 3:      x1 -1.6304441 #> 4:      x2 -2.4483510 #> 5:      x3 -0.1278984"},{"path":"https://jemus42.github.io/xplainfi/articles/loco.html","id":"wvim-with-feature-groups","dir":"Articles","previous_headings":"","what":"WVIM with Feature Groups","title":"LOCO and WVIM","text":"LOCO measures importance individual features, WVIM generalizes arbitrary feature groups. allows us measure collective importance sets features.","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/loco.html","id":"understanding-feature-groups","dir":"Articles","previous_headings":"WVIM with Feature Groups","what":"Understanding Feature Groups","title":"LOCO and WVIM","text":"Feature groups useful : Features naturally related (e.g., dummy-encoded categorical variables) want measure importance feature subsets Features known functional relationships Let’s create groups interaction data:","code":"# Define feature groups groups <- list(     interaction_pair = c(\"x1\", \"x2\"), # Features that interact     main_effect = \"x3\", # Feature with direct effect     noise_features = c(\"noise1\", \"noise2\") # Pure noise )  groups #> $interaction_pair #> [1] \"x1\" \"x2\" #>  #> $main_effect #> [1] \"x3\" #>  #> $noise_features #> [1] \"noise1\" \"noise2\""},{"path":"https://jemus42.github.io/xplainfi/articles/loco.html","id":"wvim-with-leave-out-direction","dir":"Articles","previous_headings":"WVIM with Feature Groups","what":"WVIM with Leave-Out Direction","title":"LOCO and WVIM","text":"Using direction = \"leave-\", WVIM computes importance group measuring performance entire group removed: \\[\\text{WVIM}_{\\text{group}} = \\mathbb{E}(L(Y, f_{-\\text{group}}(X_{-\\text{group}}))) - \\mathbb{E}(L(Y, f(X)))\\] compares model without group full model. Interpretation: interaction_pair (x1, x2) shows joint contribution interacting features main_effect (x3) shows contribution direct effect noise_features show near-zero negative importance","code":"wvim_groups_out <- WVIM$new(     task = task,     learner = learner,     measure = measure,     groups = groups,     direction = \"leave-out\",     resampling = rsmp(\"cv\", folds = 3),     iters_refit = 10 )  wvim_groups_out$compute() wvim_groups_out$importance() #> Key: <feature> #>             feature importance #>              <char>      <num> #> 1: interaction_pair  1.8030094 #> 2:      main_effect -0.1962295 #> 3:   noise_features -0.3016257"},{"path":"https://jemus42.github.io/xplainfi/articles/loco.html","id":"wvim-with-leave-in-direction","dir":"Articles","previous_headings":"WVIM with Feature Groups","what":"WVIM with Leave-In Direction","title":"LOCO and WVIM","text":"Using direction = \"leave-\", WVIM trains models group compares featureless baseline: \\[\\text{WVIM}_{\\text{group}} = \\mathbb{E}(L(Y, f_{\\emptyset})) - \\mathbb{E}(L(Y, f_{\\text{group}}(X_{\\text{group}})))\\] measures much group alone improves features.","code":"wvim_groups_in <- WVIM$new(     task = task,     learner = learner,     measure = measure,     groups = groups,     direction = \"leave-in\",     resampling = rsmp(\"cv\", folds = 3) )  wvim_groups_in$compute() wvim_groups_in$importance() #> Key: <feature> #>             feature  importance #>              <char>       <num> #> 1: interaction_pair  3.31141622 #> 2:      main_effect -0.05618814 #> 3:   noise_features -0.46256742"},{"path":"https://jemus42.github.io/xplainfi/articles/loco.html","id":"comparing-leave-out-vs-leave-in-for-groups","dir":"Articles","previous_headings":"WVIM with Feature Groups","what":"Comparing Leave-Out vs Leave-In for Groups","title":"LOCO and WVIM","text":"key difference two directions baseline model used comparison: Measures: “lose removing group?” Higher values → group important overall model performance Measures: “gain using group?” Higher values → group alone provides better prediction baseline interaction data \\(y = 2 \\cdot x_1 \\cdot x_2 + x_3 + \\epsilon\\): Leave-captures much group contributes full model Leave-shows main_effect group (x3) provides substantial prediction alone, interaction_pair (x1, x2) limited predictive power isolation highlights key insight: features interact strongly may show high importance leave-(matter full model) low importance leave-(don’t work well alone).","code":"comparison_directions <- merge(     wvim_groups_out$importance()[, .(feature, leave_out = importance)],     wvim_groups_in$importance()[, .(feature, leave_in = importance)],     by = \"feature\" )  comparison_directions #> Key: <feature> #>             feature  leave_out    leave_in #>              <char>      <num>       <num> #> 1: interaction_pair  1.8030094  3.31141622 #> 2:      main_effect -0.1962295 -0.05618814 #> 3:   noise_features -0.3016257 -0.46256742"},{"path":"https://jemus42.github.io/xplainfi/articles/loco.html","id":"practical-considerations","dir":"Articles","previous_headings":"WVIM with Feature Groups","what":"Practical Considerations","title":"LOCO and WVIM","text":"use feature groups: Analyzing categorical variables (group dummy columns together) Testing domain-specific feature sets (e.g., “demographic features”, “behavioral features”) Measuring importance feature engineering transformations collectively Computational cost: WVIM requires retraining model group resampling fold groups, efficient analyzing features individually Use iters_refit parameter control number refits per fold variance estimation","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"scenario-1-interaction-effects","dir":"Articles","previous_headings":"","what":"Scenario 1: Interaction Effects","title":"Perturbation-based Feature Importance Methods","text":"scenario demonstrates marginal methods (PFI) can miss important interaction effects conditional methods (CFI) capture: Causal Structure: key insight: x1 x2 direct effects - affect y interaction (thick red arrow). However, PFI still show important permuting either feature destroys crucial interaction term.","code":"# Generate interaction scenario task_int <- sim_dgp_interactions(n = 1000) data_int <- task_int$data()"},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"analysis","dir":"Articles","previous_headings":"Scenario 1: Interaction Effects","what":"Analysis","title":"Perturbation-based Feature Importance Methods","text":"Let’s analyze interaction scenario \\(y = 2 \\cdot x_1 \\cdot x_2 + x_3 + \\epsilon\\). Note x1 x2 main effects.","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"pfi-on-interactions","dir":"Articles","previous_headings":"Scenario 1: Interaction Effects > Analysis","what":"PFI on Interactions","title":"Perturbation-based Feature Importance Methods","text":"Expected: x1 x2 show high importance PFI permuting either feature destroys interaction term x1×x2, crucial prediction. demonstrates key limitation PFI interactions.","code":"pfi_int <- PFI$new(     task = task_int,     learner = learner,     measure = measure,     resampling = resampling,     iters_perm = 5 )  # Compute importance scores pfi_int$compute() pfi_int$importance(relation = \"difference\") #> Key: <feature> #>    feature  importance #>     <char>       <num> #> 1:  noise1 0.008879842 #> 2:  noise2 0.007115779 #> 3:      x1 2.199752631 #> 4:      x2 2.101568951 #> 5:      x3 2.127262071"},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"cfi-on-interactions","dir":"Articles","previous_headings":"Scenario 1: Interaction Effects > Analysis","what":"CFI on Interactions","title":"Perturbation-based Feature Importance Methods","text":"CFI preserves joint distribution, better capture interaction effect: Expected: CFI show somewhat lower importance x1 x2 compared PFI better preserves interaction structure conditional sampling, providing nuanced importance estimate.","code":"# Create ARF sampler for the interaction task sampler_int = ARFSampler$new(task = task_int, finite_bounds = \"local\")  cfi_int <- CFI$new(     task = task_int,     learner = learner,     measure = measure,     resampling = resampling,     iters_perm = 5,     sampler = sampler_int )  # Compute importance scores cfi_int$compute() cfi_int$importance(relation = \"difference\") #> Key: <feature> #>    feature  importance #>     <char>       <num> #> 1:  noise1 -0.02303386 #> 2:  noise2 -0.03424778 #> 3:      x1  1.03598776 #> 4:      x2  0.80892553 #> 5:      x3  0.72435505"},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"rfi-on-interactions-targeted-conditional-questions","dir":"Articles","previous_headings":"Scenario 1: Interaction Effects > Analysis","what":"RFI on Interactions: Targeted Conditional Questions","title":"Perturbation-based Feature Importance Methods","text":"RFI’s unique strength answering specific conditional questions. Let’s explore happens condition different features: RFI Results: x1 given x2: 2.279 (important x1 condition x2) x2 given x1: 1.897 (important x2 condition x1) x3 given x2: 2.050 (important x3 condition x2) Key insight: pure interaction case (y = 2·x1·x2 + x3), condition one interacting feature, becomes extremely important matter together. demonstrates RFI’s power answer targeted questions like “Given already know x2, much x1 add?”","code":"# RFI conditioning on x2: \"How important is x1 given we know x2?\" rfi_int_x2 <- RFI$new(     task = task_int,     learner = learner,     measure = measure,     resampling = resampling,     conditioning_set = \"x2\", # Condition on x2     iters_perm = 5,     sampler = sampler_int ) rfi_int_x2$compute()  # RFI conditioning on x1: \"How important is x2 given we know x1?\" rfi_int_x1 <- RFI$new(     task = task_int,     learner = learner,     measure = measure,     resampling = resampling,     conditioning_set = \"x1\", # Condition on x1     iters_perm = 5,     sampler = sampler_int ) rfi_int_x1$compute()"},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"comparing-methods-on-interactions","dir":"Articles","previous_headings":"Scenario 1: Interaction Effects > Analysis","what":"Comparing Methods on Interactions","title":"Perturbation-based Feature Importance Methods","text":"Let’s compare methods handle interaction:  RFI Conditional Summary: x1 given x2 importance 2.279, x2 given x1 importance 1.897, x3 given x2 importance 2.050. shows RFI reveals conditional dependencies pure marginal methods miss.","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"key-insights-interaction-effects","dir":"Articles","previous_headings":"Scenario 1: Interaction Effects","what":"Key Insights: Interaction Effects","title":"Perturbation-based Feature Importance Methods","text":"CFI vs PFI Interacting Features Important insight interaction effects: example illustrates crucial subtlety PFI interactions. x1 x2 main effects, PFI still correctly identifies important permuting either feature destroys interaction term x1×x2, crucial prediction. key limitation PFI distinguish main effects interaction effects - measures total contribution including interactions.","code":"# Combine results and calculate ratios comp_int <- rbindlist(list(     pfi_int$importance()[, .(feature, importance, method = \"PFI\")],     cfi_int$importance()[, .(feature, importance, method = \"CFI\")] ))  # Calculate the ratio of CFI to PFI importance for interacting features int_ratio <- dcast(comp_int[feature %in% c(\"x1\", \"x2\")], feature ~ method, value.var = \"importance\") int_ratio[, cfi_pfi_ratio := CFI / PFI] setnames(int_ratio, c(\"PFI\", \"CFI\"), c(\"pfi_importance\", \"cfi_importance\"))  int_ratio |>     knitr::kable(         digits = 3,         caption = \"CFI vs PFI for Interacting Features\"     )"},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"scenario-2-confounding","dir":"Articles","previous_headings":"","what":"Scenario 2: Confounding","title":"Perturbation-based Feature Importance Methods","text":"scenario shows hidden confounders affect importance estimates conditioning can help: Causal Structure: red arrows show confounding paths: hidden confounder creates spurious correlations x1, x2, proxy, y. blue arrows show true direct causal effects. Note independent truly independent (confounding) proxy provides noisy measurement confounder. observable confounder scenario (used later), confounder H included feature dataset, allowing direct conditioning rather relying noisy proxy.  Key insight: hidden confounder creates spurious correlations x1, x2, y (red paths), making appear important truly . RFI conditioning proxy (measures confounder) help isolate true direct effects (blue paths).","code":"# Generate confounding scenario task_conf <- sim_dgp_confounded(n = 1000) data_conf <- task_conf$data()"},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"analysis-1","dir":"Articles","previous_headings":"Scenario 2: Confounding","what":"Analysis","title":"Perturbation-based Feature Importance Methods","text":"Now let’s analyze confounding scenario hidden confounder affects features outcome.","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"pfi-on-confounded-data","dir":"Articles","previous_headings":"Scenario 2: Confounding > Analysis","what":"PFI on Confounded Data","title":"Perturbation-based Feature Importance Methods","text":"","code":"pfi_conf <- PFI$new(     task = task_conf,     learner = learner,     measure = measure,     resampling = resampling,     iters_perm = 5 )  pfi_conf$compute() pfi_conf$importance() #> Key: <feature> #>        feature importance #>         <char>      <num> #> 1: independent   1.548153 #> 2:       proxy   0.232940 #> 3:          x1   1.825439 #> 4:          x2   1.348871"},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"rfi-conditioning-on-proxy","dir":"Articles","previous_headings":"Scenario 2: Confounding > Analysis","what":"RFI Conditioning on Proxy","title":"Perturbation-based Feature Importance Methods","text":"RFI can condition proxy help isolate direct effects:","code":"# Create sampler for confounding task sampler_conf = ARFSampler$new(     task = task_conf,     verbose = FALSE,     finite_bounds = \"local\" )  # RFI conditioning on the proxy rfi_conf <- RFI$new(     task = task_conf,     learner = learner,     measure = measure,     resampling = resampling,     conditioning_set = \"proxy\", # Condition on proxy to reduce confounding     iters_perm = 5,     sampler = sampler_conf )  rfi_conf$compute() rfi_conf$importance() #> Key: <feature> #>        feature importance #>         <char>      <num> #> 1: independent  1.5007251 #> 2:       proxy  0.0000000 #> 3:          x1  0.6516960 #> 4:          x2  0.6011113"},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"also-trying-cfi-for-comparison","dir":"Articles","previous_headings":"Scenario 2: Confounding > Analysis","what":"Also trying CFI for comparison","title":"Perturbation-based Feature Importance Methods","text":"","code":"cfi_conf <- CFI$new(     task = task_conf,     learner = learner,     measure = measure,     resampling = resampling,     iters_perm = 5,     sampler = sampler_conf )  cfi_conf$compute() cfi_conf$importance() #> Key: <feature> #>        feature importance #>         <char>      <num> #> 1: independent  1.5263148 #> 2:       proxy  0.0000000 #> 3:          x1  0.6090428 #> 4:          x2  0.6218997"},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"observable-confounder-scenario","dir":"Articles","previous_headings":"Scenario 2: Confounding > Analysis","what":"Observable Confounder Scenario","title":"Perturbation-based Feature Importance Methods","text":"many real-world situations, confounders actually observable (e.g., demographics, baseline characteristics). Let’s explore RFI performs can condition directly true confounder: Key Results: x1 importance: PFI = 0.695, RFI|confounder = 0.159 x2 importance: PFI = 0.472, RFI|confounder = 0.099 independent importance: PFI = 1.393, RFI|confounder = 1.388 Insight: conditioning true confounder, RFI show reduced importance x1 x2 (since much apparent importance due confounding) independent maintains importance (since ’s truly causally related y).","code":"# Generate scenario where confounder is observable task_conf_obs <- sim_dgp_confounded(n = 1000, hidden = FALSE)  # Now we can condition directly on the true confounder sampler_conf_obs = ARFSampler$new(     task = task_conf_obs,     verbose = FALSE,     finite_bounds = \"local\" )  # RFI conditioning on the true confounder (not just proxy) rfi_conf_obs <- RFI$new(     task = task_conf_obs,     learner = learner,     measure = measure,     resampling = resampling,     conditioning_set = \"confounder\", # Condition on true confounder     iters_perm = 5,     sampler = sampler_conf_obs )  rfi_conf_obs$compute() rfi_conf_obs$importance() #> Key: <feature> #>        feature   importance #>         <char>        <num> #> 1:  confounder  0.000000000 #> 2: independent  1.388445593 #> 3:       proxy -0.005334341 #> 4:          x1  0.158647783 #> 5:          x2  0.099491359  # Compare with PFI on the same data pfi_conf_obs <- PFI$new(     task = task_conf_obs,     learner = learner,     measure = measure,     resampling = resampling,     iters_perm = 5 ) pfi_conf_obs$compute() pfi_conf_obs$importance() #> Key: <feature> #>        feature importance #>         <char>      <num> #> 1:  confounder 1.61111512 #> 2: independent 1.39348872 #> 3:       proxy 0.03480209 #> 4:          x1 0.69491306 #> 5:          x2 0.47183007"},{"path":[]},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"key-insights-confounding-effects","dir":"Articles","previous_headings":"Scenario 2: Confounding","what":"Key Insights: Confounding Effects","title":"Perturbation-based Feature Importance Methods","text":"Effect Conditioning Proxy Confounded Scenario confounding scenario, observed: PFI shows confounded effects: Without accounting confounders, PFI overestimates importance x1 x2 due spurious correlation y hidden confounder. RFI conditioning proxy reduces bias: conditioning proxy (noisy measurement confounder), RFI can partially isolate direct effects, though confounding remains due measurement error. RFI conditioning true confounder removes bias: confounder observable can condition directly , RFI dramatically reduces apparent importance x1 x2, revealing true direct effects. CFI partially accounts confounding: conditional sampling, CFI captures confounding structure target specific confounders like RFI can.","code":"# Show how conditioning affects importance estimates conf_wide <- dcast(comp_conf_long, feature ~ method, value.var = \"importance\") conf_summary <- conf_wide[, .(     feature,     pfi_importance = round(PFI, 3),     cfi_importance = round(CFI, 3),     rfi_proxy_importance = round(RFI, 3),     pfi_rfi_diff = round(PFI - RFI, 3) )]  conf_summary |>     knitr::kable(         caption = \"Effect of Conditioning on Proxy in Confounded Scenario\"     )"},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"scenario-3-correlated-features","dir":"Articles","previous_headings":"","what":"Scenario 3: Correlated Features","title":"Perturbation-based Feature Importance Methods","text":"scenario demonstrates fundamental difference marginal conditional methods features highly correlated: Causal Structure: Key feature: x1 x2 nearly identical (correlation ≈ 0.999) x1 causal effect y. x2 spurious predictor - highly correlated causal feature causal .","code":"# Generate correlated features scenario task_cor <- sim_dgp_correlated(n = 1000) data_cor <- task_cor$data()"},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"analysis-2","dir":"Articles","previous_headings":"Scenario 3: Correlated Features","what":"Analysis","title":"Perturbation-based Feature Importance Methods","text":"Let’s analyze different methods handle highly correlated features:","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"pfi-on-correlated-features","dir":"Articles","previous_headings":"Scenario 3: Correlated Features > Analysis","what":"PFI on Correlated Features","title":"Perturbation-based Feature Importance Methods","text":"Expected: PFI show high importance x1 x2, even though x1 true causal effect. happens x2 highly correlated x1, permuting x2 destroys predictive information x1.","code":"pfi_cor <- PFI$new(     task = task_cor,     learner = learner,     measure = measure,     resampling = resampling,     iters_perm = 5 )  pfi_cor$compute() pfi_cor$importance() #> Key: <feature> #>    feature   importance #>     <char>        <num> #> 1:      x1 2.1217370885 #> 2:      x2 1.9991372996 #> 3:      x3 1.6723689010 #> 4:      x4 0.0004443967"},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"cfi-on-correlated-features","dir":"Articles","previous_headings":"Scenario 3: Correlated Features > Analysis","what":"CFI on Correlated Features","title":"Perturbation-based Feature Importance Methods","text":"Expected: CFI show high importance x1 (true causal feature) near-zero importance x2 (spurious correlated feature) conditional sampling preserves correlation structure can distinguish causal spurious predictors.","code":"# Create ARF sampler for correlated task sampler_cor = ARFSampler$new(task = task_cor, finite_bounds = \"local\")  cfi_cor <- CFI$new(     task = task_cor,     learner = learner,     measure = measure,     resampling = resampling,     iters_perm = 5,     sampler = sampler_cor )  cfi_cor$compute() cfi_cor$importance() #> Key: <feature> #>    feature    importance #>     <char>         <num> #> 1:      x1  0.1168234280 #> 2:      x2  0.0874597383 #> 3:      x3  1.1822715740 #> 4:      x4 -0.0003321821"},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"rfi-to-answer-conditional-questions","dir":"Articles","previous_headings":"Scenario 3: Correlated Features > Analysis","what":"RFI to Answer Conditional Questions","title":"Perturbation-based Feature Importance Methods","text":"RFI Results: - x2 given x1: 0.079 (much x2 add already know x1?) - x1 given x2: 0.107 (much x1 add already know x2?) Expected: conditioning x1, importance x2 near zero (vice versa) ’re almost identical - knowing one tells almost everything .","code":"# RFI conditioning on x1: \"How important is x2 given we know x1?\" rfi_cor_x1 <- RFI$new(     task = task_cor,     learner = learner,     measure = measure,     resampling = resampling,     conditioning_set = \"x1\",     iters_perm = 5,     sampler = sampler_cor ) rfi_cor_x1$compute()  # RFI conditioning on x2: \"How important is x1 given we know x2?\" rfi_cor_x2 <- RFI$new(     task = task_cor,     learner = learner,     measure = measure,     resampling = resampling,     conditioning_set = \"x2\",     iters_perm = 5,     sampler = sampler_cor ) rfi_cor_x2$compute()"},{"path":[]},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"key-insights-correlated-features","dir":"Articles","previous_headings":"Scenario 3: Correlated Features","what":"Key Insights: Correlated Features","title":"Perturbation-based Feature Importance Methods","text":"CFI vs PFI Highly Correlated Features correlated features scenario: PFI overestimates importance spurious features: PFI assigns high importance x1 (causal) x2 (spurious) ’re highly correlated. Permuting x2 destroys information x1, making x2 appear important even though causal effect. CFI correctly identifies causal features: preserving correlation structure conditional sampling, CFI can distinguish x1 (truly causal) x2 (merely correlated), assigning high importance x1. RFI reveals redundancy: conditioning x1, additional importance x2 near zero (vice versa), correctly identifying redundancy prediction. Practical implication: PFI mislead think features important. CFI correctly shows x1 truly important, x2 just along ride due correlation.","code":"cor_ratio |>     knitr::kable(         digits = 3,         caption = \"CFI vs PFI for Highly Correlated Features\"     )"},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"scenario-4-independent-features-baseline","dir":"Articles","previous_headings":"","what":"Scenario 4: Independent Features (Baseline)","title":"Perturbation-based Feature Importance Methods","text":"provide baseline comparison, let’s examine scenario feature importance methods produce similar results: Causal Structure: simplest scenario: features independent, interactions, confounding. feature direct effect y (effect case noise).","code":"# Generate independent features scenario task_ind <- sim_dgp_independent(n = 1000) data_ind <- task_ind$data()"},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"running-all-methods-on-independent-features","dir":"Articles","previous_headings":"Scenario 4: Independent Features (Baseline)","what":"Running All Methods on Independent Features","title":"Perturbation-based Feature Importance Methods","text":"First PFI: Now CFI ARF sampler: RFI empty conditioning set, basically equivalent PFI different sampler: now visualize:","code":"# PFI pfi_ind <- PFI$new(     task = task_ind,     learner = learner,     measure = measure,     resampling = resampling,     iters_perm = 5 ) pfi_ind$compute() sampler_ind = ARFSampler$new(task = task_ind, finite_bounds = \"local\") cfi_ind <- CFI$new(     task = task_ind,     learner = learner,     measure = measure,     resampling = resampling,     iters_perm = 5,     sampler = sampler_ind ) cfi_ind$compute() rfi_ind <- RFI$new(     task = task_ind,     learner = learner,     measure = measure,     resampling = resampling,     conditioning_set = character(0), # Empty set     iters_perm = 5,     sampler = sampler_ind ) rfi_ind$compute()"},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"agreement-between-methods","dir":"Articles","previous_headings":"Scenario 4: Independent Features (Baseline)","what":"Agreement Between Methods","title":"Perturbation-based Feature Importance Methods","text":"Method Agreement Independent Features Key insight: independent features complex relationships, three methods (PFI, CFI, RFI) produce similar importance estimates. confirms differences observe Scenarios 1 2 truly due interactions confounding, artifacts methods .","code":"# Calculate coefficient of variation for each feature across methods comp_ind_wide <- dcast(comp_ind_long, feature ~ method, value.var = \"importance\") comp_ind_wide[,     `:=`(         mean_importance = rowMeans(.SD),         sd_importance = apply(.SD, 1, sd),         cv = apply(.SD, 1, sd) / rowMeans(.SD)     ),     .SDcols = c(\"PFI\", \"CFI\", \"RFI\") ]  comp_ind_wide[, .(     feature,     mean_importance = round(mean_importance, 3),     cv = round(cv, 3),     agreement = ifelse(cv < 0.1, \"High\", ifelse(cv < 0.2, \"Moderate\", \"Low\")) )] |>     knitr::kable(         caption = \"Method Agreement on Independent Features\",         col.names = c(\"Feature\", \"Mean Importance\", \"Coef. of Variation\", \"Agreement Level\")     )"},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"key-insights-independent-features","dir":"Articles","previous_headings":"Scenario 4: Independent Features (Baseline)","what":"Key Insights: Independent Features","title":"Perturbation-based Feature Importance Methods","text":"baseline scenario independent features: methods agree: PFI, CFI, RFI produce nearly identical importance estimates features truly independent. Validates methodology: agreement methods confirms differences scenarios due data structure, method artifacts. Noise correctly identified: methods correctly assign near-zero importance noise features.","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"variance-estimation-and-confidence-intervals","dir":"Articles","previous_headings":"","what":"Variance Estimation and Confidence Intervals","title":"Perturbation-based Feature Importance Methods","text":"using resampling, xplainfi can compute confidence intervals importance scores quantify uncertainty. However, standard variance calculations produce confidence intervals narrow observations appear multiple resampling folds.","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"example-corrected-vs-uncorrected-confidence-intervals","dir":"Articles","previous_headings":"Variance Estimation and Confidence Intervals","what":"Example: Corrected vs Uncorrected Confidence Intervals","title":"Perturbation-based Feature Importance Methods","text":"","code":"# Demonstrate variance correction with subsampling task_var <- sim_dgp_independent(n = 300)  pfi_var <- PFI$new(     task = task_var,     learner = lrn(\"regr.ranger\", num.trees = 100),     measure = msr(\"regr.mse\"),     resampling = rsmp(\"subsampling\", repeats = 10, ratio = 0.8),     iters_perm = 5 )  pfi_var$compute()  # Compare variance methods imp_raw <- pfi_var$importance(variance_method = \"raw\") # Uncorrected (too narrow!) imp_corrected <- pfi_var$importance(variance_method = \"nadeau_bengio\") # Corrected  # Show the difference for important features imp_raw[grepl(\"^important\", feature), .(feature, importance, conf_lower, conf_upper)] #> Key: <feature> #>       feature importance conf_lower conf_upper #>        <char>      <num>      <num>      <num> #> 1: important1  4.9750748  4.2935919  5.6565577 #> 2: important2  1.1786749  1.0487901  1.3085597 #> 3: important3  0.2846478  0.2461569  0.3231388 imp_corrected[grepl(\"^important\", feature), .(feature, importance, conf_lower, conf_upper)] #> Key: <feature> #>       feature importance conf_lower conf_upper #>        <char>      <num>      <num>      <num> #> 1: important1  4.9750748  3.7001371  6.2500125 #> 2: important2  1.1786749  0.9356827  1.4216671 #> 3: important3  0.2846478  0.2126379  0.3566578"},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"practical-recommendations","dir":"Articles","previous_headings":"Variance Estimation and Confidence Intervals","what":"Practical Recommendations","title":"Perturbation-based Feature Importance Methods","text":"Use variance_method = \"nadeau_bengio\" using bootstrap subsampling improved (yet still flawed) confidence intervals default variance_method = \"none\" returns point estimates without uncertainty Never use variance_method = \"raw\" actual results, uncorrected intervals misleadingly narrow","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"key-takeaways","dir":"Articles","previous_headings":"","what":"Key Takeaways","title":"Perturbation-based Feature Importance Methods","text":"four scenarios, ’ve demonstrated: PFI simple fast can miss interaction effects, underestimate importance correlated features, affected confounding CFI captures feature dependencies interactions conditional sampling, correctly handling correlated features RFI allows targeted conditioning isolate specific relationships reveal redundancy Use PFI features believed independent (Scenario 4) want quick baseline importance ranking Use CFI suspect feature interactions, correlations, dependencies (Scenarios 1 & 3) want sophisticated analysis respects feature relationships Use RFI specific conditional questions: “important feature X given already know feature Y?” (Scenarios 1, 2 & 3). Essential feature selection understanding incremental value. methods benefit cross-validation multiple permutation iterations stability ARF-based conditional sampling (used CFI/RFI) computationally intensive marginal sampling choice conditioning set RFI requires domain knowledge","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/perturbation-importance.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further Reading","title":"Perturbation-based Feature Importance Methods","text":"details methods theoretical foundations, see: Breiman (2001) original PFI formulation Strobl et al. (2008) limitations PFI correlated features Watson & Wright (2021) conditional sampling ARF König et al. (2021) relative feature importance Ewald et al. (2024) comprehensive review feature importance methods","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/sage-methods.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Shapley Additive Global Importance (SAGE)","text":"Shapley Additive Global Importance (SAGE) feature importance method based cooperative game theory uses Shapley values fairly distribute total prediction performance among features. Unlike permutation-based methods measure drop performance features perturbed, SAGE measures much feature contributes model’s overall performance marginalizing (removing) features. key insight SAGE provides complete decomposition model’s performance: sum SAGE values equals difference model’s performance performance features marginalized. xplainfi provides two implementations SAGE: MarginalSAGE: Marginalizes features independently (standard SAGE) ConditionalSAGE: Marginalizes features conditionally using ARF sampling","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/sage-methods.html","id":"demonstration-with-correlated-features","dir":"Articles","previous_headings":"","what":"Demonstration with Correlated Features","title":"Shapley Additive Global Importance (SAGE)","text":"showcase difference Marginal Conditional SAGE, ’ll use sim_dgp_correlated() function creates highly correlated features. similar PFI CFI behave differently correlated features. Model: \\[X_1 \\sim N(0,1)\\] \\[X_2 = X_1 + \\varepsilon_2, \\quad \\varepsilon_2 \\sim N(0, 0.05^2)\\] \\[X_3 \\sim N(0,1), \\quad X_4 \\sim N(0,1)\\] \\[Y = 2 \\cdot X_1 + X_3 + \\varepsilon\\] \\(\\varepsilon \\sim N(0, 0.2^2)\\). Key properties: x1 direct causal effect y (β=2.0) x2 highly correlated x1 (r ≈ 0.999) causal effect y x3 independent causal effect (β=1.0) x4 independent noise (β=0) Expected behavior: Marginal SAGE: show high importance x1 x2 due correlation, even though x2 causal effect Conditional SAGE: show high importance x1 near-zero importance x2 (correctly identifying spurious predictor) Let’s set learner measure. ’ll use random forest instantiate resampling ensure methods see data:","code":"set.seed(123) task = sim_dgp_correlated(n = 1000)  # Check the correlation structure task_data = task$data() correlation_matrix = cor(task_data[, c(\"x1\", \"x2\", \"x3\", \"x4\")]) round(correlation_matrix, 3) #>        x1     x2     x3     x4 #> x1  1.000  0.999 -0.019 -0.003 #> x2  0.999  1.000 -0.018 -0.003 #> x3 -0.019 -0.018  1.000  0.051 #> x4 -0.003 -0.003  0.051  1.000 learner = lrn(\"regr.ranger\") measure = msr(\"regr.mse\") resampling = rsmp(\"holdout\") resampling$instantiate(task)"},{"path":"https://jemus42.github.io/xplainfi/articles/sage-methods.html","id":"marginal-sage","dir":"Articles","previous_headings":"","what":"Marginal SAGE","title":"Shapley Additive Global Importance (SAGE)","text":"Marginal SAGE marginalizes features independently averaging predictions reference dataset. standard SAGE implementation described original paper. Let’s visualize results:  can also keep track SAGE value approximation across permutations:","code":"# Create Marginal SAGE instance marginal_sage = MarginalSAGE$new(     task = task,     learner = learner,     measure = measure,     resampling = resampling,     n_permutations = 30L, # More permutations for stable results     max_reference_size = 100L,     batch_size = 5000L )  # Compute SAGE values marginal_sage$compute() marginal_sage$plot_convergence() #> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. #> ℹ Please use `linewidth` instead. #> ℹ The deprecated feature was likely used in the xplainfi package. #>   Please report the issue at <https://github.com/jemus42/xplainfi/issues>. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated."},{"path":"https://jemus42.github.io/xplainfi/articles/sage-methods.html","id":"conditional-sage","dir":"Articles","previous_headings":"","what":"Conditional SAGE","title":"Shapley Additive Global Importance (SAGE)","text":"Conditional SAGE uses conditional sampling (via ARF default) marginalize features preserving dependencies remaining features. can provide different insights, especially features correlated. Let’s visualize conditional SAGE results:","code":"# Create Conditional SAGE instance conditional_sage = ConditionalSAGE$new(     task = task,     learner = learner,     measure = measure,     resampling = resampling,     n_permutations = 30L,     max_reference_size = 100L ) #> ℹ No <ConditionalSampler> provided, using <ARFSampler> with default settings.  # Compute SAGE values conditional_sage$compute(batch_size = 5000L) conditional_sage$plot_convergence()"},{"path":"https://jemus42.github.io/xplainfi/articles/sage-methods.html","id":"comparison-of-methods","dir":"Articles","previous_headings":"","what":"Comparison of Methods","title":"Shapley Additive Global Importance (SAGE)","text":"Let’s compare two SAGE methods side side:  Let’s also create correlation plot see similar rankings :","code":"#> `geom_smooth()` using formula = 'y ~ x'"},{"path":"https://jemus42.github.io/xplainfi/articles/sage-methods.html","id":"interpretation","dir":"Articles","previous_headings":"Comparison of Methods","what":"Interpretation","title":"Shapley Additive Global Importance (SAGE)","text":"results demonstrate key difference marginal conditional SAGE: Marginal SAGE treats feature independently, highly correlated features x1 x2 receive substantial importance scores reflecting individual marginal contributions. Conditional SAGE accounts feature dependencies conditional sampling. marginalizing x1, properly conditions x2 (vice versa), leading lower importance scores correlated features since provide redundant information. Independent feature x3 shows similar importance methods since doesn’t depend features. Noise feature x4 correctly receives near-zero importance methods. pattern mirrors difference PFI CFI: marginal methods show inflated importance correlated features, conditional methods provide accurate assessment feature’s unique contribution.","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/sage-methods.html","id":"comparison-with-pfi-and-cfi","dir":"Articles","previous_headings":"","what":"Comparison with PFI and CFI","title":"Shapley Additive Global Importance (SAGE)","text":"reference, let’s compare SAGE methods analogous PFI CFI methods data:  Key Observations: Marginal methods (PFI, Marginal SAGE) assign high importance correlated features x1 x2 Conditional methods (CFI, Conditional SAGE) reduce importance correlated features, accounting redundancy Independent feature x3 receives consistent importance across methods Noise feature x4 correctly identified unimportant methods demonstrates marginal vs conditional distinction fundamental concept applies across different importance method families.","code":"# Quick PFI and CFI comparison for context pfi = PFI$new(task, learner, measure) #> ℹ No <Resampling> provided #> Using `resampling = rsmp(\"holdout\")` with default `ratio = 0.67`. cfi = CFI$new(task, learner, measure) #> ℹ No <ConditionalSampler> provided, using <ARFSampler> with default settings. #> ℹ No <Resampling> provided #> Using `resampling = rsmp(\"holdout\")` with default `ratio = 0.67`.  pfi$compute() cfi$compute() pfi_results = pfi$importance() cfi_results = cfi$importance()  # Create comparison data frame method_comparison = data.frame(     feature = rep(c(\"x1\", \"x2\", \"x3\", \"x4\"), 4),     importance = c(         pfi_results$importance,         cfi_results$importance,         marginal_results$importance,         conditional_results$importance     ),     method = rep(c(\"PFI\", \"CFI\", \"Marginal SAGE\", \"Conditional SAGE\"), each = 4),     approach = rep(c(\"Marginal\", \"Conditional\", \"Marginal\", \"Conditional\"), each = 4) )  # Create comparison plot ggplot(method_comparison, aes(x = feature, y = importance, fill = method)) +     geom_col(position = \"dodge\", alpha = 0.8) +     scale_fill_manual(         values = c(             \"PFI\" = \"lightblue\",             \"CFI\" = \"blue\",             \"Marginal SAGE\" = \"lightcoral\",             \"Conditional SAGE\" = \"darkred\"         )     ) +     labs(         title = \"Comparison: PFI/CFI vs Marginal/Conditional SAGE\",         subtitle = \"Both pairs show similar patterns: marginal methods inflate correlated feature importance\",         x = \"Features\",         y = \"Importance Value\",         fill = \"Method\"     ) +     theme_minimal(base_size = 14) +     theme(axis.text.x = element_text(angle = 45, hjust = 1))"},{"path":"https://jemus42.github.io/xplainfi/articles/simulation-settings.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Simulation Settings for Feature Importance Methods","text":"xplainfi package provides several data generating processes (DGPs) designed illustrate specific strengths weaknesses different feature importance methods. DGP focuses one primary challenge make differences methods clear. article provides comprehensive overview simulation settings, including mathematical formulations causal structures visualized directed acyclic graphs (DAGs).","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/simulation-settings.html","id":"overview-of-simulation-settings","dir":"Articles","previous_headings":"","what":"Overview of Simulation Settings","title":"Simulation Settings for Feature Importance Methods","text":"Overview simulation settings expected method behavior","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/simulation-settings.html","id":"correlated-features-dgp","dir":"Articles","previous_headings":"","what":"1. Correlated Features DGP","title":"Simulation Settings for Feature Importance Methods","text":"DGP creates highly correlated spurious predictor illustrate fundamental difference marginal conditional importance methods.","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/simulation-settings.html","id":"mathematical-model","dir":"Articles","previous_headings":"1. Correlated Features DGP","what":"Mathematical Model","title":"Simulation Settings for Feature Importance Methods","text":"\\[X_1 \\sim N(0,1)\\] \\[X_2 = X_1 + \\varepsilon_2, \\quad \\varepsilon_2 \\sim N(0, 0.05^2)\\] \\[X_3 \\sim N(0,1), \\quad X_4 \\sim N(0,1)\\] \\[Y = 2 \\cdot X_1 + X_3 + \\varepsilon\\] \\(\\varepsilon \\sim N(0, 0.2^2)\\).","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/simulation-settings.html","id":"causal-structure","dir":"Articles","previous_headings":"1. Correlated Features DGP","what":"Causal Structure","title":"Simulation Settings for Feature Importance Methods","text":"DAG correlated features DGP","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/simulation-settings.html","id":"usage-example","dir":"Articles","previous_headings":"1. Correlated Features DGP","what":"Usage Example","title":"Simulation Settings for Feature Importance Methods","text":"","code":"set.seed(123) task <- sim_dgp_correlated(n = 500)  # Check correlation between X1 and X2 cor(task$data()[, c(\"x1\", \"x2\")]) #>           x1        x2 #> x1 1.0000000 0.9986492 #> x2 0.9986492 1.0000000  # True coefficients: x1=2.0, x2=0, x3=1.0, x4=0 # Note: x2 is highly correlated with x1 but has NO causal effect!"},{"path":"https://jemus42.github.io/xplainfi/articles/simulation-settings.html","id":"expected-behavior","dir":"Articles","previous_headings":"1. Correlated Features DGP","what":"Expected Behavior","title":"Simulation Settings for Feature Importance Methods","text":"Marginal methods (PFI, Marginal SAGE): falsely assign high importance x2 permuting breaks correlation x1, creating unrealistic data confuses model Conditional methods (CFI, Conditional SAGE): correctly assign near-zero importance x2 conditional sampling preserves correlation, revealing x2 adds information beyond x1 provides Key insight: x2 spurious predictor - appears predictive due correlation x1 causal effect y","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/simulation-settings.html","id":"mediated-effects-dgp","dir":"Articles","previous_headings":"","what":"2. Mediated Effects DGP","title":"Simulation Settings for Feature Importance Methods","text":"DGP demonstrates difference total direct causal effects. features affect outcome mediators.","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/simulation-settings.html","id":"mathematical-model-1","dir":"Articles","previous_headings":"2. Mediated Effects DGP","what":"Mathematical Model","title":"Simulation Settings for Feature Importance Methods","text":"\\[\\text{exposure} \\sim N(0,1), \\quad \\text{direct} \\sim N(0,1)\\] \\[\\text{mediator} = 0.8 \\cdot \\text{exposure} + 0.6 \\cdot \\text{direct} + \\varepsilon_m\\] \\[Y = 1.5 \\cdot \\text{mediator} + 0.5 \\cdot \\text{direct} + \\varepsilon\\] \\(\\varepsilon_m \\sim N(0, 0.3^2)\\) \\(\\varepsilon \\sim N(0, 0.2^2)\\).","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/simulation-settings.html","id":"causal-structure-1","dir":"Articles","previous_headings":"2. Mediated Effects DGP","what":"Causal Structure","title":"Simulation Settings for Feature Importance Methods","text":"DAG mediated effects DGP","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/simulation-settings.html","id":"usage-example-1","dir":"Articles","previous_headings":"2. Mediated Effects DGP","what":"Usage Example","title":"Simulation Settings for Feature Importance Methods","text":"","code":"set.seed(123) task <- sim_dgp_mediated(n = 500)  # Calculate total effect of exposure # Total effect = 0.8 * 1.5 = 1.2 (through mediator) # Direct effect = 0 (no direct path to Y)"},{"path":"https://jemus42.github.io/xplainfi/articles/simulation-settings.html","id":"expected-behavior-1","dir":"Articles","previous_headings":"2. Mediated Effects DGP","what":"Expected Behavior","title":"Simulation Settings for Feature Importance Methods","text":"PFI: Shows total effects (exposure appears important effect ≈ 1.2) CFI: Shows direct effects (exposure appears unimportant conditioning mediator) RFI mediator: show direct effects similar CFI","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/simulation-settings.html","id":"confounding-dgp","dir":"Articles","previous_headings":"","what":"3. Confounding DGP","title":"Simulation Settings for Feature Importance Methods","text":"DGP includes confounder affects features outcome.","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/simulation-settings.html","id":"mathematical-model-2","dir":"Articles","previous_headings":"3. Confounding DGP","what":"Mathematical Model","title":"Simulation Settings for Feature Importance Methods","text":"\\[H \\sim N(0,1) \\quad \\text{(confounder)}\\] \\[X_1 = H + \\varepsilon_1, \\quad X_2 = H + \\varepsilon_2\\] \\[\\text{proxy} = H + \\varepsilon_p, \\quad \\text{independent} \\sim N(0,1)\\] \\[Y = H + 0.5 \\cdot X_1 + 0.5 \\cdot X_2 + \\text{independent} + \\varepsilon\\] \\(\\varepsilon \\sim N(0, 0.5^2)\\) independently.","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/simulation-settings.html","id":"causal-structure-2","dir":"Articles","previous_headings":"3. Confounding DGP","what":"Causal Structure","title":"Simulation Settings for Feature Importance Methods","text":"DAG confounding DGP","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/simulation-settings.html","id":"usage-example-2","dir":"Articles","previous_headings":"3. Confounding DGP","what":"Usage Example","title":"Simulation Settings for Feature Importance Methods","text":"","code":"set.seed(123) # Hidden confounder scenario (default) task_hidden <- sim_dgp_confounded(n = 500, hidden = TRUE) task_hidden$feature_names # proxy available but not confounder #> [1] \"independent\" \"proxy\"       \"x1\"          \"x2\"  # Observable confounder scenario task_observed <- sim_dgp_confounded(n = 500, hidden = FALSE) task_observed$feature_names # both confounder and proxy available #> [1] \"confounder\"  \"independent\" \"proxy\"       \"x1\"          \"x2\""},{"path":"https://jemus42.github.io/xplainfi/articles/simulation-settings.html","id":"expected-behavior-2","dir":"Articles","previous_headings":"3. Confounding DGP","what":"Expected Behavior","title":"Simulation Settings for Feature Importance Methods","text":"PFI: show inflated importance x1 x2 due confounding CFI: partially account confounding conditional sampling RFI conditioning proxy: reduce confounding bias","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/simulation-settings.html","id":"interaction-effects-dgp","dir":"Articles","previous_headings":"","what":"4. Interaction Effects DGP","title":"Simulation Settings for Feature Importance Methods","text":"DGP demonstrates pure interaction effect features main effects.","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/simulation-settings.html","id":"mathematical-model-3","dir":"Articles","previous_headings":"4. Interaction Effects DGP","what":"Mathematical Model","title":"Simulation Settings for Feature Importance Methods","text":"\\[Y = 2 \\cdot X_1 \\cdot X_2 + X_3 + \\varepsilon\\] \\(X_j \\sim N(0,1)\\) independently \\(\\varepsilon \\sim N(0, 0.5^2)\\).","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/simulation-settings.html","id":"causal-structure-3","dir":"Articles","previous_headings":"4. Interaction Effects DGP","what":"Causal Structure","title":"Simulation Settings for Feature Importance Methods","text":"DAG interaction effects DGP","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/simulation-settings.html","id":"usage-example-3","dir":"Articles","previous_headings":"4. Interaction Effects DGP","what":"Usage Example","title":"Simulation Settings for Feature Importance Methods","text":"","code":"set.seed(123) task <- sim_dgp_interactions(n = 500)  # Note: X1 and X2 have NO main effects # Their importance comes ONLY through their interaction"},{"path":"https://jemus42.github.io/xplainfi/articles/simulation-settings.html","id":"expected-behavior-3","dir":"Articles","previous_headings":"4. Interaction Effects DGP","what":"Expected Behavior","title":"Simulation Settings for Feature Importance Methods","text":"PFI: assign near-zero importance x1 x2 (marginal effect) CFI: capture interaction assign high importance x1 x2 LOCO: May show high importance x1 x2 (removing either breaks interaction) LOCI: show near-zero importance x1 x2 (individually useless)","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/simulation-settings.html","id":"independent-features-dgp-baseline","dir":"Articles","previous_headings":"","what":"5. Independent Features DGP (Baseline)","title":"Simulation Settings for Feature Importance Methods","text":"baseline scenario features independent effects additive. importance methods give similar results.","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/simulation-settings.html","id":"mathematical-model-4","dir":"Articles","previous_headings":"5. Independent Features DGP (Baseline)","what":"Mathematical Model","title":"Simulation Settings for Feature Importance Methods","text":"\\[Y = 2.0 \\cdot X_1 + 1.0 \\cdot X_2 + 0.5 \\cdot X_3 + \\varepsilon\\] \\(X_j \\sim N(0,1)\\) independently \\(\\varepsilon \\sim N(0, 0.2^2)\\).","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/simulation-settings.html","id":"causal-structure-4","dir":"Articles","previous_headings":"5. Independent Features DGP (Baseline)","what":"Causal Structure","title":"Simulation Settings for Feature Importance Methods","text":"DAG independent features DGP","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/simulation-settings.html","id":"usage-example-4","dir":"Articles","previous_headings":"5. Independent Features DGP (Baseline)","what":"Usage Example","title":"Simulation Settings for Feature Importance Methods","text":"","code":"set.seed(123) task <- sim_dgp_independent(n = 500)  # All methods should rank features consistently: # important1 > important2 > important3 > unimportant1,2 ≈ 0"},{"path":"https://jemus42.github.io/xplainfi/articles/simulation-settings.html","id":"expected-behavior-4","dir":"Articles","previous_headings":"5. Independent Features DGP (Baseline)","what":"Expected Behavior","title":"Simulation Settings for Feature Importance Methods","text":"methods: rank features consistently true effect sizes Ground truth: important1 (2.0) > important2 (1.0) > important3 (0.5) > unimportant1,2 (0)","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/simulation-settings.html","id":"ewald-et-al--2024-dgp","dir":"Articles","previous_headings":"","what":"6. Ewald et al. (2024) DGP","title":"Simulation Settings for Feature Importance Methods","text":"Reproduces data generating process Ewald et al. (2024) benchmarking feature importance methods. Includes correlated features interaction effects.","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/simulation-settings.html","id":"mathematical-model-5","dir":"Articles","previous_headings":"6. Ewald et al. (2024) DGP","what":"Mathematical Model","title":"Simulation Settings for Feature Importance Methods","text":"\\[X_1, X_3, X_5 \\sim \\text{Uniform}(0,1)\\] \\[X_2 = X_1 + \\varepsilon_2, \\quad \\varepsilon_2 \\sim N(0, 0.001)\\] \\[X_4 = X_3 + \\varepsilon_4, \\quad \\varepsilon_4 \\sim N(0, 0.1)\\] \\[Y = X_4 + X_5 + X_4 \\cdot X_5 + \\varepsilon, \\quad \\varepsilon \\sim N(0, 0.1)\\]","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/simulation-settings.html","id":"causal-structure-5","dir":"Articles","previous_headings":"6. Ewald et al. (2024) DGP","what":"Causal Structure","title":"Simulation Settings for Feature Importance Methods","text":"DAG Ewald et al. (2024) DGP","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/simulation-settings.html","id":"usage-example-5","dir":"Articles","previous_headings":"6. Ewald et al. (2024) DGP","what":"Usage Example","title":"Simulation Settings for Feature Importance Methods","text":"","code":"sim_dgp_ewald(n = 500) #>  #> ── <TaskRegr> (500x6) ────────────────────────────────────────────────────────── #> • Target: y #> • Properties: - #> • Features (5): #>   • dbl (5): x1, x2, x3, x4, x5"},{"path":"https://jemus42.github.io/xplainfi/articles/xplainfi.html","id":"core-concepts","dir":"Articles","previous_headings":"","what":"Core Concepts","title":"Getting Started with xplainfi","text":"Feature importance methods xplainfi answer different related questions: much feature contribute model performance? (Permutation Feature Importance) happens remove features retrain? (Leave-One-Covariate-) much feature contribute individually? (Leave-One-Covariate-) features depend ? (Conditional Relative methods) methods share common interface built mlr3, making easy use task, learner, measure, resampling strategy. general pattern call $compute() calculate importance (always re-computes), $importance() retrieve aggregated results, intermediate results available $scores.","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/xplainfi.html","id":"basic-example","dir":"Articles","previous_headings":"","what":"Basic Example","title":"Getting Started with xplainfi","text":"Let’s use Friedman1 task, provides ideal setup demonstrating feature importance methods known ground truth: task 300 observations 10 features. Features important1 important5 truly affect target, unimportant1 unimportant5 pure noise. ’ll use random forest learner cross-validation stable estimates. target function : \\(y = 10 * \\operatorname{sin}(\\pi * x_1 * x_2) + 20 * (x_3 - 0.5)^2 + 10 * x_4 + 5 * x_5 + \\epsilon\\)","code":"task <- tgen(\"friedman1\")$generate(n = 300) learner <- lrn(\"regr.ranger\", num.trees = 100) measure <- msr(\"regr.mse\") resampling <- rsmp(\"cv\", folds = 3)"},{"path":"https://jemus42.github.io/xplainfi/articles/xplainfi.html","id":"permutation-feature-importance-pfi","dir":"Articles","previous_headings":"","what":"Permutation Feature Importance (PFI)","title":"Getting Started with xplainfi","text":"PFI straightforward method: feature, permute (shuffle) values measure much model performance deteriorates. important features cause larger performance drops shuffled. importance column shows performance difference feature permuted. Higher values indicate important features. stable estimates, can use multiple permutation iterations per resampling fold: can also use ratio instead difference importance calculation, meaning unimportant feature now expected get importance score 1 rather 0:","code":"pfi <- PFI$new(     task = task,     learner = learner,     measure = measure,     resampling = resampling )  pfi$compute() pfi$importance() #> Key: <feature> #>          feature   importance #>           <char>        <num> #>  1:   important1  4.858724892 #>  2:   important2  8.155693005 #>  3:   important3  1.109254345 #>  4:   important4 10.784727349 #>  5:   important5  2.395793708 #>  6: unimportant1  0.009618005 #>  7: unimportant2  0.080903445 #>  8: unimportant3  0.044057887 #>  9: unimportant4 -0.082032243 #> 10: unimportant5 -0.137666350 pfi_stable <- PFI$new(     task = task,     learner = learner,     measure = measure,     resampling = resampling,     iters_perm = 5 )  pfi_stable$compute() pfi_stable$importance() #> Key: <feature> #>          feature  importance #>           <char>       <num> #>  1:   important1  5.33911229 #>  2:   important2  7.05857192 #>  3:   important3  1.05836425 #>  4:   important4 13.82458524 #>  5:   important5  1.87787034 #>  6: unimportant1 -0.03467317 #>  7: unimportant2  0.02760776 #>  8: unimportant3  0.07803544 #>  9: unimportant4  0.03031981 #> 10: unimportant5 -0.03469244 pfi_stable$importance(relation = \"ratio\") #> Key: <feature> #>          feature importance #>           <char>      <num> #>  1:   important1  1.8111892 #>  2:   important2  2.0655617 #>  3:   important3  1.1602020 #>  4:   important4  3.0854616 #>  5:   important5  1.2852320 #>  6: unimportant1  0.9943552 #>  7: unimportant2  1.0039539 #>  8: unimportant3  1.0101863 #>  9: unimportant4  1.0042183 #> 10: unimportant5  0.9945303"},{"path":"https://jemus42.github.io/xplainfi/articles/xplainfi.html","id":"leave-one-covariate-out-loco","dir":"Articles","previous_headings":"","what":"Leave-One-Covariate-Out (LOCO)","title":"Getting Started with xplainfi","text":"LOCO measures importance retraining model without feature comparing performance full model. shows contribution feature features present. LOCO computationally expensive (requires retraining feature) provides clear interpretation: higher values mean larger performance drop feature removed. Important limitation: LOCO distinguish direct effects indirect effects correlated features.","code":"loco <- LOCO$new(     task = task,     learner = learner,     measure = measure,     resampling = resampling )  loco$compute() loco$importance() #> Key: <feature> #>          feature importance #>           <char>      <num> #>  1:   important1  3.4140568 #>  2:   important2  5.7771305 #>  3:   important3  0.8518190 #>  4:   important4  7.4712326 #>  5:   important5  0.6982960 #>  6: unimportant1 -0.3671644 #>  7: unimportant2 -0.2105410 #>  8: unimportant3 -0.2953192 #>  9: unimportant4 -0.4608305 #> 10: unimportant5 -0.3506712"},{"path":"https://jemus42.github.io/xplainfi/articles/xplainfi.html","id":"feature-samplers","dir":"Articles","previous_headings":"","what":"Feature Samplers","title":"Getting Started with xplainfi","text":"advanced methods account feature dependencies, xplainfi provides different sampling strategies. PFI uses simple permutation (marginal sampling), conditional samplers can preserve feature relationships. Let’s demonstrate conditional sampling using Adversarial Random Forests, preserves relationships features sampling: Now ’ll conditionally sample important1 feature given values important2 important3: conditional sampling essential methods like CFI RFI need preserve feature dependencies. See vignette(\"perturbation-importance\") detailed comparisons.","code":"arf_sampler <- ARFSampler$new(task)  sample_data <- task$data(rows = 1:5) sample_data[, .(y, important1, important2)] #>           y important1  important2 #>       <num>      <num>       <num> #> 1: 20.59935  0.2875775 0.784575267 #> 2: 10.48474  0.7883051 0.009429905 #> 3: 19.99049  0.4089769 0.779065883 #> 4: 19.70521  0.8830174 0.729390652 #> 5: 21.94251  0.9404673 0.630131853 sampled_conditional <- arf_sampler$sample(     feature = \"important1\",     data = sample_data,     conditioning_set = c(\"important2\", \"important3\") )  sample_data[, .(y, important1, important2, important3)] #>           y important1  important2 important3 #>       <num>      <num>       <num>      <num> #> 1: 20.59935  0.2875775 0.784575267  0.2372297 #> 2: 10.48474  0.7883051 0.009429905  0.6864904 #> 3: 19.99049  0.4089769 0.779065883  0.2258184 #> 4: 19.70521  0.8830174 0.729390652  0.3184946 #> 5: 21.94251  0.9404673 0.630131853  0.1739838 sampled_conditional[, .(y, important1, important2, important3)] #>           y important1  important2 important3 #>       <num>      <num>       <num>      <num> #> 1: 20.59935  0.3673758 0.784575267  0.2372297 #> 2: 10.48474  0.4054382 0.009429905  0.6864904 #> 3: 19.99049  0.5397342 0.779065883  0.2258184 #> 4: 19.70521  0.8835479 0.729390652  0.3184946 #> 5: 21.94251  0.5333147 0.630131853  0.1739838"},{"path":"https://jemus42.github.io/xplainfi/articles/xplainfi.html","id":"advanced-features","dir":"Articles","previous_headings":"","what":"Advanced Features","title":"Getting Started with xplainfi","text":"xplainfi supports many advanced features robust importance estimation: Multiple resampling strategies: Cross-validation, bootstrap, custom splits Multiple permutation/refit iterations: stable estimates Feature grouping: Compute importance groups related features Different relation types: Difference vs. ratio scoring Conditional sampling: Account feature dependencies (see vignette(\"perturbation-importance\")) SAGE methods: Shapley-based approaches (see vignette(\"sage-methods\"))","code":""},{"path":"https://jemus42.github.io/xplainfi/articles/xplainfi.html","id":"detailed-scoring-information","dir":"Articles","previous_headings":"","what":"Detailed Scoring Information","title":"Getting Started with xplainfi","text":"methods store detailed scoring information resampling iteration analysis. Let’s examine structure PFI’s detailed scores: Detailed PFI scores (first 10 rows) can also summarize scoring structure: $importance() always gives us aggregated importances across multiple resampling- permutation-/refitting iterations, whereas $scores() gives individual scores calculated supplied measures corresponding importance calculated difference scores default. Analogously $importance(), can also use relation = \"ratio\" : PFI scores using ratio (first 10 rows)","code":"pfi$scores() |>     head(10) |>     knitr::kable(digits = 4, caption = \"Detailed PFI scores (first 10 rows)\") pfi$scores()[, .(     features = uniqueN(feature),     resampling_folds = uniqueN(iter_rsmp),     permutation_iters = uniqueN(iter_perm),     total_scores = .N )] #>    features resampling_folds permutation_iters total_scores #>       <int>            <int>             <int>        <int> #> 1:       10                3                 1           30 pfi$scores(relation = \"ratio\") |>     head(10) |>     knitr::kable(digits = 4, caption = \"PFI scores using the ratio (first 10 rows)\")"},{"path":"https://jemus42.github.io/xplainfi/articles/xplainfi.html","id":"observation-wise-losses-and-importances","dir":"Articles","previous_headings":"","what":"Observation-wise losses and importances","title":"Getting Started with xplainfi","text":"methods importances calculated based observation-level comparisons decomposable measures, can also retrieve observation-level information $obs_loss(), works analogously $scores() $importances() even detailed: Since computed PFI using mean squared error (msr(\"regr.mse\")), can use associated Measure$obs_loss(), squared error. resulting table see loss_baseline: loss (squared error) baseline model permutation loss_post: loss observation permutation (case LOCO, refit) obs_importance: difference (ratio relation = \"ratio\") two losses Note measures Measure$obs_loss(): measures like msr(\"classif.auc\") decomposable, observation-wise loss values available. cases, corresponding obs_loss() just yet implemented mlr3measures, likely future.","code":"pfi$obs_loss() #>            feature iter_rsmp iter_perm row_ids loss_baseline   loss_post #>             <char>     <int>     <int>   <int>         <num>       <num> #>    1:   important1         1         1       1     3.3403244  0.26184209 #>    2:   important1         1         1       9     0.4640003  0.00316609 #>    3:   important1         1         1      11     1.0938319 10.11218211 #>    4:   important1         1         1      12     2.0091331  2.28764800 #>    5:   important1         1         1      15    11.4484770 38.11092543 #>   ---                                                                    #> 2996: unimportant5         3         1     290    16.8041217 16.80412169 #> 2997: unimportant5         3         1     294     0.4212832  0.45933049 #> 2998: unimportant5         3         1     295     8.0016602  7.86721528 #> 2999: unimportant5         3         1     296     0.2308082  0.26544478 #> 3000: unimportant5         3         1     298    18.8129904 18.81299041 #>       obs_importance #>                <num> #>    1:    -3.07848231 #>    2:    -0.46083425 #>    3:     9.01835017 #>    4:     0.27851489 #>    5:    26.66244838 #>   ---                #> 2996:     0.00000000 #> 2997:     0.03804724 #> 2998:    -0.13444495 #> 2999:     0.03463658 #> 3000:     0.00000000"},{"path":"https://jemus42.github.io/xplainfi/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lukas Burk. Author, maintainer.","code":""},{"path":"https://jemus42.github.io/xplainfi/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Burk L (2025). xplainfi: Feature Importance Methods Model Interpretability. R package version 0.1.0.9001, https://jemus42.github.io/xplainfi/.","code":"@Manual{,   title = {xplainfi: Feature Importance Methods for Model Interpretability},   author = {Lukas Burk},   year = {2025},   note = {R package version 0.1.0.9001},   url = {https://jemus42.github.io/xplainfi/}, }"},{"path":"https://jemus42.github.io/xplainfi/index.html","id":"xplainfi","dir":"","previous_headings":"","what":"xplainfi: Feature importance methods","title":"xplainfi: Feature importance methods","text":"goal xplainfi collect common feature importance methods unified extensible interface. built around mlr3 available abstractions learners, tasks, measures, etc. greatly simplify implementation importance measures.","code":""},{"path":"https://jemus42.github.io/xplainfi/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"xplainfi: Feature importance methods","text":"can install development version xplainfi like :","code":"# install.packages(pak) pak::pak(\"jemus42/xplainfi\")"},{"path":"https://jemus42.github.io/xplainfi/index.html","id":"example-pfi","dir":"","previous_headings":"","what":"Example: PFI","title":"xplainfi: Feature importance methods","text":"basic example calculate PFI given learner task, using repeated cross-validation resampling strategy computing PFI within resampling 5 times friedman1 task (see ?mlbench::mlbench.friedman1). friedman1 task following structure: \\[y = 10 \\sin(\\pi x_1 x_2) + 20(x_3 - 0.5)^2 + 10x_4 + 5x_5 + \\varepsilon\\] \\(x_{1,2,3,4,5}\\) named important1 important5 Task, additional numbered unimportant features without effect \\(y\\). Compute print PFI scores: aides interpretation, importances can also calculates ratio rather difference baseline post-permutation losses: PFI computed based resampling multiple iterations, / multiple permutation iterations, individual scores can retrieved data.table: iter_rsmp corresponds resampling iteration, .e., 3 3-fold cross-validation, iter_perm corresponds permutation iteration within resampling iteration, 5 case. pfi$importance() contains means across iterations, pfi$scores() allows manually visualize aggregate way see fit. example:  measure question needs maximized rather minimized (like \\(R^2\\)), internal importance calculation takes account via $minimize property measure calculates importances intuition “performance improvement” -> “higher importance score” still holds:","code":"library(xplainfi) library(mlr3learners) #> Loading required package: mlr3  task = tgen(\"friedman1\")$generate(1000) learner = lrn(\"regr.ranger\", num.trees = 100) measure = msr(\"regr.mse\")  pfi = PFI$new(     task = task,     learner = learner,     measure = measure,     resampling = rsmp(\"cv\", folds = 3),     iters_perm = 5 ) pfi$compute() pfi$importance() #> Key: <feature> #>          feature    importance #>           <char>         <num> #>  1:   important1  7.9320281224 #>  2:   important2  8.1368297554 #>  3:   important3  1.9003588453 #>  4:   important4 13.5083721272 #>  5:   important5  2.2748507393 #>  6: unimportant1 -0.0004293556 #>  7: unimportant2  0.0219242406 #>  8: unimportant3  0.0314298729 #>  9: unimportant4  0.0091510237 #> 10: unimportant5  0.0108304225 pfi$importance(relation = \"ratio\") #> Key: <feature> #>          feature importance #>           <char>      <num> #>  1:   important1  2.6410386 #>  2:   important2  2.6853106 #>  3:   important3  1.3968261 #>  4:   important4  3.8012909 #>  5:   important5  1.4697651 #>  6: unimportant1  0.9997936 #>  7: unimportant2  1.0044383 #>  8: unimportant3  1.0068725 #>  9: unimportant4  1.0015174 #> 10: unimportant5  1.0017192 str(pfi$scores()) #> Classes 'data.table' and 'data.frame':   150 obs. of  6 variables: #>  $ feature           : chr  \"important1\" \"important1\" \"important1\" \"important1\" ... #>  $ iter_rsmp         : int  1 1 1 1 1 1 1 1 1 1 ... #>  $ iter_perm         : int  1 2 3 4 5 1 2 3 4 5 ... #>  $ regr.mse_baseline : num  5.3 5.3 5.3 5.3 5.3 ... #>  $ regr.mse_perturbed: num  13.9 14.1 12.9 12.5 12.8 ... #>  $ importance        : num  8.65 8.84 7.55 7.21 7.46 ... #>  - attr(*, \".internal.selfref\")=<externalptr> library(ggplot2)  ggplot(     pfi$scores(),     aes(x = importance, y = reorder(feature, importance)) ) +     geom_boxplot(color = \"#f44560\", fill = alpha(\"#f44560\", 0.4)) +     labs(         title = \"Permutation Feature Importance on Friedman1\",         subtitle = \"Computed over 3-fold CV with 5 permutations per iteration using Random Forest\",         x = \"Importance\",         y = \"Feature\"     ) +     theme_minimal(base_size = 16) +     theme(         plot.title.position = \"plot\",         panel.grid.major.y = element_blank()     ) pfi = PFI$new(     task = task,     learner = learner,     measure = msr(\"regr.rsq\") ) #> ℹ No <Resampling> provided #> Using `resampling = rsmp(\"holdout\")` with default `ratio = 0.67`.  pfi$compute() pfi$importance() #> Key: <feature> #>          feature    importance #>           <char>         <num> #>  1:   important1  0.2461477003 #>  2:   important2  0.3354065147 #>  3:   important3  0.0534960678 #>  4:   important4  0.5744520955 #>  5:   important5  0.1116336289 #>  6: unimportant1 -0.0016660726 #>  7: unimportant2 -0.0031085541 #>  8: unimportant3 -0.0002086101 #>  9: unimportant4  0.0037567083 #> 10: unimportant5 -0.0022176601"},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":null,"dir":"Reference","previous_headings":"","what":"ARF-based Conditional Sampler — ARFSampler","title":"ARF-based Conditional Sampler — ARFSampler","text":"Implements conditional sampling using Adversarial Random Forests (ARF). ARF can handle mixed data types (continuous categorical) provides flexible conditional sampling modeling joint distribution.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ARF-based Conditional Sampler — ARFSampler","text":"ARFSampler fits Adversarial Random Forest model task data, uses generate samples \\(P(X_j | X_{-j})\\) \\(X_j\\) feature interest \\(X_{-j}\\) conditioning features.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"ARF-based Conditional Sampler — ARFSampler","text":"Watson, S. D, Blesch, Kristin, Kapar, Jan, Wright, N. M (2023). “Adversarial Random Forests Density Estimation Generative Modeling.” Proceedings 26th International Conference Artificial Intelligence Statistics, 5357–5375. https://proceedings.mlr.press/v206/watson23a.html. Blesch, Kristin, Koenen, Niklas, Kapar, Jan, Golchian, Pegah, Burk, Lukas, Loecher, Markus, Wright, N. M (2025). “Conditional Feature Importance Generative Modeling Using Adversarial Random Forests.” Proceedings AAAI Conference Artificial Intelligence, 39(15), 15596–15604. doi:10.1609/aaai.v39i15.33712 .","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"ARF-based Conditional Sampler — ARFSampler","text":"xplainfi::FeatureSampler -> xplainfi::ConditionalSampler -> ARFSampler","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"ARF-based Conditional Sampler — ARFSampler","text":"arf_model Adversarial Random Forest model psi Distribution parameters estimated ARF","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"ARF-based Conditional Sampler — ARFSampler","text":"xplainfi::FeatureSampler$print()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"ARF-based Conditional Sampler — ARFSampler","text":"ARFSampler$new() ARFSampler$sample() ARFSampler$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"ARF-based Conditional Sampler — ARFSampler","text":"Creates new instance ARFSampler class. fit ARF parallel, set arf_args = list(parallel = TRUE) register parallel backend (see arf::arf).","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARF-based Conditional Sampler — ARFSampler","text":"","code":"ARFSampler$new(   task,   conditioning_set = NULL,   finite_bounds = \"no\",   round = TRUE,   stepsize = 0,   verbose = FALSE,   parallel = FALSE,   arf_args = NULL )"},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARF-based Conditional Sampler — ARFSampler","text":"task (mlr3::Task) Task sample conditioning_set (character | NULL) Default conditioning set use $sample(). parameter affects sampling behavior, ARF model fitting. finite_bounds (character(1): \"\") Passed arf::forde(). Default \"\" compatibility. \"local\" may improve extrapolation can cause issues data. round (logical(1): TRUE) Whether round continuous variables back original precision. stepsize (numeric(1): 0) Number rows evidence process time wehn parallel TRUE. Default (0) spreads evidence evenly registered workers. verbose (logical(1): FALSE) Whether print progress messages. Default FALSE default arf TRUE. parallel (logical(1): FALSE) Whether use parallel processing via foreach. See examples arf::forge(). arf_args (list) Additional passed arf::adversarial_rf.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"method-sample-","dir":"Reference","previous_headings":"","what":"Method sample()","title":"ARF-based Conditional Sampler — ARFSampler","text":"Sample values feature(s) conditionally features using ARF","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"ARF-based Conditional Sampler — ARFSampler","text":"","code":"ARFSampler$sample(   feature,   data = self$task$data(),   conditioning_set = NULL,   round = NULL,   stepsize = NULL,   verbose = NULL,   parallel = NULL,   ... )"},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARF-based Conditional Sampler — ARFSampler","text":"feature (character) Feature(s) interest sample (can single multiple) data (data.table) Data containing conditioning features. Defaults $task$data(), typically dedicated test set provided. conditioning_set (character(n) | NULL) Features condition . NULL, uses stored parameter available, otherwise defaults features. round (logical(1) | NULL) Whether round continuous variables. NULL, uses stored parameter value. stepsize (numeric(1) | NULL) Step size variance adjustment. NULL, uses stored parameter value. verbose (logical(1) | NULL) Whether print progress messages. NULL, uses stored parameter value. parallel (logical(1) | NULL) Whether use parallel processing. NULL, uses stored parameter value. ... arguments passed arf::forge().","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"ARF-based Conditional Sampler — ARFSampler","text":"Modified copy input data feature(s) sampled conditionally","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"ARF-based Conditional Sampler — ARFSampler","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"ARF-based Conditional Sampler — ARFSampler","text":"","code":"ARFSampler$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARF-based Conditional Sampler — ARFSampler","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ARFSampler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARF-based Conditional Sampler — ARFSampler","text":"","code":"library(mlr3) task = tgen(\"2dnormals\")$generate(n = 100) # Create sampler with default parameters sampler = ARFSampler$new(task, conditioning_set = \"x2\", verbose = FALSE) data = task$data() # Will use the stored parameters sampled_data = sampler$sample(\"x1\", data)  # Example with custom parameters sampler_custom = ARFSampler$new(task, round = FALSE) sampled_custom = sampler_custom$sample(\"x1\", data)"},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional Feature Importance — CFI","title":"Conditional Feature Importance — CFI","text":"Implementation CFI using modular sampling approach","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Conditional Feature Importance — CFI","text":"Blesch, Kristin, Koenen, Niklas, Kapar, Jan, Golchian, Pegah, Burk, Lukas, Loecher, Markus, Wright, N. M (2025). “Conditional Feature Importance Generative Modeling Using Adversarial Random Forests.” Proceedings AAAI Conference Artificial Intelligence, 39(15), 15596–15604. doi:10.1609/aaai.v39i15.33712 .","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Conditional Feature Importance — CFI","text":"xplainfi::FeatureImportanceMethod -> xplainfi::PerturbationImportance -> CFI","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Conditional Feature Importance — CFI","text":"xplainfi::FeatureImportanceMethod$importance() xplainfi::FeatureImportanceMethod$obs_loss() xplainfi::FeatureImportanceMethod$print() xplainfi::FeatureImportanceMethod$reset() xplainfi::FeatureImportanceMethod$scores()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Conditional Feature Importance — CFI","text":"CFI$new() CFI$compute() CFI$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Conditional Feature Importance — CFI","text":"Creates new instance CFI class","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Feature Importance — CFI","text":"","code":"CFI$new(   task,   learner,   measure,   resampling = NULL,   features = NULL,   groups = NULL,   relation = \"difference\",   iters_perm = 1L,   sampler = NULL )"},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Feature Importance — CFI","text":"task, learner, measure, resampling, features, groups Passed PerturbationImportance. relation (character(1)) relate perturbed scores originals. Can overridden $compute(). iters_perm (integer(1)) Number sampling iterations. Can overridden $compute(). sampler (ConditionalSampler) Optional custom sampler. Defaults instantiationg ARFSampler internally default parameters.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"method-compute-","dir":"Reference","previous_headings":"","what":"Method compute()","title":"Conditional Feature Importance — CFI","text":"Compute CFI scores","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Feature Importance — CFI","text":"","code":"CFI$compute(iters_perm = NULL, store_backends = TRUE)"},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Feature Importance — CFI","text":"iters_perm (integer(1)) Number permutation iterations. NULL, uses stored value. store_backends (logical(1)) Whether store backends, passed mlr3::resample() internally initial fit learner. may required certain measures recommended leave enabled unless really necessary.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Conditional Feature Importance — CFI","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Feature Importance — CFI","text":"","code":"CFI$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Feature Importance — CFI","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/CFI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditional Feature Importance — CFI","text":"","code":"library(mlr3) task = tgen(\"2dnormals\")$generate(n = 100) cfi = CFI$new(   task = task,   learner = lrn(\"classif.ranger\", num.trees = 50, predict_type = \"prob\"),   measure = msr(\"classif.ce\") ) #> ℹ No <ConditionalSampler> provided, using <ARFSampler> with default settings. #> ℹ No <Resampling> provided #> Using `resampling = rsmp(\"holdout\")` with default `ratio = 0.67`. cfi$compute() cfi$importance() #> Key: <feature> #>    feature importance #>     <char>      <num> #> 1:      x1 0.12121212 #> 2:      x2 0.09090909"},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSAGE.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional SAGE — ConditionalSAGE","title":"Conditional SAGE — ConditionalSAGE","text":"SAGE conditional sampling (features \"marginalized\" conditionally). Uses ARFSampler default ConditionalSampler.","code":""},{"path":[]},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSAGE.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Conditional SAGE — ConditionalSAGE","text":"xplainfi::FeatureImportanceMethod -> xplainfi::SAGE -> ConditionalSAGE","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSAGE.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Conditional SAGE — ConditionalSAGE","text":"xplainfi::FeatureImportanceMethod$importance() xplainfi::FeatureImportanceMethod$obs_loss() xplainfi::FeatureImportanceMethod$print() xplainfi::FeatureImportanceMethod$reset() xplainfi::FeatureImportanceMethod$scores() xplainfi::SAGE$compute() xplainfi::SAGE$plot_convergence()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSAGE.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Conditional SAGE — ConditionalSAGE","text":"ConditionalSAGE$new() ConditionalSAGE$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSAGE.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Conditional SAGE — ConditionalSAGE","text":"Creates new instance ConditionalSAGE class.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSAGE.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional SAGE — ConditionalSAGE","text":"","code":"ConditionalSAGE$new(   task,   learner,   measure,   resampling = NULL,   features = NULL,   n_permutations = 10L,   reference_data = NULL,   sampler = NULL,   batch_size = 5000L,   max_reference_size = 100L,   early_stopping = FALSE,   convergence_threshold = 0.01,   se_threshold = Inf,   min_permutations = 10L,   check_interval = 2L )"},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSAGE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional SAGE — ConditionalSAGE","text":"task, learner, measure, resampling, features, n_permutations, reference_data, batch_size, max_reference_size, early_stopping, convergence_threshold, se_threshold, min_permutations, check_interval Passed SAGE. sampler (ConditionalSampler) Optional custom sampler. Defaults ARFSampler.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSAGE.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Conditional SAGE — ConditionalSAGE","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSAGE.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional SAGE — ConditionalSAGE","text":"","code":"ConditionalSAGE$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSAGE.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional SAGE — ConditionalSAGE","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSAGE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditional SAGE — ConditionalSAGE","text":"","code":"library(mlr3) task = tgen(\"friedman1\")$generate(n = 100) sage = ConditionalSAGE$new(   task = task,   learner = lrn(\"regr.ranger\", num.trees = 50),   measure = msr(\"regr.mse\"),   n_permutations = 3L ) #> ℹ No <ConditionalSampler> provided, using <ARFSampler> with default settings. #> ℹ No <Resampling> provided #> Using `resampling = rsmp(\"holdout\")` with default `ratio = 0.67`. sage$compute()  # Use batching for memory efficiency with large datasets sage$compute(batch_size = 1000)"},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional Feature Sampler — ConditionalSampler","title":"Conditional Feature Sampler — ConditionalSampler","text":"Base class conditional sampling methods features sampled conditionally features. abstract class extended concrete implementations.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Conditional Feature Sampler — ConditionalSampler","text":"xplainfi::FeatureSampler -> ConditionalSampler","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Conditional Feature Sampler — ConditionalSampler","text":"xplainfi::FeatureSampler$print()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Conditional Feature Sampler — ConditionalSampler","text":"ConditionalSampler$new() ConditionalSampler$sample() ConditionalSampler$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Conditional Feature Sampler — ConditionalSampler","text":"Creates new instance ConditionalSampler class","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Feature Sampler — ConditionalSampler","text":"","code":"ConditionalSampler$new(task)"},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Feature Sampler — ConditionalSampler","text":"task (mlr3::Task) Task sample ","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":"method-sample-","dir":"Reference","previous_headings":"","what":"Method sample()","title":"Conditional Feature Sampler — ConditionalSampler","text":"Sample values feature(s) conditionally features","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Feature Sampler — ConditionalSampler","text":"","code":"ConditionalSampler$sample(feature, data, conditioning_set = NULL)"},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Feature Sampler — ConditionalSampler","text":"feature (character) Feature name(s) sample (can single multiple) data (data.table ) Data containing conditioning features conditioning_set (character) Features condition (default: features)","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Conditional Feature Sampler — ConditionalSampler","text":"Modified copy input data feature(s) sampled conditionally","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Conditional Feature Sampler — ConditionalSampler","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Feature Sampler — ConditionalSampler","text":"","code":"ConditionalSampler$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/ConditionalSampler.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Feature Sampler — ConditionalSampler","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":null,"dir":"Reference","previous_headings":"","what":"Feature Importance Method Class — FeatureImportanceMethod","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"Feature Importance Method Class Feature Importance Method Class","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"Nadeau, Claude, Bengio, Yoshua (2003). “Inference Generalization Error.” Machine Learning, 52(3), 239–281. ISSN 1573-0565, doi:10.1023/:1024068626366 . Molnar, Christoph, Freiesleben, Timo, König, Gunnar, Herbinger, Julia, Reisinger, Tim, Casalicchio, Giuseppe, Wright, N. M, Bischl, Bernd (2023). “Relating Partial Dependence Plot Permutation Feature Importance Data Generating Process.” Longo, Luca (eds.), Explainable Artificial Intelligence, 456–479. ISBN 978-3-031-44064-9, doi:10.1007/978-3-031-44064-9_24 .","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"label (character(1)) Method label. task (mlr3::Task) learner (mlr3::Learner) measure (mlr3::Measure) resampling (mlr3::Resampling), instantiated upon construction. resample_result (mlr3::ResampleResult) original learner task, used baseline scores. features (character: NULL) Features interest. default, importances computed feature task, optionally can restricted least one feature. Ignored groups specified. groups (list: NULL) (named) list features (names indices task). groups specified, features ignored. Importances calculated group features time, e.g., PFI one group features permuted step. Analogusly WVIM, group features left () model refit. methods support groups (e.g., SAGE). See FIXME: vignette examples. param_set (paradox::ps()) predictions (data.table) Feature-specific prediction objects provided methods (PFI, WVIM). Contains columns feature interest, resampling iteration, refit perturbation iteration, mlr3::Prediction objects.","code":""},{"path":[]},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"FeatureImportanceMethod$new() FeatureImportanceMethod$compute() FeatureImportanceMethod$importance() FeatureImportanceMethod$obs_loss() FeatureImportanceMethod$reset() FeatureImportanceMethod$print() FeatureImportanceMethod$scores() FeatureImportanceMethod$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"Creates new instance R6 class. typically intended use derived classes.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"","code":"FeatureImportanceMethod$new(   task,   learner,   measure,   resampling = NULL,   features = NULL,   groups = NULL,   param_set = paradox::ps(),   label )"},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"task, learner, measure, resampling, features, groups, param_set, label Used set fields","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"method-compute-","dir":"Reference","previous_headings":"","what":"Method compute()","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"Compute feature importance scores","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"","code":"FeatureImportanceMethod$compute(store_backends = TRUE)"},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"store_backends (logical(1): TRUE) Whether store backends.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"method-importance-","dir":"Reference","previous_headings":"","what":"Method importance()","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"Get aggregated importance scores. stored measure object's aggregator (default: mean) used aggregated importance scores across resampling iterations , depending method use, permutations (PerturbationImportance refits LOCO).","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"","code":"FeatureImportanceMethod$importance(   relation = NULL,   standardize = FALSE,   variance_method = c(\"none\", \"raw\", \"nadeau_bengio\"),   conf_level = 0.95 )"},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"relation (character(1)) relate perturbed scores originals (\"difference\" \"ratio\"). NULL, uses stored parameter value. applicable methods importance based relation baseline post-modifcation loss, .e. PerturbationImportance methods PFI WVIM / LOCO. available SAGE methods. standardize (logical(1): FALSE) TRUE, importances standardized highest score scores fall [-1, 1]. variance_method (character(1): \"none\") Variance estimation method use, defaulting omitting variance estimation (\"none\"). \"raw\", uncorrected variance estimates provided purely informative purposes invalid (narrow) confidence intervals. \"nadeau_bengio\", variance correction performed according Nadeau & Bengio (2003) suggested Molnar et al. (2023). methods model-agnostic rely suitable resamplings, e.g. subsampling 15 repeats \"nadeau_bengio\". See details. conf_level (numeric(1): 0.95): Conficence level use confidence interval construction variance_method != \"none\".","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"Variance estimates importance scores biased due resampling procedure. Molnar et al. (2023) suggest use variance correction factor proposed Nadeau & Bengio (2003) n2/n1, n2 n1 sizes test- train set, respectively. combined approx. 15 iterations either bootstrapping subsampling. use bootstrapping context can lead problematic information leakage combined learners perform bootstrapping , e.g., Random Forest learners. cases, observations may used train- test instances simultaneously, leading erroneous performance estimates. approach leading still imperfect, improved variance estimates :   iters_perm = 5 context improves stability PFI estimate within resampling iteration, whereas rsmp(\"subsampling\", repeats = 15) used accounter learner variance neccessitates variance correction factor. appraoch can principle also applied CFI RFI, beware conditional sample ARFSampler also needs trained data, need taken account variance estimation method. Analogously, \"nadeau_bengio\" correction recommended use PFI Molnar et al., use LOCO MarginalSAGE experimental. Note even measure uses aggregator function mean, variance estimation currently always use mean() var().","code":"PFI$new(   task = sim_dgp_interactions(n = 1000),   learner = lrn(\"regr.ranger\", num.trees = 100),   measure = msr(\"regr.mse\"),   # Subsampling instead of bootstrapping due to RF   resampling = rsmp(\"subsampling\", repeats = 15),   iters_perm = 5 )"},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"(data.table) Aggregated importance scores. variables \"feature\", \"importance\" depending variance_method also \"var\", \"conf_lower\", \"conf_upper\".","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"method-obs-loss-","dir":"Reference","previous_headings":"","what":"Method obs_loss()","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"Calculate observation-wise importance scores. Requires $compute() run measure decomposable observation-wise loss (Measure$obs_loss()) associated . case measure like classif.auc, decomposable.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"","code":"FeatureImportanceMethod$obs_loss(relation = NULL)"},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"relation (character(1)) relate perturbed scores originals (\"difference\" \"ratio\"). NULL, uses stored parameter value. applicable methods importance based relation baseline post-modifcation loss, .e. PerturbationImportance methods PFI WVIM / LOCO. available SAGE methods.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"method-reset-","dir":"Reference","previous_headings":"","what":"Method reset()","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"Resets stored fields populated $compute: $resample_result, $scores, $obs_losses, $predictions.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"","code":"FeatureImportanceMethod$reset()"},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"Print importance scores","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"","code":"FeatureImportanceMethod$print(...)"},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"... Passed print()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"method-scores-","dir":"Reference","previous_headings":"","what":"Method scores()","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"Calculate importance scores resampling iteration sub-iterations (iter_rsmp PFI example). Iteration-wise importance computed fly depending chosen relation (difference ratio) avoid re-computation different relation needed.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"","code":"FeatureImportanceMethod$scores(relation = NULL)"},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"relation (character(1)) relate perturbed scores originals (\"difference\" \"ratio\"). NULL, uses stored parameter value. applicable methods importance based relation baseline post-modifcation loss, .e. PerturbationImportance methods PFI WVIM / LOCO. available SAGE methods.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"","code":"FeatureImportanceMethod$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureImportanceMethod.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Importance Method Class — FeatureImportanceMethod","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":null,"dir":"Reference","previous_headings":"","what":"Feature Sampler Class — FeatureSampler","title":"Feature Sampler Class — FeatureSampler","text":"Base class implementing different sampling strategies feature importance methods like PFI CFI","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Feature Sampler Class — FeatureSampler","text":"task (mlr3::Task) Original task. label (character(1)) Name sampler. param_set (paradox::ParamSet) Parameter set sampler.","code":""},{"path":[]},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Feature Sampler Class — FeatureSampler","text":"FeatureSampler$new() FeatureSampler$sample() FeatureSampler$print() FeatureSampler$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Feature Sampler Class — FeatureSampler","text":"Creates new instance FeatureSampler class","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Sampler Class — FeatureSampler","text":"","code":"FeatureSampler$new(task)"},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Sampler Class — FeatureSampler","text":"task (mlr3::Task) Task sample ","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"method-sample-","dir":"Reference","previous_headings":"","what":"Method sample()","title":"Feature Sampler Class — FeatureSampler","text":"Sample values feature(s)","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Sampler Class — FeatureSampler","text":"","code":"FeatureSampler$sample(feature, data)"},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Sampler Class — FeatureSampler","text":"feature (character) Feature name(s) sample (can single multiple) data (data.table ) Data use sampling context","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Feature Sampler Class — FeatureSampler","text":"Modified copy input data feature(s) sampled","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Feature Sampler Class — FeatureSampler","text":"Print sampler","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Sampler Class — FeatureSampler","text":"","code":"FeatureSampler$print(...)"},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Sampler Class — FeatureSampler","text":"... Ignored.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Feature Sampler Class — FeatureSampler","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Sampler Class — FeatureSampler","text":"","code":"FeatureSampler$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/FeatureSampler.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Sampler Class — FeatureSampler","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/KnockoffSampler.html","id":null,"dir":"Reference","previous_headings":"","what":"Knockoff-based Conditional Sampler — KnockoffSampler","title":"Knockoff-based Conditional Sampler — KnockoffSampler","text":"Implements conditional sampling using Knockoffs.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/KnockoffSampler.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Knockoff-based Conditional Sampler — KnockoffSampler","text":"KnockoffSampler samples Knockoffs based task data.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/KnockoffSampler.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Knockoff-based Conditional Sampler — KnockoffSampler","text":"Watson D, Wright M (2021). “Testing conditional independence supervised learning algorithms.” Machine Learning, 110(8), 2107-2129. doi:10.1007/s10994-021-06030-6 . Blesch K, Watson D, Wright M (2023). “Conditional feature importance mixed data.” AStA Advances Statistical Analysis, 108(2), 259-278. doi:10.1007/s10182-023-00477-9 .","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/KnockoffSampler.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Knockoff-based Conditional Sampler — KnockoffSampler","text":"xplainfi::FeatureSampler -> xplainfi::ConditionalSampler -> KnockoffSampler","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/KnockoffSampler.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Knockoff-based Conditional Sampler — KnockoffSampler","text":"x_tilde Knockoff matrix","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/KnockoffSampler.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Knockoff-based Conditional Sampler — KnockoffSampler","text":"xplainfi::FeatureSampler$print()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/KnockoffSampler.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Knockoff-based Conditional Sampler — KnockoffSampler","text":"KnockoffSampler$new() KnockoffSampler$sample() KnockoffSampler$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/KnockoffSampler.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Knockoff-based Conditional Sampler — KnockoffSampler","text":"Creates new instance KnockoffSampler class.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/KnockoffSampler.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Knockoff-based Conditional Sampler — KnockoffSampler","text":"","code":"KnockoffSampler$new(   task,   knockoff_fun = function(x) knockoff::create.second_order(as.matrix(x)) )"},{"path":"https://jemus42.github.io/xplainfi/reference/KnockoffSampler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Knockoff-based Conditional Sampler — KnockoffSampler","text":"task (mlr3::Task) Task sample knockoff_fun (function) Step size variance adjustment. Default second-order Gaussian knockoffs.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/KnockoffSampler.html","id":"method-sample-","dir":"Reference","previous_headings":"","what":"Method sample()","title":"Knockoff-based Conditional Sampler — KnockoffSampler","text":"Sample values feature(s) conditionally features using Knockoffs","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/KnockoffSampler.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Knockoff-based Conditional Sampler — KnockoffSampler","text":"","code":"KnockoffSampler$sample(feature, data = self$task$data())"},{"path":"https://jemus42.github.io/xplainfi/reference/KnockoffSampler.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Knockoff-based Conditional Sampler — KnockoffSampler","text":"feature (character) Feature(s) interest sample (can single multiple) data (data.table) Data containing conditioning features. Defaults $task$data(), typically dedicated test set provided. Currently KnockoffSampler support , use ARFSampler instead.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/KnockoffSampler.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Knockoff-based Conditional Sampler — KnockoffSampler","text":"Modified copy input data feature(s) sampled conditionally","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/KnockoffSampler.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Knockoff-based Conditional Sampler — KnockoffSampler","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/KnockoffSampler.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Knockoff-based Conditional Sampler — KnockoffSampler","text":"","code":"KnockoffSampler$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/KnockoffSampler.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Knockoff-based Conditional Sampler — KnockoffSampler","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/KnockoffSampler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Knockoff-based Conditional Sampler — KnockoffSampler","text":"","code":"library(mlr3) task = tgen(\"2dnormals\")$generate(n = 100) # Create sampler with default parameters sampler = KnockoffSampler$new(task) # Will use the stored parameters sampled_data = sampler$sample(\"x1\") if (FALSE) { # \\dontrun{ # Example with sequential knockoffs (https://github.com/kormama1/seqknockoff) task = tgen(\"simplex\")$generate(n = 100) sampler_seq = KnockoffSampler$new(task, knockoff_fun = seqknockoff::knockoffs_seq) sampled_seq = sampler_seq$sample(\"x1\") } # }"},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":null,"dir":"Reference","previous_headings":"","what":"Leave-One-Covariate-Out (LOCO) — LOCO","title":"Leave-One-Covariate-Out (LOCO) — LOCO","text":"Calculates Leave-One-Covariate-(LOCO) scores.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Leave-One-Covariate-Out (LOCO) — LOCO","text":"LOCO measures feature importance comparing model performance without feature. feature, model retrained without feature performance difference (reduced_model_loss - full_model_loss) indicates feature's importance. Higher values indicate important features.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Leave-One-Covariate-Out (LOCO) — LOCO","text":"Lei, Jing, Max, G'Sell, Alessandro, Rinaldo, J. R, Tibshirani, Wasserman, Larry (2018). “Distribution-Free Predictive Inference Regression.” Journal American Statistical Association, 113(523), 1094–1111. ISSN 0162-1459, doi:10.1080/01621459.2017.1307116 .","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Leave-One-Covariate-Out (LOCO) — LOCO","text":"xplainfi::FeatureImportanceMethod -> xplainfi::WVIM -> LOCO","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Leave-One-Covariate-Out (LOCO) — LOCO","text":"xplainfi::FeatureImportanceMethod$importance() xplainfi::FeatureImportanceMethod$obs_loss() xplainfi::FeatureImportanceMethod$print() xplainfi::FeatureImportanceMethod$reset() xplainfi::FeatureImportanceMethod$scores()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Leave-One-Covariate-Out (LOCO) — LOCO","text":"LOCO$new() LOCO$compute() LOCO$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Leave-One-Covariate-Out (LOCO) — LOCO","text":"Creates new instance R6 class.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Leave-One-Covariate-Out (LOCO) — LOCO","text":"","code":"LOCO$new(   task,   learner,   measure,   resampling = NULL,   features = NULL,   iters_refit = 1L )"},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Leave-One-Covariate-Out (LOCO) — LOCO","text":"task (mlr3::Task) Task compute importance . learner (mlr3::Learner) Learner use prediction. measure (mlr3::Measure) Measure use scoring. resampling (mlr3::Resampling) Resampling strategy. Defaults holdout. features (character()) Features compute importance . Defaults features. iters_refit (integer(1): 1L) Number refit iterations per resampling iteration.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"method-compute-","dir":"Reference","previous_headings":"","what":"Method compute()","title":"Leave-One-Covariate-Out (LOCO) — LOCO","text":"Compute LOCO importances.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Leave-One-Covariate-Out (LOCO) — LOCO","text":"","code":"LOCO$compute(store_backends = TRUE)"},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Leave-One-Covariate-Out (LOCO) — LOCO","text":"store_backends (logical(1)) Passed mlr3::resample store backends resample result. Required measures, may increase memory footprint.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Leave-One-Covariate-Out (LOCO) — LOCO","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Leave-One-Covariate-Out (LOCO) — LOCO","text":"","code":"LOCO$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/LOCO.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Leave-One-Covariate-Out (LOCO) — LOCO","text":"deep Whether make deep clone.","code":""},{"path":[]},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSAGE.html","id":null,"dir":"Reference","previous_headings":"","what":"Marginal SAGE — MarginalSAGE","title":"Marginal SAGE — MarginalSAGE","text":"SAGE marginal sampling (features marginalized independently). standard SAGE implementation.","code":""},{"path":[]},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSAGE.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Marginal SAGE — MarginalSAGE","text":"xplainfi::FeatureImportanceMethod -> xplainfi::SAGE -> MarginalSAGE","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSAGE.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Marginal SAGE — MarginalSAGE","text":"xplainfi::FeatureImportanceMethod$importance() xplainfi::FeatureImportanceMethod$obs_loss() xplainfi::FeatureImportanceMethod$print() xplainfi::FeatureImportanceMethod$reset() xplainfi::FeatureImportanceMethod$scores() xplainfi::SAGE$compute() xplainfi::SAGE$plot_convergence()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSAGE.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Marginal SAGE — MarginalSAGE","text":"MarginalSAGE$new() MarginalSAGE$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSAGE.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Marginal SAGE — MarginalSAGE","text":"Creates new instance MarginalSAGE class.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSAGE.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Marginal SAGE — MarginalSAGE","text":"","code":"MarginalSAGE$new(   task,   learner,   measure,   resampling = NULL,   features = NULL,   n_permutations = 10L,   reference_data = NULL,   batch_size = 5000L,   max_reference_size = 100L,   early_stopping = FALSE,   convergence_threshold = 0.01,   se_threshold = Inf,   min_permutations = 10L,   check_interval = 2L )"},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSAGE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Marginal SAGE — MarginalSAGE","text":"task, learner, measure, resampling, features, n_permutations, reference_data, batch_size, max_reference_size, early_stopping, convergence_threshold, se_threshold, min_permutations, check_interval Passed SAGE.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSAGE.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Marginal SAGE — MarginalSAGE","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSAGE.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Marginal SAGE — MarginalSAGE","text":"","code":"MarginalSAGE$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSAGE.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Marginal SAGE — MarginalSAGE","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSAGE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Marginal SAGE — MarginalSAGE","text":"","code":"library(mlr3) task = tgen(\"friedman1\")$generate(n = 100) sage = MarginalSAGE$new(   task = task,   learner = lrn(\"regr.ranger\", num.trees = 50),   measure = msr(\"regr.mse\"),   n_permutations = 3L ) #> ℹ No <Resampling> provided #> Using `resampling = rsmp(\"holdout\")` with default `ratio = 0.67`. sage$compute()  # Use batching for memory efficiency with large datasets sage$compute(batch_size = 1000)"},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":null,"dir":"Reference","previous_headings":"","what":"Marginal Feature Sampler — MarginalSampler","title":"Marginal Feature Sampler — MarginalSampler","text":"Implements marginal sampling PFI, feature interest sampled independently features","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Marginal Feature Sampler — MarginalSampler","text":"xplainfi::FeatureSampler -> MarginalSampler","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Marginal Feature Sampler — MarginalSampler","text":"xplainfi::FeatureSampler$print()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Marginal Feature Sampler — MarginalSampler","text":"MarginalSampler$new() MarginalSampler$sample() MarginalSampler$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Marginal Feature Sampler — MarginalSampler","text":"Creates new instance MarginalSampler class","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Marginal Feature Sampler — MarginalSampler","text":"","code":"MarginalSampler$new(task)"},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Marginal Feature Sampler — MarginalSampler","text":"task (mlr3::Task) Task sample ","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"method-sample-","dir":"Reference","previous_headings":"","what":"Method sample()","title":"Marginal Feature Sampler — MarginalSampler","text":"Sample values feature(s) permutation (marginal distribution)","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Marginal Feature Sampler — MarginalSampler","text":"","code":"MarginalSampler$sample(feature, data)"},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Marginal Feature Sampler — MarginalSampler","text":"feature (character) Feature name(s) sample (can single multiple) data (data.table ) Data permute feature(s) ","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Marginal Feature Sampler — MarginalSampler","text":"Modified copy input data feature(s) permuted","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Marginal Feature Sampler — MarginalSampler","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Marginal Feature Sampler — MarginalSampler","text":"","code":"MarginalSampler$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Marginal Feature Sampler — MarginalSampler","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/MarginalSampler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Marginal Feature Sampler — MarginalSampler","text":"","code":"library(mlr3) task = tgen(\"2dnormals\")$generate(n = 100) sampler = MarginalSampler$new(task) data = task$data() sampled_data = sampler$sample(\"x1\", data)"},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":null,"dir":"Reference","previous_headings":"","what":"Permutation Feature Importance — PFI","title":"Permutation Feature Importance — PFI","text":"Implementation Permutation Feature Importance (PFI) using modular sampling approach. PFI measures importance feature calculating increase model error feature's values randomly permuted, breaking relationship feature target variable.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Permutation Feature Importance — PFI","text":"Permutation Feature Importance originally introduced Breiman (2001) part Random Forest algorithm. method works : Computing baseline model performance original dataset feature, randomly permuting values keeping features unchanged Computing model performance permuted dataset Calculating importance difference (ratio) permuted original performance","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Permutation Feature Importance — PFI","text":"Breiman, Leo (2001). “Random Forests.” Machine Learning, 45(1), 5–32. doi:10.1023/:1010933404324 . Fisher, Aaron, Rudin, Cynthia, Dominici, Francesca (2019). “Models Wrong, Many Useful: Learning Variable's Importance Studying Entire Class Prediction Models Simultaneously.” Journal Machine Learning Research, 20, 177. https://www.ncbi.nlm.nih.gov/pmc/articles/PMC8323609/. Strobl, Carolin, Boulesteix, Anne-Laure, Kneib, Thomas, Augustin, Thomas, Zeileis, Achim (2008). “Conditional Variable Importance Random Forests.” BMC Bioinformatics, 9(1), 307. ISSN 1471-2105, doi:10.1186/1471-2105-9-307 .","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Permutation Feature Importance — PFI","text":"xplainfi::FeatureImportanceMethod -> xplainfi::PerturbationImportance -> PFI","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Permutation Feature Importance — PFI","text":"xplainfi::FeatureImportanceMethod$importance() xplainfi::FeatureImportanceMethod$obs_loss() xplainfi::FeatureImportanceMethod$print() xplainfi::FeatureImportanceMethod$reset() xplainfi::FeatureImportanceMethod$scores()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Permutation Feature Importance — PFI","text":"PFI$new() PFI$compute() PFI$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Permutation Feature Importance — PFI","text":"Creates new instance PFI class","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permutation Feature Importance — PFI","text":"","code":"PFI$new(   task,   learner,   measure,   resampling = NULL,   features = NULL,   groups = NULL,   relation = \"difference\",   iters_perm = 1L )"},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permutation Feature Importance — PFI","text":"task, learner, measure, resampling, features, groups Passed PerturbationImportance relation (character(1)) relate perturbed scores originals. Can overridden $compute(). iters_perm (integer(1)) Number permutation iterations. Can overridden $compute().","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"method-compute-","dir":"Reference","previous_headings":"","what":"Method compute()","title":"Permutation Feature Importance — PFI","text":"Compute PFI scores","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Permutation Feature Importance — PFI","text":"","code":"PFI$compute(iters_perm = NULL, store_backends = TRUE)"},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permutation Feature Importance — PFI","text":"iters_perm (integer(1)) Number permutation iterations. NULL, uses stored value. store_backends (logical(1)) Whether store backends, passed mlr3::resample() internally initial fit learner. may required certain measures recommended leave enabled unless really necessary.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Permutation Feature Importance — PFI","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Permutation Feature Importance — PFI","text":"","code":"PFI$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permutation Feature Importance — PFI","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PFI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Permutation Feature Importance — PFI","text":"","code":"library(mlr3learners) task = tgen(\"xor\", d = 5)$generate(n = 100) pfi = PFI$new(   task = task,   learner = lrn(\"classif.ranger\", num.trees = 50, predict_type = \"prob\"),   measure = msr(\"classif.ce\"),   resampling = rsmp(\"cv\", folds = 3),   iters_perm = 3 ) pfi$compute() #> Warning: Dropped unused factor level(s) in dependent variable: M. pfi$importance() #> Key: <feature> #>    feature importance #>     <char>      <num> #> 1:      x1 0.04674193 #> 2:      x2 0.07011289 #> 3:      x3 0.10318875 #> 4:      x4 0.04614775 #> 5:      x5 0.07001386"},{"path":"https://jemus42.github.io/xplainfi/reference/PerturbationImportance.html","id":null,"dir":"Reference","previous_headings":"","what":"Perturbation Feature Importance Base Class — PerturbationImportance","title":"Perturbation Feature Importance Base Class — PerturbationImportance","text":"Abstract base class perturbation-based importance methods PFI, CFI, RFI","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PerturbationImportance.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Perturbation Feature Importance Base Class — PerturbationImportance","text":"xplainfi::FeatureImportanceMethod -> PerturbationImportance","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PerturbationImportance.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Perturbation Feature Importance Base Class — PerturbationImportance","text":"sampler (FeatureSampler) Sampler object feature perturbation","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PerturbationImportance.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Perturbation Feature Importance Base Class — PerturbationImportance","text":"xplainfi::FeatureImportanceMethod$compute() xplainfi::FeatureImportanceMethod$importance() xplainfi::FeatureImportanceMethod$obs_loss() xplainfi::FeatureImportanceMethod$print() xplainfi::FeatureImportanceMethod$reset() xplainfi::FeatureImportanceMethod$scores()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PerturbationImportance.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Perturbation Feature Importance Base Class — PerturbationImportance","text":"PerturbationImportance$new() PerturbationImportance$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PerturbationImportance.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Perturbation Feature Importance Base Class — PerturbationImportance","text":"Creates new instance PerturbationImportance class","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PerturbationImportance.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perturbation Feature Importance Base Class — PerturbationImportance","text":"","code":"PerturbationImportance$new(   task,   learner,   measure,   resampling = NULL,   features = NULL,   groups = NULL,   sampler = NULL,   relation = \"difference\",   iters_perm = 1L )"},{"path":"https://jemus42.github.io/xplainfi/reference/PerturbationImportance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perturbation Feature Importance Base Class — PerturbationImportance","text":"task, learner, measure, resampling, features, groups Passed FeatureImportanceMethod. sampler (FeatureSampler) Sampler use feature perturbation. relation (character(1): \"difference\") relate perturbed baseline scores. Can also \"ratio\". iters_perm (integer(1)) Number permutation iterations. Can overridden $compute().","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PerturbationImportance.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Perturbation Feature Importance Base Class — PerturbationImportance","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/PerturbationImportance.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Perturbation Feature Importance Base Class — PerturbationImportance","text":"","code":"PerturbationImportance$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/PerturbationImportance.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perturbation Feature Importance Base Class — PerturbationImportance","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":null,"dir":"Reference","previous_headings":"","what":"Relative Feature Importance — RFI","title":"Relative Feature Importance — RFI","text":"Implementation RFI using modular sampling approach","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Relative Feature Importance — RFI","text":"König, Gunnar, Molnar, Christoph, Bischl, Bernd, Grosse-Wentrup, Moritz (2021). “Relative Feature Importance.” 2020 25th International Conference Pattern Recognition (ICPR), 9318–9325. doi:10.1109/ICPR48806.2021.9413090 .","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Relative Feature Importance — RFI","text":"xplainfi::FeatureImportanceMethod -> xplainfi::PerturbationImportance -> RFI","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Relative Feature Importance — RFI","text":"xplainfi::FeatureImportanceMethod$importance() xplainfi::FeatureImportanceMethod$obs_loss() xplainfi::FeatureImportanceMethod$print() xplainfi::FeatureImportanceMethod$reset() xplainfi::FeatureImportanceMethod$scores()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Relative Feature Importance — RFI","text":"RFI$new() RFI$compute() RFI$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Relative Feature Importance — RFI","text":"Creates new instance RFI class","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relative Feature Importance — RFI","text":"","code":"RFI$new(   task,   learner,   measure,   resampling = NULL,   features = NULL,   groups = NULL,   conditioning_set = NULL,   relation = \"difference\",   iters_perm = 1L,   sampler = NULL )"},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relative Feature Importance — RFI","text":"task, learner, measure, resampling, features, groups Passed PerturbationImportance conditioning_set (character()) Set features condition . Can overridden $compute(). Default (character(0)) equivalent PFI. CFI, set features except tat interest. relation (character(1)) relate perturbed scores originals. Can overridden $scores(). iters_perm (integer(1)) Number permutation iterations. Can overridden $compute(). sampler (ConditionalSampler) Optional custom sampler. Defaults ARFSampler","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"method-compute-","dir":"Reference","previous_headings":"","what":"Method compute()","title":"Relative Feature Importance — RFI","text":"Compute RFI scores","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Relative Feature Importance — RFI","text":"","code":"RFI$compute(conditioning_set = NULL, iters_perm = NULL, store_backends = TRUE)"},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relative Feature Importance — RFI","text":"conditioning_set (character()) Set features condition . NULL, uses stored parameter value. iters_perm (integer(1)) Number permutation iterations. NULL, uses stored value. store_backends (logical(1)) Whether store backends, passed mlr3::resample() internally initial fit learner. may required certain measures recommended leave enabled unless really necessary.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Relative Feature Importance — RFI","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Relative Feature Importance — RFI","text":"","code":"RFI$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relative Feature Importance — RFI","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/RFI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relative Feature Importance — RFI","text":"","code":"library(mlr3) task = tgen(\"friedman1\")$generate(n = 200) rfi = RFI$new(   task = task,   learner = lrn(\"regr.ranger\", num.trees = 50),   measure = msr(\"regr.mse\"),   conditioning_set = c(\"important1\") ) #> ℹ No <ConditionalSampler> provided, using <ARFSampler> with default settings. #> ℹ No <Resampling> provided #> Using `resampling = rsmp(\"holdout\")` with default `ratio = 0.67`. rfi$compute() rfi$importance() #> Key: <feature> #>          feature  importance #>           <char>       <num> #>  1:   important1  0.00000000 #>  2:   important2  6.02487610 #>  3:   important3  1.23262763 #>  4:   important4  9.44022205 #>  5:   important5  3.39863321 #>  6: unimportant1 -0.02474790 #>  7: unimportant2 -0.08034764 #>  8: unimportant3 -0.09577078 #>  9: unimportant4  0.18064164 #> 10: unimportant5 -0.15633412"},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":null,"dir":"Reference","previous_headings":"","what":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"Base class SAGE (Shapley Additive Global Importance) feature importance based Shapley values marginalization. abstract class - use MarginalSAGE ConditionalSAGE.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"SAGE uses Shapley values fairly distribute total prediction performance among features. Unlike perturbation-based methods, SAGE marginalizes features integrating distribution. approximated averaging predictions reference dataset. Standard Error Calculation: standard errors (SE) reported $convergence_history reflect uncertainty Shapley value estimation across different random permutations within single resampling iteration. SEs quantify Monte Carlo sampling error fixed trained model valid inference importance features specific model. capture broader uncertainty model variability across different train/test splits resampling iterations.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"Covert, Ian, Lundberg, M S, Lee, Su-(2020). “Understanding Global Feature Contributions Additive Importance Measures.” Advances Neural Information Processing Systems, volume 33, 17212–17223. https://proceedings.neurips.cc/paper/2020/hash/c7bf0b7c1a86d5eb3be2c722cf2cf746-Abstract.html.","code":""},{"path":[]},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"xplainfi::FeatureImportanceMethod -> SAGE","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"n_permutations (integer(1)) Number permutations sample. reference_data (data.table) Reference dataset marginalization. sampler (FeatureSampler) Sampler object marginalization. convergence_history (data.table) History SAGE values computation. converged (logical(1)) Whether convergence detected. n_permutations_used (integer(1)) Actual number permutations used.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"xplainfi::FeatureImportanceMethod$importance() xplainfi::FeatureImportanceMethod$obs_loss() xplainfi::FeatureImportanceMethod$print() xplainfi::FeatureImportanceMethod$reset() xplainfi::FeatureImportanceMethod$scores()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"SAGE$new() SAGE$compute() SAGE$plot_convergence() SAGE$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"Creates new instance SAGE class.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"","code":"SAGE$new(   task,   learner,   measure,   resampling = NULL,   features = NULL,   n_permutations = 10L,   reference_data = NULL,   batch_size = 5000L,   sampler = NULL,   max_reference_size = 100L,   early_stopping = FALSE,   convergence_threshold = 0.01,   se_threshold = Inf,   min_permutations = 10L,   check_interval = 2L )"},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"task, learner, measure, resampling, features Passed FeatureImportanceMethod. n_permutations (integer(1): 10L) Number permutations per coalition sample Shapley value estimation. total number evaluated coalitions 1 (empty) + n_permutations * n_features. reference_data (data.table | NULL) Optional reference dataset. NULL, uses training data. coalition evaluate, expanded datasets size n_test * n_reference created evaluted batches batch_size. batch_size (integer(1): 5000L) Maximum number observations process single prediction call. sampler (FeatureSampler) Sampler marginalization. relevant ConditionalSAGE. max_reference_size (integer(1): 100L) Maximum size reference dataset. reference larger, subsampled. early_stopping (logical(1): FALSE) Whether enable early stopping based convergence detection. convergence_threshold (numeric(1): 0.01) Relative change threshold convergence detection. se_threshold (numeric(1): Inf) Standard error threshold convergence detection. min_permutations (integer(1): 10L) Minimum permutations checking convergence. check_interval (integer(1): 2L) Check convergence every N permutations.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"method-compute-","dir":"Reference","previous_headings":"","what":"Method compute()","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"Compute SAGE values.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"","code":"SAGE$compute(   store_backends = TRUE,   batch_size = NULL,   early_stopping = NULL,   convergence_threshold = NULL,   se_threshold = NULL,   min_permutations = NULL,   check_interval = NULL )"},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"store_backends (logical(1)) Whether store backends. batch_size (integer(1): 5000L) Maximum number observations process single prediction call. early_stopping (logical(1)) Whether check convergence stop early. convergence_threshold (numeric(1)) Relative change threshold convergence detection. se_threshold (numeric(1)) Standard error threshold convergence detection. min_permutations (integer(1)) Minimum permutations checking convergence. check_interval (integer(1)) Check convergence every N permutations.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"method-plot-convergence-","dir":"Reference","previous_headings":"","what":"Method plot_convergence()","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"Plot convergence history SAGE values.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"","code":"SAGE$plot_convergence(features = NULL)"},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"features (character | NULL) Features plot. NULL, plots features.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"ggplot2 object","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"","code":"SAGE$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/SAGE.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shapley Additive Global Importance (SAGE) Base Class — SAGE","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/WVIM.html","id":null,"dir":"Reference","previous_headings":"","what":"Williamson's Variable Importance Measure (WVIM) — WVIM","title":"Williamson's Variable Importance Measure (WVIM) — WVIM","text":"Base class generalizazing refit-based variable importance measures. Default corresponds leaving feature iters_refit times, corresponds LOCO (Leave One Covariate ).","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/WVIM.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Williamson's Variable Importance Measure (WVIM) — WVIM","text":"xplainfi::FeatureImportanceMethod -> WVIM","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/WVIM.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Williamson's Variable Importance Measure (WVIM) — WVIM","text":"direction (character(1)) Either \"leave-\" \"leave-\".","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/WVIM.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Williamson's Variable Importance Measure (WVIM) — WVIM","text":"xplainfi::FeatureImportanceMethod$importance() xplainfi::FeatureImportanceMethod$obs_loss() xplainfi::FeatureImportanceMethod$print() xplainfi::FeatureImportanceMethod$reset() xplainfi::FeatureImportanceMethod$scores()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/WVIM.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Williamson's Variable Importance Measure (WVIM) — WVIM","text":"WVIM$new() WVIM$compute() WVIM$clone()","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/WVIM.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Williamson's Variable Importance Measure (WVIM) — WVIM","text":"Creates new instance R6 class.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/WVIM.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Williamson's Variable Importance Measure (WVIM) — WVIM","text":"","code":"WVIM$new(   task,   learner,   measure,   resampling = NULL,   features = NULL,   groups = NULL,   direction = c(\"leave-out\", \"leave-in\"),   label = \"Williamson's Variable Importance Measure (WVIM)\",   iters_refit = 1L )"},{"path":"https://jemus42.github.io/xplainfi/reference/WVIM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Williamson's Variable Importance Measure (WVIM) — WVIM","text":"task, learner, measure, resampling, features, groups Passed FeatureImportanceMethod construction. direction (character(1)) Either \"leave-\" \"leave-\". label (character(1)) Method label. iters_refit (integer(1)) Number refit iterations per resampling iteration.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/WVIM.html","id":"method-compute-","dir":"Reference","previous_headings":"","what":"Method compute()","title":"Williamson's Variable Importance Measure (WVIM) — WVIM","text":"Computes leave-leave-feature importance. wvim_design_matrix(task$feature_names, \"leave-\") corresponds LOCO.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/WVIM.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Williamson's Variable Importance Measure (WVIM) — WVIM","text":"","code":"WVIM$compute(store_backends = TRUE)"},{"path":"https://jemus42.github.io/xplainfi/reference/WVIM.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Williamson's Variable Importance Measure (WVIM) — WVIM","text":"store_backends (logical(1)) Passed mlr3::resample store backends resample result. Required measures, may increase memory footprint.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/WVIM.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Williamson's Variable Importance Measure (WVIM) — WVIM","text":"objects class cloneable method.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/WVIM.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Williamson's Variable Importance Measure (WVIM) — WVIM","text":"","code":"WVIM$clone(deep = FALSE)"},{"path":"https://jemus42.github.io/xplainfi/reference/WVIM.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Williamson's Variable Importance Measure (WVIM) — WVIM","text":"deep Whether make deep clone.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/check_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Check group specification — check_groups","title":"Check group specification — check_groups","text":"Check group specification","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/check_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check group specification — check_groups","text":"","code":"check_groups(groups, all_features)"},{"path":"https://jemus42.github.io/xplainfi/reference/check_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check group specification — check_groups","text":"groups (list) (named) list groups all_features (character()) available feature names task.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/check_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check group specification — check_groups","text":"group, element now named.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/check_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check group specification — check_groups","text":"","code":"task <- sim_dgp_interactions(n = 100) task$feature_names #> [1] \"noise1\" \"noise2\" \"x1\"     \"x2\"     \"x3\"      # Intended use groups1 = list(effects = c(\"x1\", \"x2\", \"x3\"), noise = c(\"noise1\", \"noise2\")) check_groups(groups1, task$feature_names) #> $effects #> [1] \"x1\" \"x2\" \"x3\" #>  #> $noise #> [1] \"noise1\" \"noise2\" #>   # Names are auto-generated where needed check_groups(list(a = \"x1\",  c(\"x2\", \"x1\")), task$feature_names) #> ! Feature is specified in multiple groups: \"x1\" #> Not all groups are named #> ℹ Group \"2\" is named automatically #> $a #> [1] \"x1\" #>  #> $GroupB #> [1] \"x2\" \"x1\" #>   if (FALSE) { # \\dontrun{ # Unexpected features groups2 = list(effects = c(\"x1\", \"foo\", \"bar\", \"x1\")) check_groups(groupos1, task$feature_names) # Too deeply nested groups3 = list(effects = c(\"x1\", \"x2\", \"x3\"), noise = c(\"noise1\", list(c(\"noise2\")))) check_groups(groupos1, task$feature_names) } # }"},{"path":"https://jemus42.github.io/xplainfi/reference/op-null-default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default value for NULL — op-null-default","title":"Default value for NULL — op-null-default","text":"backport %||% available R versions 4.4.0.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/op-null-default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default value for NULL — op-null-default","text":"","code":"x %||% y"},{"path":"https://jemus42.github.io/xplainfi/reference/op-null-default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default value for NULL — op-null-default","text":"x, y x NULL length 0, return y; otherwise returns x.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/op-null-default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default value for NULL — op-null-default","text":"","code":"1 %||% 2 #> [1] 1 NULL %||% 2 #> [1] 2"},{"path":"https://jemus42.github.io/xplainfi/reference/print_bib.html","id":null,"dir":"Reference","previous_headings":"","what":"Print an Rd-formatted bib entry — print_bib","title":"Print an Rd-formatted bib entry — print_bib","text":"Print Rd-formatted bib entry","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/print_bib.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print an Rd-formatted bib entry — print_bib","text":"","code":"print_bib(...)"},{"path":"https://jemus42.github.io/xplainfi/reference/print_bib.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print an Rd-formatted bib entry — print_bib","text":"... (character) One quoted names bibentries print.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/sim_dgp_ewald.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate data as in Ewald et al. (2024) — sim_dgp_ewald","title":"Simulate data as in Ewald et al. (2024) — sim_dgp_ewald","text":"Reproduces data generating process Ewald et al. (2024) benchmarking feature importance methods. Includes correlated features interaction effects.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/sim_dgp_ewald.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate data as in Ewald et al. (2024) — sim_dgp_ewald","text":"","code":"sim_dgp_ewald(n = 500)"},{"path":"https://jemus42.github.io/xplainfi/reference/sim_dgp_ewald.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate data as in Ewald et al. (2024) — sim_dgp_ewald","text":"n (integer(1)) Number samples create.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/sim_dgp_ewald.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate data as in Ewald et al. (2024) — sim_dgp_ewald","text":"regression task (mlr3::TaskRegr) data.table backend.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/sim_dgp_ewald.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate data as in Ewald et al. (2024) — sim_dgp_ewald","text":"Mathematical Model: $$X_1, X_3, X_5 \\sim \\text{Uniform}(0,1)$$ $$X_2 = X_1 + \\varepsilon_2, \\quad \\varepsilon_2 \\sim N(0, 0.001)$$ $$X_4 = X_3 + \\varepsilon_4, \\quad \\varepsilon_4 \\sim N(0, 0.1)$$ $$Y = X_4 + X_5 + X_4 \\cdot X_5 + \\varepsilon, \\quad \\varepsilon \\sim N(0, 0.1)$$ Feature Properties: X1, X3, X5: Independent uniform(0,1) distributions X2: Nearly perfect copy X1 (correlation ≈ 0.99) X4: Noisy copy X3 (correlation ≈ 0.67) Y depends X4, X5, interaction","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/sim_dgp_ewald.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulate data as in Ewald et al. (2024) — sim_dgp_ewald","text":"Ewald, Katharina F, Bothmann, Ludwig, Wright, N. M, Bischl, Bernd, Casalicchio, Giuseppe, König, Gunnar (2024). “Guide Feature Importance Methods Scientific Inference.” Longo, Luca, Lapuschkin, Sebastian, Seifert, Christin (eds.), Explainable Artificial Intelligence, 440–464. ISBN 978-3-031-63797-1, doi:10.1007/978-3-031-63797-1_22 .","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/sim_dgp_ewald.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate data as in Ewald et al. (2024) — sim_dgp_ewald","text":"","code":"sim_dgp_ewald(100) #>  #> ── <TaskRegr> (100x6) ────────────────────────────────────────────────────────── #> • Target: y #> • Properties: - #> • Features (5): #>   • dbl (5): x1, x2, x3, x4, x5"},{"path":"https://jemus42.github.io/xplainfi/reference/sim_dgp_scenarios.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation DGPs for Feature Importance Method Comparison — sim_dgp_scenarios","title":"Simulation DGPs for Feature Importance Method Comparison — sim_dgp_scenarios","text":"data generating processes (DGPs) designed illustrate specific strengths weaknesses different feature importance methods like PFI, CFI, RFI. DGP focuses one primary challenge make differences methods clear.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/sim_dgp_scenarios.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation DGPs for Feature Importance Method Comparison — sim_dgp_scenarios","text":"","code":"sim_dgp_correlated(n = 500L)  sim_dgp_mediated(n = 500L)  sim_dgp_confounded(n = 500L, hidden = TRUE)  sim_dgp_interactions(n = 500L)  sim_dgp_independent(n = 500L)"},{"path":"https://jemus42.github.io/xplainfi/reference/sim_dgp_scenarios.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation DGPs for Feature Importance Method Comparison — sim_dgp_scenarios","text":"n (integer(1): 500L) Number observations generate. hidden (logical(1): TRUE) Whether hide confounder returned task. FALSE, confounder included feature, allowing direct adjustment. TRUE (default), proxy available, simulating unmeasured confounding.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/sim_dgp_scenarios.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulation DGPs for Feature Importance Method Comparison — sim_dgp_scenarios","text":"regression task (mlr3::TaskRegr) data.table backend.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/sim_dgp_scenarios.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulation DGPs for Feature Importance Method Comparison — sim_dgp_scenarios","text":"Correlated Features DGP: DGP creates highly correlated predictors PFI show artificially low importance due redundancy, CFI correctly identify feature's conditional contribution. Mathematical Model: $$X_1 \\sim N(0,1)$$ $$X_2 = X_1 + \\varepsilon_2, \\quad \\varepsilon_2 \\sim N(0, 0.05^2)$$ $$X_3 \\sim N(0,1), \\quad X_4 \\sim N(0,1)$$ $$Y = 2 \\cdot X_1 + X_3 + \\varepsilon$$ \\(\\varepsilon \\sim N(0, 0.2^2)\\). Feature Properties: x1: Standard normal, direct causal effect y (β=2.0) x2: Nearly perfect copy x1 (x1 + small noise), causal effect y (β=0) x3: Independent standard normal, direct causal effect y (β=1.0) x4: Independent standard normal, effect y (β=0) Expected Behavior: Marginal methods (PFI, Marginal SAGE): falsely assign importance x2 due correlation x1 Conditional methods (CFI, Conditional SAGE): correctly assign near-zero importance x2 Key insight: x2 \"spurious predictor\" - correlated causal feature causal Mediated Effects DGP: DGP demonstrates difference total direct causal effects. features affect outcome mediators. Mathematical Model: $$\\text{exposure} \\sim N(0,1), \\quad \\text{direct} \\sim N(0,1)$$ $$\\text{mediator} = 0.8 \\cdot \\text{exposure} + 0.6 \\cdot \\text{direct} + \\varepsilon_m$$ $$Y = 1.5 \\cdot \\text{mediator} + 0.5 \\cdot \\text{direct} + \\varepsilon$$ \\(\\varepsilon_m \\sim N(0, 0.3^2)\\) \\(\\varepsilon \\sim N(0, 0.2^2)\\). Feature Properties: exposure: direct effect y, mediator (total effect = 1.2) mediator: Mediates effect exposure y direct: direct effect y effect mediator noise: causal relationship y Causal Structure: exposure → mediator → y ← direct → mediator Expected Behavior: PFI: Shows total effects (exposure appears important) CFI: Shows direct effects (exposure appears less important conditioning mediator) RFI mediator: show direct effects similar CFI Confounding DGP: DGP includes confounder affects features outcome. Uses simple coefficients easy interpretation. Mathematical Model: $$H \\sim N(0,1)$$ $$X_1 = H + \\varepsilon_1, \\quad X_2 = H + \\varepsilon_2$$ $$\\text{proxy} = H + \\varepsilon_p, \\quad \\text{independent} \\sim N(0,1)$$ $$Y = H + 0.5 \\cdot X_1 + 0.5 \\cdot X_2 + \\text{independent} + \\varepsilon$$ \\(\\varepsilon \\sim N(0, 0.5^2)\\) independently. Model Structure: Confounder H ~ N(0,1) (dashed red node = potentially unobserved) x1 = H + noise, x2 = H + noise (affected confounder) proxy = H + noise (noisy measurement confounder) independent ~ N(0,1) (truly independent) y = H + 0.5x1 + 0.5x2 + independent + noise Expected Behavior: PFI: show inflated importance x1 x2 due confounding CFI: partially account confounding conditional sampling RFI conditioning confounder/proxy: reduce confounding bias Interaction Effects DGP: DGP demonstrates pure interaction effect features main effects. Mathematical Model: $$Y = 2 \\cdot X_1 \\cdot X_2 + X_3 + \\varepsilon$$ \\(X_j \\sim N(0,1)\\) independently \\(\\varepsilon \\sim N(0, 0.5^2)\\). Feature Properties: x1, x2: Independent features interaction effect (main effects) x3: Independent feature main effect noise1, noise2: causal effects Expected Behavior: PFI: assign near-zero importance x1 x2 (marginal effect) CFI: capture interaction assign high importance x1 x2 Ground truth: x1 x2 important interaction Independent Features DGP: baseline scenario features independent effects additive. importance methods give similar results. Mathematical Model: $$Y = 2.0 \\cdot X_1 + 1.0 \\cdot X_2 + 0.5 \\cdot X_3 + \\varepsilon$$ \\(X_j \\sim N(0,1)\\) independently \\(\\varepsilon \\sim N(0, 0.2^2)\\). Feature Properties: important1-3: Independent features different effect sizes unimportant1-2: Independent noise features effect Expected Behavior: methods: rank features consistently true effect sizes Ground truth: important1 > important2 > important3 > unimportant1,2 ≈ 0","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/sim_dgp_scenarios.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Simulation DGPs for Feature Importance Method Comparison — sim_dgp_scenarios","text":"sim_dgp_correlated(): Correlated features demonstrating PFI's limitations sim_dgp_mediated(): Mediated effects showing direct vs total importance sim_dgp_confounded(): Confounding scenario conditional sampling sim_dgp_interactions(): Interaction effects features sim_dgp_independent(): Independent features baseline scenario","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/sim_dgp_scenarios.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulation DGPs for Feature Importance Method Comparison — sim_dgp_scenarios","text":"Ewald, Katharina F, Bothmann, Ludwig, Wright, N. M, Bischl, Bernd, Casalicchio, Giuseppe, König, Gunnar (2024). “Guide Feature Importance Methods Scientific Inference.” Longo, Luca, Lapuschkin, Sebastian, Seifert, Christin (eds.), Explainable Artificial Intelligence, 440–464. ISBN 978-3-031-63797-1, doi:10.1007/978-3-031-63797-1_22 .","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/sim_dgp_scenarios.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation DGPs for Feature Importance Method Comparison — sim_dgp_scenarios","text":"","code":"task = sim_dgp_correlated(200) task$data() #>               y         x1         x2          x3          x4 #>           <num>      <num>      <num>       <num>       <num> #>   1: -2.1118153 -1.3187571 -1.2624719  0.96786261  0.03210798 #>   2:  1.6456053  1.0763351  1.0651516 -0.55158299 -0.90284332 #>   3: -0.3258376  0.2820489  0.2331276 -0.54894473  1.34122873 #>   4:  5.4841807  1.4668689  1.4653725  2.21567122 -0.61818161 #>   5:  1.3109659  0.6378804  0.6785691 -0.04737050  0.48608603 #>  ---                                                          #> 196: -1.5262913 -1.6777980 -1.6913352  1.99375080 -1.11499599 #> 197: -1.2927544 -0.4144368 -0.4020099 -0.33662560  0.43787178 #> 198:  2.2211543  0.8226387  0.8789234  0.52428758 -0.96932752 #> 199:  0.6844730  0.2608002  0.3558582  0.06507744 -0.71515568 #> 200: -1.3901486 -0.5199819 -0.5096603 -0.40806734 -1.63188418 task = sim_dgp_mediated(200) task$data() #>                y       direct   exposure    mediator       noise #>            <num>        <num>      <num>       <num>       <num> #>   1:  1.72871749  1.510267163  0.2477119  0.82527067  0.59159538 #>   2: -0.91507349 -0.572260761 -0.8183839 -0.57575650  2.16364373 #>   3: -1.74707149  0.339971504 -2.0233079 -1.43859072 -1.44968989 #>   4: -5.07553680 -2.125784321 -1.8293883 -2.16642672  0.54791386 #>   5: -1.45565887 -0.708715882 -0.1638108 -0.80772717 -0.82008198 #>  ---                                                             #> 196: -1.68841348 -0.803409563 -0.2449649 -0.77633302  0.66324175 #> 197: -0.07390481 -0.252559459 -0.3178441 -0.06869126 -0.05298769 #> 198: -2.16570395  0.545276334 -2.2282946 -1.31491371  0.80974272 #> 199: -0.44557714 -0.009336889 -0.1346831 -0.09230254 -1.09936250 #> 200:  0.18856747  0.597945147 -0.3216861 -0.12861216 -1.60970248 # Hidden confounder scenario (traditional) task_hidden = sim_dgp_confounded(200, hidden = TRUE) task_hidden$feature_names  # proxy available but not confounder #> [1] \"independent\" \"proxy\"       \"x1\"          \"x2\"           # Observable confounder scenario task_observed = sim_dgp_confounded(200, hidden = FALSE) task_observed$feature_names  # both confounder and proxy available #> [1] \"confounder\"  \"independent\" \"proxy\"       \"x1\"          \"x2\"          task = sim_dgp_interactions(200) task$data() #>                y      noise1     noise2           x1          x2          x3 #>            <num>       <num>      <num>        <num>       <num>       <num> #>   1:  1.53669605  0.05543011 -1.0894129 -0.087258465  0.18207585  1.34235328 #>   2:  1.33583302  1.99270159 -0.8168269  2.068399897  0.33118418  0.46637293 #>   3:  3.63144710 -1.51507809 -0.7072908 -1.320968780 -0.59869942  1.46702248 #>   4:  1.02910169  0.52161663 -0.6381880  0.532709964  0.84010188 -0.09316069 #>   5:  0.03505862  0.38915968  1.4647485 -0.557779246 -0.01040166  0.37751997 #>  ---                                                                         #> 196:  0.36550226  0.25409704  0.1370753  0.009261935 -0.21885827  0.17675640 #> 197:  0.65387043 -0.73896576 -1.6189226  0.193119060  0.40909436  0.66973044 #> 198: -2.95155684 -0.20537905  0.0750288  1.499590357 -1.41035163  0.72397517 #> 199:  3.45977637  1.03357652 -0.2386548 -2.366980065 -0.34692260  1.56937257 #> 200: -1.99943446 -0.75249439 -1.8023824  0.373483307 -1.07181913 -0.86743367 task = sim_dgp_independent(200) task$data() #>                y  important1 important2 important3 unimportant1 unimportant2 #>            <num>       <num>      <num>      <num>        <num>        <num> #>   1:  1.49541200  0.53787473  1.1067538 -1.5100981  -0.53532689  -0.70912827 #>   2: -1.09441019 -0.61853989 -0.3304718  0.5800517  -0.51617694   0.16030702 #>   3: -0.59589130 -0.04992317 -1.0708543  0.9387497   1.26080435   0.89976404 #>   4:  1.34571828  0.41986736  0.2134126  0.4893137   0.70089394  -0.22213357 #>   5:  1.09681129 -0.15969088  1.4497203 -0.2351658  -0.38109752  -0.40008446 #>  ---                                                                         #> 196: -1.48525602 -0.35023836 -0.5227552 -1.0779189  -0.67959895   0.17398537 #> 197:  0.06632007  0.15524157 -0.7265840  0.8677522  -0.08826338   0.40988701 #> 198: -2.49825188 -0.09999507 -1.8559777 -0.8672241  -0.77977090   0.01067129 #> 199:  3.42889280  2.00534076 -0.4286608 -0.1003371   0.39037901   0.55832147 #> 200:  1.14607520  0.25903529  0.7394195 -0.6078155   0.67784727  -0.75464505"},{"path":"https://jemus42.github.io/xplainfi/reference/wvim_design_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Feature Selection Design Matrix — wvim_design_matrix","title":"Create Feature Selection Design Matrix — wvim_design_matrix","text":"Creates logical design matrix leave-leave-feature evaluation. Used internally mlr3fselect evaluate feature subsets.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/wvim_design_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Feature Selection Design Matrix — wvim_design_matrix","text":"","code":"wvim_design_matrix(   all_features,   feature_names = all_features,   direction = c(\"leave-out\", \"leave-in\") )"},{"path":"https://jemus42.github.io/xplainfi/reference/wvim_design_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Feature Selection Design Matrix — wvim_design_matrix","text":"all_features (character()) available feature names task. feature_names (character() | list character()) Features feature groups evaluate. Can vector individual features named list grouped features. Defaults all_features unspecified. direction (character(1)) Either \"leave-\" \"leave-\" (default). Controls features selected design matrix. \"leave-\" sets features interest FALSE, \"leave-\" analogously sets TRUE.","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/wvim_design_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Feature Selection Design Matrix — wvim_design_matrix","text":"data.table logical columns feature all_features length(feature_names) rows, one entry feature_names","code":""},{"path":"https://jemus42.github.io/xplainfi/reference/wvim_design_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Feature Selection Design Matrix — wvim_design_matrix","text":"","code":"task = mlr3::tsk(\"mtcars\")  # Individual features feature_names = task$feature_names[1:3] wvim_design_matrix(task$feature_names, feature_names, \"leave-in\") #>        am   carb    cyl   disp   drat   gear     hp   qsec     vs     wt #>    <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> #> 1:   TRUE  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE #> 2:  FALSE   TRUE  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE #> 3:  FALSE  FALSE   TRUE  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE wvim_design_matrix(task$feature_names, feature_names, \"leave-out\") #>        am   carb    cyl   disp   drat   gear     hp   qsec     vs     wt #>    <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> #> 1:  FALSE   TRUE   TRUE   TRUE   TRUE   TRUE   TRUE   TRUE   TRUE   TRUE #> 2:   TRUE  FALSE   TRUE   TRUE   TRUE   TRUE   TRUE   TRUE   TRUE   TRUE #> 3:   TRUE   TRUE  FALSE   TRUE   TRUE   TRUE   TRUE   TRUE   TRUE   TRUE  # Feature groups feature_groups = list(   A = task$feature_names[1:2],   B = task$feature_names[3:5] ) wvim_design_matrix(task$feature_names, feature_groups, \"leave-out\") #>        am   carb    cyl   disp   drat   gear     hp   qsec     vs     wt #>    <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> <lgcl> #> 1:  FALSE  FALSE   TRUE   TRUE   TRUE   TRUE   TRUE   TRUE   TRUE   TRUE #> 2:   TRUE   TRUE  FALSE  FALSE  FALSE   TRUE   TRUE   TRUE   TRUE   TRUE"},{"path":"https://jemus42.github.io/xplainfi/reference/xplainfi-package.html","id":null,"dir":"Reference","previous_headings":"","what":"xplainfi: Feature Importance Methods for Model Interpretability — xplainfi-package","title":"xplainfi: Feature Importance Methods for Model Interpretability — xplainfi-package","text":"Provides consistent interface common feature importance methods, permutation feature importance, 'LOCO', 'SAGE'.","code":""},{"path":[]},{"path":"https://jemus42.github.io/xplainfi/reference/xplainfi-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"xplainfi: Feature Importance Methods for Model Interpretability — xplainfi-package","text":"Maintainer: Lukas Burk github@quantenbrot.de (ORCID)","code":""},{"path":"https://jemus42.github.io/xplainfi/news/index.html","id":"xplainfi-0109001","dir":"Changelog","previous_headings":"","what":"xplainfi 0.1.0.9001","title":"xplainfi 0.1.0.9001","text":"turns still period major changes early phase, , uhm, well.","code":""},{"path":"https://jemus42.github.io/xplainfi/news/index.html","id":"general-changes-and-improvements-0-1-0-9001","dir":"Changelog","previous_headings":"","what":"General changes and improvements","title":"xplainfi 0.1.0.9001","text":"\"nadeau_bengio\" implements correction method Nadeau & Bengio (2003) recommended Molnar et al. (2023). $scores becomes $scores() fleixibility analogous $importance(). Original scores stored private$.scores (now). $importance() $scores() argument relation defaulting \"differrence\" allows calculate importances like PFI either difference ratio baseline post-modification loss. argument moved $compute() avoid recompute predictions model refits. Add sim_dgp_ewald() sim_dgp_*() helpers simulate data (Task form) simple DGPs used illustration Ewald et al. (2024) example, make easier interpret results various importance methods.","code":""},{"path":"https://jemus42.github.io/xplainfi/news/index.html","id":"observation-wise-losses-0-1-0-9001","dir":"Changelog","previous_headings":"General changes and improvements","what":"Observation-wise losses","title":"xplainfi 0.1.0.9001","text":"$obs_loss() analogously $scores() computes observation-wise importance scores based losses stored $.obs_losses measure Measure$obs_loss() function. $predictions kept now just case ’re useful","code":""},{"path":"https://jemus42.github.io/xplainfi/news/index.html","id":"groups-of-features-0-1-0-9001","dir":"Changelog","previous_headings":"General changes and improvements","what":"Groups of features","title":"xplainfi 0.1.0.9001","text":"PerturbationImportance WVIM gain groups argument overrides features enables definition groups features Example: groups = list(effects = c(\"x1\", \"x2\", \"x3\"), noise = c(\"noise1\", \"noise2\")) output $importance(), $scores(), $obs_loss() feature column gets name group, effectively becomes “meta feature” far output concerned.","code":""},{"path":[]},{"path":"https://jemus42.github.io/xplainfi/news/index.html","id":"leaveoutin---wvim-0-1-0-9001","dir":"Changelog","previous_headings":"Method-specific changes","what":"LeaveOutIn -> WVIM","title":"xplainfi 0.1.0.9001","text":"Williamson’s Variable Importance Measure (WVIM) generalizes LOCO / LOCI New implementation built around mlr3fselect, greatly simplifying internals","code":""},{"path":"https://jemus42.github.io/xplainfi/news/index.html","id":"perturbationimportance-0-1-0-9001","dir":"Changelog","previous_headings":"Method-specific changes","what":"PerturbationImportance","title":"xplainfi 0.1.0.9001","text":"Streamline speedup PerturbationImportance implementation, also using learner$predict_newdata_fast() (#39), bumping mlr3 dependency >= 1.1.0. May need adjustment case large data / large iters_perm intermediate data grow large","code":""},{"path":"https://jemus42.github.io/xplainfi/news/index.html","id":"conditional-sampling-0-1-0-9001","dir":"Changelog","previous_headings":"Method-specific changes","what":"Conditional sampling","title":"xplainfi 0.1.0.9001","text":"Extend ARFSampler store arguments construction, making easier “preconfigure” sampler via arguments used $sample(). Standardize conditioning_set name character vector defining features condition ConditionalSampler RFI. Currently support conditioning_set Implementation still incomplete","code":""},{"path":"https://jemus42.github.io/xplainfi/news/index.html","id":"sage-0-1-0-9001","dir":"Changelog","previous_headings":"Method-specific changes","what":"SAGE","title":"xplainfi 0.1.0.9001","text":"Fix accidentally marginal ConditionalSAGE. Also using learner$predict_newdata_fast() now (#39) batch_size controls number observations used per learner$predict_newdata_fast() call (lead excessive RAM usage). Permutations evaluated steps check_interval time, convergence checked values change less convergence_threshold, convergence assumed $converged field set TRUE least min_permutations perfomed case, $n_permutations_used shows number performed permutations $convergence_history tracks convergence history can analyzed see per-feature values checkpoint $plot_convergence_history() plots convergence history per feature Convergence tracked first resampling iteration Also add standard error tracking part convergence history (#33)","code":""},{"path":"https://jemus42.github.io/xplainfi/news/index.html","id":"xplainfi-010","dir":"Changelog","previous_headings":"","what":"xplainfi 0.1.0","title":"xplainfi 0.1.0","text":"PFI CFI RFI (via arf-powered conditional sampling) SAGE (marginal conditional, latter via arf) LOCO LOCI Includes comparison reference implementation Python via fippy","code":""}]
