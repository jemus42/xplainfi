% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FeatureSampler.R
\name{KnockoffSequentialSampler}
\alias{KnockoffSequentialSampler}
\title{Gaussian Knockoff Conditional Sampler}
\description{
A \link{KnockoffSampler} defaulting to second-order Gaussian knockoffs
as created by \code{seqknockoff::knockoffs_seq}.
}
\details{
This is equivalent to \link{KnockoffSampler} using \code{knockoff_fun = seqknockoff::knockoffs_seq}.
}
\examples{
\dontrun{
# Requires seqknockoff (https://github.com/kormama1/seqknockoff)
task = tgen("simplex")$generate(n = 100)
sampler_seq = KnockoffSampler$new(task)
sampled_seq = sampler_seq$sample("x1")
}
}
\references{
Watson D, Wright M (2021).
\dQuote{Testing conditional independence in supervised learning algorithms.}
\emph{Machine Learning}, \bold{110}(8), 2107-2129.
\doi{10.1007/s10994-021-06030-6}.

Blesch K, Watson D, Wright M (2023).
\dQuote{Conditional feature importance for mixed data.}
\emph{AStA Advances in Statistical Analysis}, \bold{108}(2), 259-278.
\doi{10.1007/s10182-023-00477-9}.
}
\section{Super classes}{
\code{\link[xplainfi:FeatureSampler]{xplainfi::FeatureSampler}} -> \code{\link[xplainfi:ConditionalSampler]{xplainfi::ConditionalSampler}} -> \code{\link[xplainfi:KnockoffSampler]{xplainfi::KnockoffSampler}} -> \code{KnockoffSequentialSampler}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{feature_types}}{(\code{character()}) Feature types supported by the sampler.
Will be checked against the provied \link[mlr3:Task]{mlr3::Task} to ensure compatibility.}

\item{\code{x_tilde}}{Knockoff matrix}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-KnockoffSequentialSampler-new}{\code{KnockoffSequentialSampler$new()}}
\item \href{#method-KnockoffSequentialSampler-clone}{\code{KnockoffSequentialSampler$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="xplainfi" data-topic="FeatureSampler" data-id="print"><a href='../../xplainfi/html/FeatureSampler.html#method-FeatureSampler-print'><code>xplainfi::FeatureSampler$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="xplainfi" data-topic="ConditionalSampler" data-id="sample_newdata"><a href='../../xplainfi/html/ConditionalSampler.html#method-ConditionalSampler-sample_newdata'><code>xplainfi::ConditionalSampler$sample_newdata()</code></a></span></li>
<li><span class="pkg-link" data-pkg="xplainfi" data-topic="KnockoffSampler" data-id="sample"><a href='../../xplainfi/html/KnockoffSampler.html#method-KnockoffSampler-sample'><code>xplainfi::KnockoffSampler$sample()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KnockoffSequentialSampler-new"></a>}}
\if{latex}{\out{\hypertarget{method-KnockoffSequentialSampler-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance using sequential knockoffs via \link[seqknockoff:knockoffs_seq]{seqknockoff::knockoffs_seq}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KnockoffSequentialSampler$new(task)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{task}}{(\link[mlr3:Task]{mlr3::Task}) Task to sample from.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-KnockoffSequentialSampler-clone"></a>}}
\if{latex}{\out{\hypertarget{method-KnockoffSequentialSampler-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{KnockoffSequentialSampler$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
